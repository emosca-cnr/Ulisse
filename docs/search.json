[{"path":"/articles/Ulisse_bulk.html","id":"downloading-and-preparing-the-data","dir":"Articles","previous_headings":"","what":"Downloading and preparing the data","title":"Ulisse workflow 1: Pathway Cross-Talk analysis of bulk data","text":"Ulisse needs mainly two inputs: gene list, can ranked, biological network. example dataset use breast cancer mutational data obtained TCGA, use obtain ranked gene list. biological network obtained STRING database.","code":"library(Ulisse) library(TCGAbiolinks) library(STRINGdb) library(igraph) library(reshape2) library(org.Hs.eg.db)"},{"path":"/articles/Ulisse_bulk.html","id":"biological-network","dir":"Articles","previous_headings":"Downloading and preparing the data","what":"Biological network","title":"Ulisse workflow 1: Pathway Cross-Talk analysis of bulk data","text":"obtain STRING data STRINGdb (Szklarczyk et al. 2021) build network proteins present database. gene names formatted STRING identifiers, need convert gene symbol.","code":"string_db <- STRINGdb$new( version=\"11.0\",                             species=9606,                             score_threshold=700,                             input_directory=\".\" ) string_proteins <- string_db$get_proteins() PPI <- unique(string_db$get_interactions(string_proteins$protein_external_id)) PPI.g <- graph_from_edgelist(as.matrix(PPI[,1:2]), directed = F) V(PPI.g)$name <- string_proteins$preferred_name[match(V(PPI.g)$name, string_proteins$protein_external_id)] PPI.g #> IGRAPH a991c72 UN-- 17185 420534 --  #> + attr: name (v/c) #> + edges from a991c72 (vertex names): #>  [1] ARF5--SPTBN2    ARF5--KIF13B    ARF5--AP1B1     ARF5--KIF21A    #>  [5] ARF5--TMED7     ARF5--ARFGAP1   ARF5--ANK2      ARF5--KLC1      #>  [9] ARF5--COPZ2     ARF5--KIF15     ARF5--DCTN5     ARF5--KIF2B     #> [13] ARF5--KIF16B    ARF5--KIF25     ARF5--KDELR2    ARF5--RAB1B     #> [17] ARF5--TMED10    ARF5--KIF3B     ARF5--RACGAP1   ARF5--SPTBN4    #> [21] ARF5--GBF1      ARF5--DYNC1I2   ARF5--INS       ARF5--CYTH3     #> [25] ARF5--CAPZB     ARF5--RAB11FIP3 ARF5--ACAP2     ARF5--KIF3C     #> [29] ARF5--DYNC1LI1  ARF5--KIFAP3    ARF5--COPA      ARF5--YKT6      #> + ... omitted several edges"},{"path":"/articles/Ulisse_bulk.html","id":"ranked-gene-list","dir":"Articles","previous_headings":"Downloading and preparing the data","what":"Ranked gene list","title":"Ulisse workflow 1: Pathway Cross-Talk analysis of bulk data","text":"obtain needed ranked gene list download data TGCA using TCGAbiolinks package Mounir et al. (2019), split dataset obtain gene sample matrix, number mutation observed gene. making row mean obtain frequency mutation gene samples, use value rank. detail, study cross-talks top 200 genes.","code":"query <- GDCquery(project = \"TCGA-BRCA\",                    data.category = \"Simple Nucleotide Variation\",                   data.type = \"Masked Somatic Mutation\")                   #) GDCdownload(query = query) #have to be done only the first time data <- TCGAbiolinks::GDCprepare(query, summarizedExperiment = F, save = T) data <- data[!data$Entrez_Gene_Id == 0,] data <- data.frame(table(data$SYMBOL, data$Tumor_Sample_Barcode), stringsAsFactors = F) data <- data.frame(reshape2::acast(data, Var1 ~ Var2), stringsAsFactors = F) data$mean <- rowMeans(data) data <- data[order(data$mean, decreasing = T),]  gene_weights <- data.frame(gene = rownames(data),                       weights = data$mean,                       stringsAsFactors = F) target_gene_weights <- gene_weights[1:200,]"},{"path":"/articles/Ulisse_bulk.html","id":"pathway-data","dir":"Articles","previous_headings":"Downloading and preparing the data","what":"Pathway Data","title":"Ulisse workflow 1: Pathway Cross-Talk analysis of bulk data","text":"Now two needed input, can proceed pipeline. subsequent step : group genes (ranked) gene-sets (pathways) obtain gene-set list use gene-set list adjacency matrix biological network calculate cross-talk. example use MSigDB Hallmark pathways (Liberzon et al. 2015) obtain gene-set list using preparing_msigdb_list(). function downloads defined gene-set database uses group gene gene list. function return list composed named vector pathway. vectors composed ranks named genes gene-set. returns pathways composed least min_size maximum max_size genes. Ulisse contains also function, preparing_gs_list() build gene-set list custom resources. exemplify usage function, download Hallmark db MSigDB using msigdbr package (Dolgalev 2021) build gene-set list","code":"ptw <- preparing_msigdb_list(species = \"Homo sapiens\",                               category = \"H\",                               type = \"gene_symbol\", min_size = 1, max_size = 500,                               gene = target_gene_weights$gene,                              weights = target_gene_weights$weights) ptw[1:3] #> $HALLMARK_ALLOGRAFT_REJECTION #>       AKT1      BRCA1       FLNA  #> 0.02938197 0.02532928 0.02938197  #>  #> $HALLMARK_ANDROGEN_RESPONSE #>       AKT1  #> 0.02938197  #>  #> $HALLMARK_APICAL_JUNCTION #>       CDH1       FBN1       MYH9        NF1       PTEN  #> 0.13880446 0.02938197 0.03444782 0.04457953 0.05876393 msig_out <- msigdbr::msigdbr(species = \"Homo sapiens\", category = \"H\") ptw <- preparing_gs_list(gs_names =  msig_out$gs_name,                          gs_genes = msig_out$gene_symbol,                           weights = setNames(target_gene_weights$weights, target_gene_weights$gene),                           min_size = 1, max_size = 500)"},{"path":"/articles/Ulisse_bulk.html","id":"cross-talk","dir":"Articles","previous_headings":"","what":"Cross-talk","title":"Ulisse workflow 1: Pathway Cross-Talk analysis of bulk data","text":"Now needed input calculating cross-talk. biological network provided gs_cross_talk() function adjacency matrix. Cross-talk calculation can parallelized increasing mc_cores_pct mc_cores_perm values: first parallelize calculation cross-talk gene-sets, second permutations used p-value calculation, thus multiply mc_cores_pct part function. number permutations k corresponds number permutation needed , together original matrix, used calculation p-value FDR. set number 49, means p-value FDR calculated 49 permuted matrices + original one, 50 matrix total (thus minimal p-value 1/50 = 0.02). inputs parameter : shared set FALSE gene-set cross-talk avoid considering shared genes. Pathways defined group genes occur particular molecular function. However, mutually exclusive, gene may involved multiple functions. Considering shared genes lead consider cross-talk calculations even links shared gene -shared, nevertheless internal pathway. Thus, calculating cross-talk gene-sets pathways parameter set FALSE; hash: logical, used speed-calculation lots gene-sets used. pathway cross-talk suggest set TRUE; ct_info: logical, detail gene-gene interaction gene-set returned. might highly important cell-cell cross-talk. set FALSE.","code":"adj.m <- as_adjacency_matrix(PPI.g, sparse = F) pct <- gs_cross_talk(gs_list = ptw,                       gene_network_adj = adj.m,                       k = 49, shared = F,                       hash = T,                       ct_info = F,                       mc_cores_perm = 1,                       mc_cores_ct = 1) pct[1:10,]"},{"path":"/articles/Ulisse_bulk.html","id":"cross-talk-visualization","dir":"Articles","previous_headings":"Cross-talk","what":"Cross-talk visualization","title":"Ulisse workflow 1: Pathway Cross-Talk analysis of bulk data","text":"Cross-talk results can filtered maintain significant ones. results can visualized network (plot_network_CT()) heatmap (ct_heatmap()) using Ulisse package functions. Considering network, filtering argument used control CT visualized network. set TRUE, p_val, FDR ct_val used identify significant CT plot solid line, whereas others plotted dashed line. Otherwise, whole cross-talk result table used. community can logical (community calculated using igraph::fastgreedy.community()), community object calculated igraph package. vertex_label can either logical (label vertices plotted), vector label assigned vertex (explained later vignette). edge_col_by edge_width parameters control value used color edges width proportional value. edge_adj_col used control transparency edges: pathway cross-talk can lots links can e useful control transparency. plot_network_CT() function returns igraph cross-talk network communities “comm_id” vertex attribute (calculated). plot_network_CT() function uses ggraph package functions (Pedersen 2022), ggplot2-based (Wickham 2016). file_out set NULL function returns also ggplot2 network object.  can see significant CT heatmap. can choose variable color heatmap, decide use cross-talk score. color parameters used set color extremes color scale, want correct outliers can choose use minimum maximum (default) ad provide values. no_ct_color used color cells heatmap corresponding pathways pairs shows CT necessarily present heatmap 0 score. different colors minimum zero help heatmap readability. parameters can passed ... argument. See complexHeatmap package parameters (Gu, Eils, Schlesner 2016).","code":"pct_f <- pct[which(pct$p_value_link <=0.05),]  pct_net <- plot_network_CT(ct = pct_f,                             filtering = F,                            community = T,                             vertex_label = FALSE,                            edge_col_by = \"ct_score\", edge_width = T, edge_adj_col = 0.7,                            file_out =NULL, width = 200, height = 200, res = 300, units = \"mm\")  pct_net #> IGRAPH cb0e5ae UN-- 26 149 --  #> + attr: name (v/c), comm_id (v/c), ct_score (e/n), ngenes_gs1 (e/n), #> | ngenes_gs2 (e/n), nlink (e/n), p_value_link (e/n), FDR_link (e/n), #> | p_adj_BH (e/n), weight_gs1 (e/n), weight_gs2 (e/n), genes_gs1 (e/c), #> | genes_gs2 (e/c) #> + edges from cb0e5ae (vertex names): #> [1] HALLMARK_ALLOGRAFT_REJECTION--HALLMARK_ANDROGEN_RESPONSE #> [2] HALLMARK_ALLOGRAFT_REJECTION--HALLMARK_APICAL_JUNCTION   #> [3] HALLMARK_ALLOGRAFT_REJECTION--HALLMARK_APICAL_SURFACE    #> [4] HALLMARK_ALLOGRAFT_REJECTION--HALLMARK_APOPTOSIS         #> [5] HALLMARK_ALLOGRAFT_REJECTION--HALLMARK_COMPLEMENT        #> + ... omitted several edges ct_heatmap(ct = pct_f,             color_by = \"ct_score\",             color = c(\"lightyellow\", \"red3\"),             no_ct_color = \"whitesmoke\",             rect_gp = gpar(col = \"white\"),             cluster_rows = FALSE,             cluster_columns = FALSE,            row_names_gp = gpar(fontsize = 7), column_names_gp = gpar(fontsize = 7))"},{"path":"/articles/Ulisse_bulk.html","id":"gene-functional-relevance","dir":"Articles","previous_headings":"","what":"Gene functional relevance","title":"Ulisse workflow 1: Pathway Cross-Talk analysis of bulk data","text":"significant cross-talk results can used gene functional relevance analysis via gene_functional_relevance() function. analysis cross-talk data used study roles genes cross-talks. returns: functional diversity, number different pathways gene involved cross-talk; interactors diversity, number interactors, genes gene interacts significant cross-talk; functional relevance, log2(functional diversity/interactor diversity). Functional relevance analysis results can visualized plot_functional_relevance() function, takes input result table gene_functional_relevance(). , file_name argument set NULL function return ggplot2 object instead saving . plot_names can used turn /plotting gene names (logical) provide vector new labels vertices, insted name. named vector assure correspondence vertices names new labels can used change vertices names , demonstrated , plot vertices interest, like one top/least functional interactor values functional relevance scores.  implemented two ways perform functional relevance analysis: method = \"count\" used obtain results shown , list numbers pathways interactors; method = \"relative\" used calculate normalized functional relevance using general model. case, provide function cross-talk results obtained general model built using pathway data. code run cross-talk analysis whole Hallmark database. set weight argument NULL avoid using weights, none. case cross-talk equal number links. Now can calculate normalized functional relevance can see, relative functional relevance returns also “count” values, well functional interactor diversity calculated general model used normalization. Now can use plot_functional_relevance() function plot relative functional relevance results.  can see plotting function call, method argument used define data want plot (“count” “relative”, functional relevance calculation). implies using functional relevance results obtained method “relative”, thus returns relative count results, possible plot results without re-running calculation.","code":"funct_rel <- gene_functional_relevance(ct = pct_f, adj = adj.m, method = \"count\") funct_rel[1:10,] names <- c(funct_rel$gene[order(funct_rel$functional_diversity)][c(1:3, 38:40)],            funct_rel$gene[order(funct_rel$interactor_diversity)][c(1:3, 38:40)],            funct_rel$gene[order(funct_rel$functional_relevance)][c(1:3, 38:40)])  names <- unique(names) funct_rel_names <- funct_rel$gene funct_rel_names[!funct_rel_names %in% names] <- \"\"  plot_functional_relevance(fr = funct_rel,                            method = \"count\",                            plot_names = funct_rel_names,                           pal = NULL) h.ptw <- preparing_msigdb_list(species = \"Homo sapiens\",                                 category = \"H\",                                type = \"gene_symbol\", min_size = 1, max_size = 500,                                 gene = V(PPI.g)$name,                                weights = NULL)   null.pct <- gs_cross_talk(gs_list = h.ptw,                            gene_network_adj = adj.m,                            shared = F, hash = T,                            ct_info = F,                            mc_cores_ct = 1, mc_cores_perm = 1, k = 9) funct_rel_norm <- gene_functional_relevance(ct = pct_f,                                              adj = adj.m,                                              method = \"relative\",                                              ct_null = null.pct)  funct_rel_norm[1:10, ] names <- c(funct_rel_norm$gene[order(funct_rel_norm$functional_diversity)][c(1:3, 38:40)],            funct_rel_norm$gene[order(funct_rel_norm$interactor_diversity)][c(1:3, 38:40)],            funct_rel_norm$gene[order(funct_rel_norm$functional_relevance)][c(1:3, 38:40)]) names <- unique(names) funct_rel_names <- funct_rel_norm$gene funct_rel_names[!funct_rel_names %in% names] <- \"\"  plot_functional_relevance(fr = funct_rel_norm,                            method = \"relative\",                            plot_names = funct_rel_names, pal = NULL)"},{"path":"/articles/Ulisse_bulk.html","id":"sub-gene-set-cross-talk","dir":"Articles","previous_headings":"","what":"Sub-gene-set cross-talk","title":"Ulisse workflow 1: Pathway Cross-Talk analysis of bulk data","text":"Gene interacts inside gene-sets groups connected components (CC). connected components correspond genes similar biological function. may important study CC gene-sets interest. gene_set_cc() assigns score CC gene-sets. Similarly gs_cross_talk, mc_cores_cc control parallelization calculation CC score. function returns list two elements: first details CC present pathway second table result sub-pathway analysis","code":"pct_CC <- gene_set_cc(gs_list = ptw,                        gene_network_adj = adj.m,                        mc_cores_cc = 2) pct_CC$membership[1:3] #> [[1]] #>  AKT1 BRCA1  FLNA  #>     1     1     1  #>  #> [[2]] #> CDH1 FBN1 MYH9  NF1 PTEN  #>    1    2    3    1    1  #>  #> [[3]] #> BRCA1 ERBB2  #>     1     1 pct_CC$pathway_cc[1:10,]"},{"path":"/articles/Ulisse_bulk.html","id":"tm-ct","dir":"Articles","previous_headings":"","what":"TM-CT","title":"Ulisse workflow 1: Pathway Cross-Talk analysis of bulk data","text":"Network can studied identify communities, groups vertices connected rest network. said communities correspond genes similar biological function. aligning biological network target genes can obtain gene network, can studied identify communities. genes different communities can grouped gene-sets, represent part pathways similar biological function. decided develop TM_CT() able study gene-sets build gene communities interact communities. First, need subset biological network identify gene communities. can use find_communites() function compare different algorithms Considering output find_communities, best algorithm choose one highest modularity lowest number communities. choose use multi-level modularity optimization algorithm.  Now inputs needed TM-CT. , mc_cores_ct mc_cores_tm controls parallelization calculation TM-PCT score pathway pairs combinations communities, respectively. TM_CT() function returns list two object, first pathway list community, second table results TM-CT calculation TM-PCT results can visualized network heatmap using Ulisse functions. need slightly adapt TM-PCT output use graphical CT functions. code modify gs names compatible plot_network_CT() ct_heatmap(). code also create vertex object plot vertex names involved highest score TM-CT  , use TM-CT results create heatmap annotations highlight communities pathways belongs .","code":"sub.PPI <- induced.subgraph(PPI.g, vids = target_gene_weights$gene[target_gene_weights$gene %in% V(PPI.g)$name]) sub.PPI <- induced.subgraph(sub.PPI, V(sub.PPI)$name[-which(igraph::degree(sub.PPI) ==0)]) comm_det <- find_communities(sub.PPI)  comm_det$info #>    algorithm modularity  n #> 1 fastgreedy  0.6529376 12 #> 2    labprop  0.6177907 17 #> 3   walktrap  0.6468313 18 #> 4      eigen  0.6170664 14 #> 5   multilev  0.6687360 11 #> 6    infomap  0.6531292 18 comm <- comm_det$comm$multilev comm_m <- membership(comm) sub.PPI <- set_vertex_attr(sub.PPI, \"comm_id\", value =  as.character(comm_m[match(names(V(sub.PPI)), names(comm_m))]))  pal = pals::alphabet2(max(comm_m)) names(pal) <- 1:max(comm_m)  ggraph(sub.PPI) +         theme_graph()  +         geom_edge_link(color = \"grey45\") +         geom_node_point(aes(color = comm_id), size = 3) +         scale_color_manual(limits = names(pal), values = pal) tm_pct <- TM_CT(gs_list = ptw,                   gene_network_adj = adj.m,                  membership = comm_m,                  mc_cores_ct = 1,                   mc_cores_tm = 1)   tm_pct[[\"comm_pathway_list\"]][[\"1\"]][1:3] #> $HALLMARK_ALLOGRAFT_REJECTION #>      BRCA1  #> 0.02532928  #>  #> $HALLMARK_APICAL_JUNCTION #>       MYH9        NF1  #> 0.03444782 0.04457953  #>  #> $HALLMARK_APICAL_SURFACE #>      BRCA1      PKHD1  #> 0.02532928 0.03343465 tm_pct$TM_CT_res[1:10,] tm_pct_mod <- tm_pct$TM_CT_res tm_pct_mod$gs1 <- paste(tm_pct_mod$commID_1, tm_pct_mod$gs1, sep = \"_\") tm_pct_mod$gs2 <- paste(tm_pct_mod$commID_2, tm_pct_mod$gs2, sep = \"_\") tm_pct_mod <- tm_pct_mod[, -c(1,3)] tm_ptw <- unique(data.frame(Map(c, tm_pct_mod[, 1:2], tm_pct_mod[, 3:4]))) tm_ptw <- setNames(as.character(tm_ptw$commID_1), tm_ptw$gs1)  tm_n <- setNames(names(tm_ptw), names(tm_ptw)) target_tm_pct <- tm_pct_mod[order(tm_pct_mod$ct_score, decreasing = T),] target_tm_pct <- as.vector(unlist(tm_pct_mod[1:5, 1:2])) tm_n[!tm_n %in% target_tm_pct] <- \"\"  plot_network_CT(ct = tm_pct_mod, filtering = FALSE,                  vertex = list(\"gene_comm\", tm_ptw),                  community = NULL, edge_col_by = \"ct_score\",                  vertex_label = tm_n,                 file_out = \"tm_pct_net.jpeg\") tm_pct.adj <- as_adjacency_matrix(tm_pct_net, attr = \"pct\", sparse = F) tm_pct.adj <- tm_pct.adj[order(rownames(tm_pct.adj)), order(rownames(tm_pct.adj))]  tm_pct.comm <- unlist(lapply(strsplit(rownames(tm_pct.adj), \"_\", fixed = T), \"[[\", 1)) names(tm_pct.comm) <- rownames(tm_pct.adj) tm_ptw_df <- data.frame(tm_ptw = tm_ptw, stringsAsFactors = F) rownames(tm_ptw_df) <- names(tm_ptw) ct_heatmap(ct = tm_pct_mod,             color_by = \"ct_score\",             community = NULL, row_annotation = tm_ptw_df,             column_annotation = tm_ptw_df,             color = c(\"lightyellow\", \"red\"), no_ct_color = \"whitesmoke\",             filtering = F, label_size = 5, col_name_side = \"right\",            width = unit(12, \"cm\"), height = unit(12, \"cm\"))"},{"path":[]},{"path":"/articles/Ulisse_sc.html","id":"preparation-of-the-inputs","dir":"Articles","previous_headings":"","what":"Preparation of the inputs","title":"Ulisse workflow 2: Cell-cell cross-talk analysis on single cell data","text":"example, use breast cancer single cell sample Omnipath communication network. apply workflow cell-type data, can also applied clusters. communication network, resources available cam used. take care Ulisse need undirected biological network considers sub-units.","code":""},{"path":"/articles/Ulisse_sc.html","id":"ligand-receptor-network","dir":"Articles","previous_headings":"Preparation of the inputs","what":"Ligand-receptor network","title":"Ulisse workflow 2: Cell-cell cross-talk analysis on single cell data","text":"obtain biological network use Omnipath (Türei et al. 2021), database composed various resources. Ligand-Receptor (LR) interactions download intercellular network Omnipath using ligand transmitter param receptor receiver, used build needed biological network.","code":"intercell_net <- import_intercell_network(interactions_param = list(\"datasets\" = \"omnipath\"),                                           transmitter_param = list(                                             categories = c('ligand')),                                           receiver_param = list(                                             categories =c('receptor')),                                            entity_types = \"protein\") g.intercell <- unique(intercell_net[,c(\"source_genesymbol\", \"target_genesymbol\")]) g.intercell <- graph_from_edgelist(as.matrix(g.intercell),                                     directed = F)"},{"path":"/articles/Ulisse_sc.html","id":"pre-processing-with-seurat-pipeline","dir":"Articles","previous_headings":"Preparation of the inputs","what":"Pre-processing with Seurat pipeline","title":"Ulisse workflow 2: Cell-cell cross-talk analysis on single cell data","text":"explain functioning CCC calculation implemented Ulisse use one samples sequenced Wu et al. (Wu et al. 2021). study, authors analyse 26 single cell breast cancer samples. samples contain tumoral well normal cells surrounding tumor composing microenvironment. data can downloaded https://singlecell.broadinstitute.org/single_cell/study/SCP1039 GEO website accession GSE176078. particular, study CCC sample CID4515, pipeline can applied sample study. code can used read 10x data pre-process obtain dimensionality reduction Seurat package (Hao et al. 2021). study cell-cell communication among cell-types provided authors, pipeline can applied also clusters. use matrix, barcodes, genes data together metadata, provides cell annotation. metadata.csv table obtained link cell-types. uploading , can use information plot UMAP cell type.  Ulisse provides two methods study CCC, one uses expression data uses Differentially Expressed Genes (DEG) data. exemplify usage approaches, compare obtained results. important note can choose perform analyses clusters cell types groups cells. Thus, vignette consider synonyms.","code":"data <- ReadMtx(mtx = \"CID4515/count_matrix_sparse.mtx\",                  cells = \"CID4515/count_matrix_barcodes.tsv\",                 features = \"CID4515/count_matrix_genes.tsv\" ) data <- data[which(rowSums(sign(data)) >= 5),] data <- CreateSeuratObject(counts = data, min.cells = 0, min.features = 0) data <- NormalizeData(data) data <- ScaleData(data) data <- RunPCA(data) data <- RunUMAP(data, dims = 1:10) meta <- read.csv(\"CID44991/metadata.csv\", sep = \",\", stringsAsFactors = F) meta[1:5,] data@meta.data <- cbind(data@meta.data, meta[match(rownames(data@meta.data), meta$X),]) data$celltype_major <- factor(data$celltype_major, levels = unique(data$celltype_major))  pal_ct <- viridis::turbo(9) names(pal_ct) <- sort(unique(data$celltype_major))  DimPlot(data, reduction = \"umap\", group.by = \"celltype_major\", label = T,  cols = pal_ct)"},{"path":[]},{"path":"/articles/Ulisse_sc.html","id":"ranked-gene-list","dir":"Articles","previous_headings":"Expression CCC","what":"Ranked gene list","title":"Ulisse workflow 2: Cell-cell cross-talk analysis on single cell data","text":"CCC analysis need ranked gene list cell type obtained normalized count matrix. preparing_cl_list() takes inputs: normalized gene counts matrix (mtx); cell type affiliation cell count matrix (clusters); gene interest (universe); two threshold (mean_t cell_t) filter data remove noise. function uses mean_t identify expressed genes normalized expression matrix: gene cell value equal higher threshold set 1, 0 otherwise. Subsequently function uses binarized expression matrix calculate gene cell type frequency expressed least cell_t cells. genes universe considered, genes present LR network. suggest identifying mean_t considering mean expression gene calculated non-zero values. Instead, cell_t can set considering filtering used remove low expressed genes beginning Seurat pipeline. code can used assess expression threshold.  Considering summary mean_g histogram , decide use 0.65 mean_t (red line histogram). decided value lays past high frequency values distribution thus allows filter low common values, maintaining high ones. cell threshold use threshold used pre-processing.","code":"mean_norm <- data@assays$RNA@data mean_norm[which(mean_norm == 0)] <- NA mean_g <- rowMeans(mean_norm, na.rm = T)  summary(mean_g) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>  0.1906  0.5091  0.6242  0.7346  0.8295  5.4092 hist(mean_g, breaks = 100) abline(v=0.65, col = \"red\") universe <- V(g.intercell)$name ct_list <- preparing_expr_list(mtx = data@assays$RNA@data,                                 clusters = data$celltype_major,                                 mean_t = 0.65,                                 cell_t = 5,                                universe = universe) head(ct_list[[1]]) #>   TNFRSF4  TNFRSF14      ENO1    AGTRAP  TNFRSF1B     EPHA2  #> 0.2377049 0.2049180 0.7704918 0.1885246 0.2459016 0.1147541"},{"path":"/articles/Ulisse_sc.html","id":"communication-analysis","dir":"Articles","previous_headings":"Expression CCC","what":"Communication analysis","title":"Ulisse workflow 2: Cell-cell cross-talk analysis on single cell data","text":"required inputs now ready analyse CCC gs_cross_talk() function. function requires also additional parameter: k corresponds number permutation needed , together original matrix, used calculation p-value FDR. case use 49 permutation , together real one, correspond total 50 permuted list cell type pair, thus minimal p-value can observed 1/50 0.02; shared set TRUE enable possible overlapping gene-lists cell-type pair. Different cells may express genes, moreover considering clusters, may represents different states cell-type. shared genes may represents intra-cellular communication, bot cells cell-pair express genes, impossible discern autocrine paracrine communication. Thus, important consider also CCC; hash: logical, used speed-calculation lots gene-sets used. low cell-type numbers, suggest set FALSE; ct_info: logical, detail gene-gene interaction gene-set returned. might highly important cell-cell cross-talk, set TRUE. enabling parameter, output function two-element list, fist (ct_info) table gene communications two cell types; second (ct_res) table CCC results. Note cumulative score cell type pair equal sum gene pair scores ct _info. mc_cores_perm mc_cores_ct control parallelization function CCC calculation permutation, respectively. aware mc_cores_perm multiplies mc_cores_ct. Parallelization useful reduce computational time calculation improves amount memory needed.","code":"LR.adj <- as_adjacency_matrix(g.intercell, sparse = F)  expr_ccc <- gs_cross_talk(gs_list = cl_list,                           gene_network_adj = LR.adj,                           k = 49,                            shared = T,                            ct_info = T,                            hash = F,                           mc_cores_perm = 1, mc_cores_ct = 1)  expr_ccc$communications_info[1:5,] expr_ccc$cc_communications[1:5,]"},{"path":"/articles/Ulisse_sc.html","id":"ccc-visualization","dir":"Articles","previous_headings":"Expression CCC","what":"CCC visualization","title":"Ulisse workflow 2: Cell-cell cross-talk analysis on single cell data","text":"CCC results can filtered maintain significant ones. results can visualized network (plot_network_CT()) heatmap (ct_heatmap()) using Ulisse package functions. code can used plot results network. filtering argument used control CCC visualized network. set TRUE, p_val, FDR ct_val used identify significant communications plot solid line, whereas others plotted dashed line. , enabled visualization, providingp-value FDR filtering. ct_val = NULL allows consider CCC without filtering value. community can logical (community calculated using igraph::fastgreedy.community()), community object calculated igraph package. vertex used color vertices, can set “name” color according name cell-type. edge_col_by edge_width parameters control value used color edges width proportional value. edge_adj_col used control transparency edges: pathway cross-talk can lots links can e useful control transparency. plot_network_CT() function returns igraph cross-talk network communities “comm_id” vertex attribute (calculated). plot_network_CT() function uses ggraph package functions, ggplot2-based. file_out set NULL function returns also ggplot2 network object.  ct_heatmap() function can used plot CCC heatmap selecting variable used color heatmap (color_by, used cross-talk score), color scale (color = c(\"lightyellow\", \"red3\")), color used zeros, cells heatmap corresponding cell types pairs shows significant communications (no_ct_color). different colors minimum zero help heatmap readability. Similarly plot_network_CT(), ct_heatmap() function allows select significant interactions, represented star. achieved enabling filtering = TRUE, require p-value, FDR cross-talk score thresholds.","code":"expr_ccc_net <- plot_network_CT(ct = expr_ccc$ct_res,                                  filtering = T, p_val = 0.05, FDR = 0.2, ct_val = NULL,                                  community = F,                                  vertex = \"name\", vertex_size = 5, vertex_label = TRUE, vertex_pal = pal_ct,                                 edge_col_by = \"ct_score\", edge_pal=NULL,                                  edge_width = T, edge_adj_col = 0.7)  expr_ccc_net #> IGRAPH be33f36 UN-- 9 36 --  #> + attr: name (v/c), label (v/c), ct_score (e/n), ngenes_gs1 (e/n), #> | ngenes_gs2 (e/n), nlink (e/n), p_value_link (e/n), FDR_link (e/n), #> | p_adj_BH (e/n), weight_gs1 (e/n), weight_gs2 (e/n), genes_gs1 (e/c), #> | genes_gs2 (e/c), filt (e/c) #> + edges from be33f36 (vertex names): #>  [1] Endothelial--CAFs              Endothelial--PVL               #>  [3] Endothelial--B-cells           Endothelial--Plasmablasts      #>  [5] Endothelial--T-cells           Endothelial--Myeloid           #>  [7] Endothelial--Cancer Epithelial Endothelial--Normal Epithelial #>  [9] CAFs       --PVL               CAFs       --B-cells           #> + ... omitted several edges ct_heatmap(ct = clCC$ct_res,             color_by = \"ct_score\", color = c(\"lightyellow\", \"red3\"), no_ct_color = \"whitesmoke\",             filtering = TRUE, p_val = 0.05, FDR = 0.2, ct_val = NULL)"},{"path":"/articles/Ulisse_sc.html","id":"deg-ccc","dir":"Articles","previous_headings":"","what":"DEG CCC","title":"Ulisse workflow 2: Cell-cell cross-talk analysis on single cell data","text":"now analyse cell-cell cross-talk using DEGs First , need obtain DEG data.","code":""},{"path":"/articles/Ulisse_sc.html","id":"deg-analysis","dir":"Articles","previous_headings":"DEG CCC","what":"DEG analysis","title":"Ulisse workflow 2: Cell-cell cross-talk analysis on single cell data","text":"use Seurat function Differential Expression Analysis default parameters calculate DEG cell type others. , use Benjamini-Hochberg method obtain adjusted p-value used filter DEGs maintain significant ones. select -regulated genes. important package algorithm used DEG calculation, Ulisse function structured handle input type. DEGs data can now used build cell-type lists using preparing_DEG_list() function. function take input table results DEG calculation, specific columns (genes, log2 Fold Change, p-value cluster), important package algorithm used differential analysis. preparing_DEG_list() uses inputs calculate gene clusters associated weights, product log2FC -log10 p_val. , function builds vector cluster, one composed weights, named respective genes. , vectors filtered maintain gene present universe returned list","code":"Idents(data) <- data$celltype_major  DEGs_data <- FindAllMarkers(data, assay = \"RNA\") #this may take a while DEGs_data$p_val_BH <- p.adjust(DEGs_data$p_val, method = \"BH\")  DEGs_data[1:5,] DEGs_data <- DEGs_data[DEGs_data$p_val_BH <= 0.05 & DEGs_data$avg_log2FC >= 0.5,]   DEG_list <- preparing_DEG_list(cluster = DEGs_data$cluster,                                 p_val = DEGs_data$p_val_BH,                                 log2FC = DEGs_data$avg_log2FC,                                 gene = DEGs_data$gene,                                 universe = rownames(adj.m))  head(DEG_list[[1]]) #>     ACKR1       VWF     RAMP2     RAMP3   CLEC14A    ADGRL4  #> 1397.4371 1068.3300  919.2382  839.4853  801.0583  800.9338"},{"path":"/articles/Ulisse_sc.html","id":"communication-analysis-1","dir":"Articles","previous_headings":"DEG CCC","what":"Communication Analysis","title":"Ulisse workflow 2: Cell-cell cross-talk analysis on single cell data","text":"subsequent part analysis identical one used expression data: gs_cross_talk() used analyse CCC inputs parameters. calculation results two-object list detail gene-gene interaction cross talk results.","code":"DEG_ccc <- gs_cross_talk(gs_list = DEG_list,                          gene_network_adj = adj.m,                          k = 49, shared = T,                           ct_info = T, hash = F,                          mc_cores_perm = 1, mc_cores_ct = 1)  DEG_ccc$ct_info[1:5,] DEG_ccc$ct_res[1:5,]"},{"path":"/articles/Ulisse_sc.html","id":"ccc-network","dir":"Articles","previous_headings":"DEG CCC","what":"CCC network","title":"Ulisse workflow 2: Cell-cell cross-talk analysis on single cell data","text":"done , can build CCC network filtering results using Ulisse function plot network  heatmap","code":"DEG_CCC_net <- plot_network_CT(ct = DEGcl_ct$ct_res,                                 filtering = T, p_val = 0.05, FDR = 0.2, ct_val = NULL,                                  community = F,                                 vertex = \"name\", vertex_size = 5, vertex_label = TRUE, vertex_pal = pal_ct,                                edge_col_by = \"ct_score\", edge_pal=NULL,                                 edge_width = T, edge_adj_col = 0.7)  DEG_CCC_net #> IGRAPH 22bb420 UN-- 9 34 --  #> + attr: name (v/c), label (v/c), ct_score (e/n), ngenes_gs1 (e/n), #> | ngenes_gs2 (e/n), nlink (e/n), p_value_link (e/n), FDR_link (e/n), #> | p_adj_BH (e/n), weight_gs1 (e/n), weight_gs2 (e/n), genes_gs1 (e/c), #> | genes_gs2 (e/c), filt (e/c) #> + edges from 22bb420 (vertex names): #>  [1] Endothelial--CAFs              Endothelial--PVL               #>  [3] Endothelial--B-cells           Endothelial--Plasmablasts      #>  [5] Endothelial--T-cells           Endothelial--Myeloid           #>  [7] Endothelial--Cancer Epithelial Endothelial--Normal Epithelial #>  [9] CAFs       --PVL               CAFs       --B-cells           #> + ... omitted several edges DEG_ccc_f <- DEG_ccc$ct_res[DEG_ccc$ct_res$p_value_link <= 0.05 & DEG_ccc$ct_res$FDR_link <= 0.2,]  ct_heatmap(ct = DEGcl_ct$ct_res,             color_by = \"ct_score\", color = c(\"lightyellow\", \"red3\"), no_ct_color = \"whitesmoke\",             filtering = T, p_val = 0.05, FDR = 0.2, ct_val = NULL,             width = unit(12, \"cm\"), height = unit(12, \"cm\"))"},{"path":"/articles/Ulisse_sc.html","id":"comparison-between-expression-and-deg-ccc-results","dir":"Articles","previous_headings":"","what":"Comparison between expression and DEG CCC results","title":"Ulisse workflow 2: Cell-cell cross-talk analysis on single cell data","text":"Ulisse provides function build visualize union network multiple analyses samples. comparing_results_network() function takes input list results obtained gs_cross_talk(). order use function, correspondence gene-sets, thus share least cell-types cluster names correspond cell-type states. compare significant results obtained expression DEG CCC analyses sample, thus cell-types corresponds. comparing_results_network() needs input named list cross-talk results already filtered maintain significant CCC, needed. function create union network vertices cell types present results res_list, links communication present results. vertices can colored considering number results present (vertex_number = TRUE) /discrete variable (case vertex = \"name\", otherwise two list, first element name variable, second named vector , see function help detail). parameters enabled, case, vertex one used color voronoi tesselation (see ggrpah package detail). vertex_number = TRUE, color palette can provided, composed minimum maximum value colors, function use default “blue” “red”. Edges can colored number results share (edge_color_by = \"number\") , case, results contain (edge_color_by = \"\"). Edges width can proportional number results present (edge_width = TRUE). comparing_results_network() return union network plot id file_out argument provided.","code":"res_list <- list(expr = expr_ccc$cc_communications,                  DEG = DEG_ccc$cc_communications) res_list <- lapply(res_list, function(x) x <- x[x$p_value_link <= 0.05 & x$FDR_link <= 0.2,])  comp.out <- comparing_results_network(res_list = res_list,                                        vertex_number = TRUE,                                        vertex = \"name\", vertex_pal = pal_ct,                                       voronoi_radius = 0.3, voronoi_alpha = 0.3,                                        edge_width = TRUE, edge_color_by = \"which\",                                       edge_adj_col = 0.5, vertex_number_adj = 0.8)  comp.out"},{"path":[]},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Alice Chiodi. Author. Ettore Mosca. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Chiodi , Mosca E (2023). Ulisse: Pathway, pathway cross-talk cell-cell communication. R package version 1.2.5.","code":"@Manual{,   title = {Ulisse: Pathway, pathway cross-talk and cell-cell communication},   author = {Alice Chiodi and Ettore Mosca},   year = {2023},   note = {R package version 1.2.5}, }"},{"path":"/index.html","id":"ulisse---an-r-package-to-go-beyond-the-boundaries-of-gene-sets","dir":"","previous_headings":"","what":"Pathway, pathway cross-talk and cell-cell communication ","title":"Pathway, pathway cross-talk and cell-cell communication ","text":"Omics assay results long gene lists whose biological interpretation major challenge. Pathway enrichment analysis used test whether pathway richer genes gene list expected chance. However, clear boundaries pathways, gene products interact within pathways, phenomenon called cross-talks. Cross-talks pathways relevant dissect regulatory mechanisms, identify effective drug combinations investigate complex disease phenotypes. molecular interactions go beyond cell boundaries, cross-talks (communication) different cell-types can studied thanks single-cell RNA sequencing technologies. Ulisse provide tools perform: ORA (Representation Analysis) GSEA (Gene set enrichment analysis) Enrichment map help interpretation ORA GSEA results Gene-set cross-talk Gene-set connected components Gene-Set Topological-Module cross-talk Functional relevance analysis reconstruct gene role Gene-set cross-talk analysis terms number interactor genes processes/cell types involved Typical application Ulisse include: Pathway enrichment analysis omics data obtained bulk single-cell samples Pathway cross-talk analysis omics data obtained bulk single-cell samples Communication analysis clusters cell-type single-cell samples Source code: https://github.com/emosca-cnr/Ulisse Contacts: Ettore Mosca, Bioinformatics Lab, CNR-ITB","code":""},{"path":"/reference/TM_CT.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to calculate cross-talks between pathways of different gene communities — TM_CT","title":"Function to calculate cross-talks between pathways of different gene communities — TM_CT","text":"Calculates cross-talks pathways composed gene different gene communities","code":""},{"path":"/reference/TM_CT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to calculate cross-talks between pathways of different gene communities — TM_CT","text":"","code":"TM_CT(   gs_list,   gene_network_adj,   membership,   genes,   weight,   mc_cores_ct = 2,   mc_cores_tm = 2 )"},{"path":"/reference/TM_CT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to calculate cross-talks between pathways of different gene communities — TM_CT","text":"gs_list named list genes grouped pathways gene_network_adj gene network adjacency matrix membership named vector membership `genes` topological communities. set `NULL` function calculates communities using fastgreedy algorithm genes vector genes interest used TM-PCT calculation weight weights genes `genes`. provided, function assigns gene weight 1 mc_cores_ct number threads used calculate cross talk mc_cores_tm number threads used calcualte TM-PCT different communities combination","code":""},{"path":"/reference/TM_CT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to calculate cross-talks between pathways of different gene communities — TM_CT","text":"function returns list two object: comm_pathway_list: communities pathway lists used TM-PCT calculation. list named name   gene community TM_PCT_res: data frame commID_1, commID_2: community belongs genes `pathway_1` `pathway_2`, respectively pathway_1, pahtway_2: pathway pair considered score: TM-PCT score ngenes_pathway_1, ngenes_pathway_2: number genes involved `pathway_1` `pathway_2`, respectively n_link: number links pathways considered weight_pathway1, weight_pathway2: cumulative weights genes involved CT  `pathway_1` `pathway_2` gene_pathway1, gene_pathway2: gene involved CT `pathway_1` `pathway_2`, respectively membership = NULL, also membership returned","code":""},{"path":"/reference/TM_CT.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function to calculate cross-talks between pathways of different gene communities — TM_CT","text":"function uses `membership` data re-organize `pathway_list` obtain list  pathway list gene community. genes grouped communities grouped pathways. point, function calculates CT pathway pairs different  communities shows least link.","code":""},{"path":"/reference/TM_CT.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to calculate cross-talks between pathways of different gene communities — TM_CT","text":"","code":"if (FALSE) {  ptw_list <- list(ptwA = c(\"A\", \"B\",\"C\"), ptwB = c(\"D\", \"E\", \"F\"), ptwC = c(\"A\", \"B\", \"E\"))  adj <- matrix(data = sample(c(0,1), 6*6, replace = TRUE), nrow = 6,   ncol = 6, dimnames = list(LETTERS[1:6], LETTERS[1:6]))  wgt <- rep(1, 6)  memb <- c(1, 1, 2, 2, 3, 3)  pct <- TM_PCT(pathway_list = ptw_list, gene_network_adj = adj, weight = wgt, membership = memb,                  mc_cores_tm = 1, mc_cores_ct = 1) }"},{"path":"/reference/calc_gs_perm.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function of pathtools — calc_gs_perm","title":"Internal function of pathtools — calc_gs_perm","text":"Internal function pathtools","code":""},{"path":"/reference/calc_gs_perm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function of pathtools — calc_gs_perm","text":"","code":"calc_gs_perm(rll, perm, gs)"},{"path":"/reference/calc_gs_perm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function of pathtools — calc_gs_perm","text":"rll numeric matrix genes--ranking criteria;  column contains numeric values; rownames mandatory perm vector permuted names gs gene set","code":""},{"path":"/reference/calc_p.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimation of p values — calc_p","title":"Estimation of p values — calc_p","text":"function used calculate p-value list matrices","code":""},{"path":"/reference/calc_p.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimation of p values — calc_p","text":"","code":"calc_p(X)"},{"path":"/reference/calc_p.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimation of p values — calc_p","text":"X list matrices, first one obtained real data others obtained permutations.  matrices 1 column matrices order.","code":""},{"path":"/reference/calc_p.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimation of p values — calc_p","text":"functions calculate p-value permutation-based approach. takes input list matrices, first one real data data obtained permutations. , function searches many values permutations equal higher real. values divided number matrices (1 + number permutations)","code":""},{"path":"/reference/calc_set_similarity.html","id":null,"dir":"Reference","previous_headings":"","what":"The function calculates similarities between two sets. — calc_set_similarity","title":"The function calculates similarities between two sets. — calc_set_similarity","text":"function takes input two vertices calculates similarity using three different methods: Jaccard = number common elements x y, divided number unique elements present c(x, y) Overlap = number common elements x y. divided minimum length unique elements present either x y Average = mean Jaccard Overlap measure","code":""},{"path":"/reference/calc_set_similarity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The function calculates similarities between two sets. — calc_set_similarity","text":"","code":"calc_set_similarity(x, y, method = c(\"jaccard\", \"overlap\", \"average\"))"},{"path":"/reference/calc_set_similarity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The function calculates similarities between two sets. — calc_set_similarity","text":"x, y two sets provided vectors method one among \"jaccard\", \"overlap\" \"average\"","code":""},{"path":"/reference/calc_set_similarity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The function calculates similarities between two sets. — calc_set_similarity","text":"similarity","code":""},{"path":"/reference/calc_set_similarity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The function calculates similarities between two sets. — calc_set_similarity","text":"`calc_set_similarity` calculates similarities two sets using `jaccard`, `overlap`, `average` methods.","code":""},{"path":"/reference/comparing_results_network.html","id":null,"dir":"Reference","previous_headings":"","what":"Visual representation of multiple cross-talk analyses. — comparing_results_network","title":"Visual representation of multiple cross-talk analyses. — comparing_results_network","text":"function used merge results obtained multiple cross-talk analyses creating union network highlighting shared edges vertices","code":""},{"path":"/reference/comparing_results_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visual representation of multiple cross-talk analyses. — comparing_results_network","text":"","code":"comparing_results_network(   res_list,   vertex_number = F,   vertex_number_pal = NULL,   vertex_number_adj = 0.7,   vertex_size = 5,   vertex = NULL,   vertex_pal = NULL,   voronoi_radius = 0.8,   voronoi_alpha = 0.3,   vertex_label = TRUE,   edge_color_by = \"number\",   edge_width = TRUE,   edge_pal = NULL,   edge_adj_col = 0.7,   file_out,   width = 200,   height = 200,   res = 300,   units = \"mm\",   ... )"},{"path":"/reference/comparing_results_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visual representation of multiple cross-talk analyses. — comparing_results_network","text":"res_list list resulting data.frame `gs_cross_talk()` vertex_number logical, vertices colored number results present vertex_number_pal vector two colors used gradient coloring vertices `vertex_number = TRUE`.  `NULL` gradient build \"red\" \"blue\". vertex_number_adj value used set transparency vertex colors `vertex_number_pal` vertex_size size vertices vertex can either `name` value color vertices according name, list two vector, first  name attribute second named vector attribute per vertices  used color (discrete value), `NULL` vertices colored (thus \"grey65\" passed default color).  `vertex_number = TRUE`, `vertex` represented cells voronoi tessellation (see `ggraph::geom_node_voronoi()`) vertex_pal named vector colors used unique `vertex` element. `NULL` pals::alphabet2() palette used voronoi_radius, voronoi_alpha parameters passed `geom_node_voronoi()`. `vertex` `vertex_number` arguments enabled,  first represented cells voronoi tessellation (see `ggraph::geom_node_voronoi()`). case, argument used control  radius cells transparency, respectively. vertex_label logical, vertex names plotted , named vector, label associated vertex named edge_color_by =c(\"number\",\"\") edges colored number results share edge (\"number\") results contain (\"\") edge_width logical, edge width proportional number results share edge. edge_pal palette used color edges according `edge_color_by`. `edge_color_by=\"number` palette two color used gradient coloring ; `NULL` \"red\" \"blue\" used. `edge_color_by=\"` palette (named) vector enought colors  results name combination edge_adj_col value used adjust color transparency edges file_out name used save plot jpeg format plot. `NULL` functions returns also plot object width, height, res, units graphical value `jpeg()` function ... graphical parameters passed `ggraph()` function","code":""},{"path":"/reference/comparing_results_network.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visual representation of multiple cross-talk analyses. — comparing_results_network","text":"`file_out` null function returns plot igraph object used plotting.   Otherwise, igraph object returned plot saved `file_out`","code":""},{"path":"/reference/comparing_results_network.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Visual representation of multiple cross-talk analyses. — comparing_results_network","text":"function takes input list data.frames resulting multiple `gs_cross_talk()` analyses produce union network plotted edges colored number results cross-talk","code":""},{"path":"/reference/cross_talk.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to caluclate cross-talk — cross_talk","title":"Function to caluclate cross-talk — cross_talk","text":"`cross_talk()` calculates cross-talk score provided matrix vector weights","code":""},{"path":"/reference/cross_talk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to caluclate cross-talk — cross_talk","text":"","code":"cross_talk(mat, weight)"},{"path":"/reference/cross_talk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to caluclate cross-talk — cross_talk","text":"mat matrix calculate cross-talk. subset adjacency matrix gene network, rows genes gene set, columns genes anoher one weight vector weights associated gene `mat`. weights shoud named genes","code":""},{"path":"/reference/cross_talk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to caluclate cross-talk — cross_talk","text":"function returns array : ct: cross-talk value ngenes_1, ngenes_2: number gene geneset 1 (rows) geneset 2 (columns) nlink: number link geneset 1 2 gene_1, gene_2: genes involved links geneset 1 2","code":""},{"path":"/reference/cross_talk.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function to caluclate cross-talk — cross_talk","text":"function calculates cross-talk values provided matrix list vectors weights (fist row, second column). weights named gene names","code":""},{"path":"/reference/ct_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to plot the heatmap of cross-talk results — ct_heatmap","title":"Function to plot the heatmap of cross-talk results — ct_heatmap","text":"function elaborates output `gs_cross-talk()`  function represent obtained cross-talks heatmap","code":""},{"path":"/reference/ct_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to plot the heatmap of cross-talk results — ct_heatmap","text":"","code":"ct_heatmap(   ct,   color_by = \"ct_score\",   color = NULL,   color_level = NULL,   no_ct_color = NULL,   filtering = FALSE,   p_val,   FDR,   ct_val,   legend_side = \"left\",   community = F,   pal_community = NULL,   label_size = 5,   row_annotation = NULL,   pal_row_annotation = NULL,   row_name_side = \"bottom\",   column_annotation = NULL,   pal_column_annotation = NULL,   col_name_side = \"left\",   file_out = NULL,   file_width = 200,   file_height = 200,   res = 300,   units = \"mm\",   ... )"},{"path":"/reference/ct_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to plot the heatmap of cross-talk results — ct_heatmap","text":"ct results obtained `gs_cross-talk()` functions color_by name column plotted heatmap color vector two colors used build gradient color heatmap, colors two number `color_level`. NULL, function uses `lightyellow` `red3` color_level vector two values used create gradient color heatmap. provided,  function uses minimum maximum no_ct_color color used gene set pairs shows cross-talk (heatmap score = 0). `NULL` function uses `whitesmoke` filtering logical, function plot edges significant ones. `TRUE`, function uses `p_val, FDR` `ct_val` identify  significant ones, plotted solid line, significant dashed line. `FALSE`, edges plotted solid line. p_val, FDR, ct_val filtering values. one set `NULL` function ignores legend_side place legend heatmap annotations (provided). See `Heatmap`  details community logical object resulting igraph community calculation. `TRUE`, function calculates communities using fastgreedy algorithm, `FALSE` function consider communities. Otherwise, community object provided, function uses colors vertices accordingly. communities plotted row column annotation heatmap pal_community vector colors used color community annotation. `NULL` function use  `rainbow()` palette label_size size gene-set names printed diagonal heatmaps row_annotation, column_annotation data.frame columns corresponding rows columns annotations. rownames must  named cells/gene-set `ct` tables. values columns treated  discrete variable pal_row_annotation, pal_column_annotation list vectors, one column `row_annotation,column_annotation` df.  vector color vector named cells/gene-set `ct` table. `NULL`, function uses `pals::alphabet2()` palette row_name_side, col_name_side name row/column annotation put \"bottom\" \"top\" (\"left\" \"right\")  annotation file_out name used save jpeg file. `NULL` complexHeatmap object returned file_width, file_height, res, units graphical value `jpeg()` function ... arguments passed `ComplexHeatmap::Heatmap()`","code":""},{"path":"/reference/ct_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to plot the heatmap of cross-talk results — ct_heatmap","text":"function produce plot saved name passed `file_out` also returns adjacency matrix  communities (calculated)","code":""},{"path":"/reference/ct_heatmap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function to plot the heatmap of cross-talk results — ct_heatmap","text":"functions uses `gs_cross-talk()` output build cross-talk network. ,  adjacency matrix network plotted without annotations rows columns. user may  also decide value plot heatmap","code":""},{"path":"/reference/eFDR.html","id":null,"dir":"Reference","previous_headings":"","what":"empirical False Discovery Rate — eFDR","title":"empirical False Discovery Rate — eFDR","text":"empirical False Discovery Rate","code":""},{"path":"/reference/eFDR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"empirical False Discovery Rate — eFDR","text":"","code":"eFDR(real_values, all_values, mc.cores = 1, correct.max = TRUE)"},{"path":"/reference/eFDR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"empirical False Discovery Rate — eFDR","text":"real_values vactor real (observed) values all_values vactor values (real + permuted) values mc.cores number cores correct.max logical, decide correct maximum values 1 ","code":""},{"path":"/reference/edge_weights.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for the assignment of edges weights in order to better visualize the communities — edge_weights","title":"Function for the assignment of edges weights in order to better visualize the communities — edge_weights","text":"Function assignment edges weights order better visualize communities","code":""},{"path":"/reference/edge_weights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for the assignment of edges weights in order to better visualize the communities — edge_weights","text":"","code":"edge_weights(community, network, weight.within = 100, weight.between = 1)"},{"path":"/reference/edge_weights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function for the assignment of edges weights in order to better visualize the communities — edge_weights","text":"community list mandatory field \"membership\" network pathway network weight.within value weight attraction two vertices community weight.value weight attraction two vertices two distinct communities","code":""},{"path":"/reference/edge_weights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function for the assignment of edges weights in order to better visualize the communities — edge_weights","text":"vector edge weights","code":""},{"path":"/reference/enrichment_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Enrichment map — enrichment_map","title":"Enrichment map — enrichment_map","text":"Enrichment map","code":""},{"path":"/reference/enrichment_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Enrichment map — enrichment_map","text":"","code":"enrichment_map(   x,   gs_list,   method = c(\"overlap\", \"jaccard\"),   coeff = NULL,   all_gs = TRUE,   weight.within = 4,   weight.between = 1,   file.prefix = \"en_map\",   comm_method = \"fastgreedy\",   vertex.label.cex = 1,   vertex.label.dist = 0.5,   vertex.label.degree = pi/2,   vertex.label.font = 2,   gs_list_size = NULL,   set_sim_df = NULL,   plot_flag = TRUE,   vertex.color = NULL,   img.width = 200,   img.height = 200,   img.res = 300,   min_comm_size = 2,   vertex.size.min = 2,   vertex.size.max = 5,   edge.wd.min = 1,   edge.wd.max = 4,   mark.groups = T,   vertex.shape = \"circle\",   vertex.pie = NULL,   vertex.color.pal = NULL,   n_width = 3,   n_size = 3,   L = NULL,   score.decreasing = TRUE,   n_name = 1,   legend.cex = 0.7,   ... )"},{"path":"/reference/enrichment_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Enrichment map — enrichment_map","text":"x named vector pathway scores gs_list gene set list method 'overlap' 'jaccard' coeff threshold similarity score two gene sets all_gs TRUE/FALSE weight.within value weight attraction two vertices community weight.value weight attraction two vertices two disntict communities comm_method one among 'auto', 'fastgreedy' 'multilev' vertex.label.cex vertex label size vertex.label.dist vertex label distance veritex vertex.label.degree vertex label orientation vertex.label.font vertex label font gs_list_size gene set list size set_sim_df optional data frame three columns 'set1', 'set2' 'sim' plot_flag TRUE/FALSE vertex.color vertex color img.width image width img.height image height img.res image resolution min_comm_size min community size vertex.size.min min vertex size vertex.size.max max vertex size edge.wd.min min edge widht edge.wd.max max edge width mark.groups TRUE/FALSE vertex.shape vertex shape vertex.pie vertex pie ... additional parameters plot.igraph file output file","code":""},{"path":"/reference/enrichment_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Enrichment map — enrichment_map","text":"list two data frames containing pathway network vertex similarity","code":""},{"path":"/reference/es.html","id":null,"dir":"Reference","previous_headings":"","what":"Enrichment Score — es","title":"Enrichment Score — es","text":"Enrichment Score","code":""},{"path":"/reference/es.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Enrichment Score — es","text":"","code":"es(idx, x, le = F)"},{"path":"/reference/es.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Enrichment Score — es","text":"idx vector indices subset elements x x named vector, ranked list le logical","code":""},{"path":"/reference/es.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Enrichment Score — es","text":"enrichment score","code":""},{"path":"/reference/filter_gsl.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter a gene set list — filter_gsl","title":"Filter a gene set list — filter_gsl","text":"Filter gene set list","code":""},{"path":"/reference/filter_gsl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter a gene set list — filter_gsl","text":"","code":"filter_gsl(gsl, universe, min_size = 5, max_size = 500)"},{"path":"/reference/filter_gsl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter a gene set list — filter_gsl","text":"gsl gene set list (named list) universe set possible values items gsl min_size minimum gene set size max_size maximum gene set size","code":""},{"path":"/reference/find_communities.html","id":null,"dir":"Reference","previous_headings":"","what":"Find topological communities — find_communities","title":"Find topological communities — find_communities","text":"Find topological communities","code":""},{"path":"/reference/find_communities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find topological communities — find_communities","text":"","code":"find_communities(   g,   e.weights = NULL,   v.weights = NULL,   verbose = TRUE,   methods = c(\"fastgreedy\", \"labprop\", \"walktrap\", \"eigen\", \"multilev\", \"infomap\") )"},{"path":"/reference/find_communities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find topological communities — find_communities","text":"g graph e.weights edge weights v.weights vertex weights verbose TRUE/FALSE methods one cfastgreedy\", \"labprop\", \"walktrap\", \"eigen\", \"multilev\", \"infomap\"","code":""},{"path":"/reference/find_communities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find topological communities — find_communities","text":"list od community objects","code":""},{"path":"/reference/funct_rel_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to obtain a detailed visualization of specific results of functional relevance analysis — funct_rel_heatmap","title":"Function to obtain a detailed visualization of specific results of functional relevance analysis — funct_rel_heatmap","text":"function highlight links defined genes /pathways better inspect results obtained `gene_functional_relevance()` analysis","code":""},{"path":"/reference/funct_rel_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to obtain a detailed visualization of specific results of functional relevance analysis — funct_rel_heatmap","text":"","code":"funct_rel_heatmap(   pct,   adj,   target_g = NULL,   target_ptw = NULL,   weight,   n_cores = 1,   file_name = NULL,   colors = NULL,   width = 200,   height = 200,   res = 300,   units = \"mm\",   ... )"},{"path":"/reference/funct_rel_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to obtain a detailed visualization of specific results of functional relevance analysis — funct_rel_heatmap","text":"pct output `pathway_cross_talk()` function adj adjacency matrix used PCT calculation target_g vector genes interest. provided, function consider genes interact plot target_ptw vector pathways interest. provided, function consider CT pathways involved weight weight genes. provided, function plot product weights heatmap. `NULL` function lot presence/absence links (1-0) n_cores number cores used function file_name file name plot. specified, saved \"funct_rel_heatmap.jpeg\" colors vector two colors used heatmap. provided, functions used \"blue\" \"red\" width, height, res, units graphical value `jpeg()` function ... arguments passed `Heatmap` function","code":""},{"path":"/reference/funct_rel_heatmap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function to obtain a detailed visualization of specific results of functional relevance analysis — funct_rel_heatmap","text":"function uses inputs used `gene_functional_relevance()` retrieve gene interactions specific `target_g` /`target_ptw`. function produces heatmap genes interacts user-provided ones pathway considered. heatmap can reported  product weight genes `weight` provided, existence link (0-1) otherwise.","code":""},{"path":"/reference/gene_functional_relevance.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to calculate gene functional relevance — gene_functional_relevance","title":"Function to calculate gene functional relevance — gene_functional_relevance","text":"function calculates functional diversity interactor diversity involved provided cross-talks","code":""},{"path":"/reference/gene_functional_relevance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to calculate gene functional relevance — gene_functional_relevance","text":"","code":"gene_functional_relevance(   ct,   adj,   method = \"count\",   ct_null = NULL,   n_cores = 1 )"},{"path":"/reference/gene_functional_relevance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to calculate gene functional relevance — gene_functional_relevance","text":"ct data.frame obtained result `gs_cross_talk()`, filtered needed adj adjacency matrix used input `gs_cross_talk()` method = c(\"count\", \"relative\") \"count\" number genes gene-sets listed, \"relative\" counts  relative using general model. case `ct_null` required ct_null required `method = \"relative\"`. cross-talk result table coming general model n_cores number cores use parallelize gene functional relevance analysis","code":""},{"path":"/reference/gene_functional_relevance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to calculate gene functional relevance — gene_functional_relevance","text":"`method = \"count` function returns data.frame : gene: gene analysed functional_diversity: functional diversity interactor_diversity: interactor diversity functional relevance: log2(`functional_diversity`/`interactor_diversity`) n_gs_gene: number gs `gene` present gs_gene: GS `gene` present functional_gs: list names gene-sets counted `functional_diversity` separated `;` interactors_gene: list names genes counted `interactor_diversity` separated `;` Otherwise, `method = \"relative` function returns data.frame : gene: gene analysed relative_functional_diversity: relative functional diversity relative_interactor_diversity: relative interactor diversity relative_functional relevance: log2(`relative_functional_diversity`/`relative_interactor_diversity`) functional_diversity: functional diversity calculated `ct` interactor_diversity: interactor diversity calculated `ct` functional relevance: log2(`functional_diversity`/`interactor_diversity`) n_gs_gene: number gs `gene` present functional_gs: list names gene-sets counted `functional_diversity` separated `;` interactors_gene: list names genes counted `interactor_diversity` separated `;` functional_diversity_null: functional diversity calculated general model `ct_null` interactor_diversity_null: interactor diversity calculated general model `ct_null` functional_gs_null: list names gs counted `functional_diversity_null` separated `;` interactors_gene_null: list names genes counted `interactor_diversity_null` separated `;`","code":""},{"path":"/reference/gene_functional_relevance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function to calculate gene functional relevance — gene_functional_relevance","text":"function takes input data.frame obtained `gs_cross_talk()`  adjacency matrix used input `gs_cross_talk()`. inputs used obtain genes involved significant cross-talks calculate functional diversity interactor diversity.  gene, functional diversity number gene-sets (GS) gene involved formation cross-talk; interactor diversity number different genes gene links  contribute formation cross-talk. function calculate two measures full `gs_cross_talk()` result provided","code":""},{"path":"/reference/gene_functional_relevance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to calculate gene functional relevance — gene_functional_relevance","text":"","code":"if (FALSE) { gslist <- list(gsA = c(\"A\", \"B\",\"C\"), gsB = c(\"D\", \"E\", \"F\"), gsC = c(\"A\", \"B\", \"E\")) adj <- matrix(data = sample(c(0,1), 6*6, replace = TRUE), nrow = 6,  ncol = 6, dimnames = list(LETTERS[1:6], LETTERS[1:6])) wgt <- rep(1, 6) pct <- gscross_talk(gslist = gslist, gene_network_adj = adj,                      mc_cores_pct = 1, mc_cores_perm = 1, k = 9) funct_rel <- gene_funct_relevance(ct, adj, to_plot=FALSE) }"},{"path":"/reference/gene_set_cc.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to calculate sub-components pathway score — gene_set_cc","title":"Function to calculate sub-components pathway score — gene_set_cc","text":"function calculates score pathway connected components","code":""},{"path":"/reference/gene_set_cc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to calculate sub-components pathway score — gene_set_cc","text":"","code":"gene_set_cc(gs_list, gene_network_adj, mc_cores_cc = 2)"},{"path":"/reference/gene_set_cc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to calculate sub-components pathway score — gene_set_cc","text":"gs_list named list genes grouped gene-sets obtained `preparing_gs_list`, `preparing_msigdb_list()`,  `preparing_DEG_list()` `preparing_expr_list()` functions gene_network_adj adjacency matrix whole gene network considered mc_cores_cc number threads used cc calculation","code":""},{"path":"/reference/gene_set_cc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to calculate sub-components pathway score — gene_set_cc","text":"function returns list two object: membership: results [igraph::components()] pathway considered pathway_cc: data frame pathway: name pathway components scores calculated ID: id component pathway score: component score n_gene: number genes component n_link: number links component gene: names genes component","code":""},{"path":"/reference/gene_set_cc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function to calculate sub-components pathway score — gene_set_cc","text":"coupling pathway data adjacency matrix, function identifies pathway components connected components (see [igraph::components()] details). component, function calculates score  described article.","code":""},{"path":"/reference/gene_set_cc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to calculate sub-components pathway score — gene_set_cc","text":"","code":"if (FALSE) { ptw_list <- list(ptwA = c(\"A\", \"B\",\"C\"), ptwB = c(\"D\", \"E\", \"F\"), ptwC = c(\"A\", \"B\", \"E\")) adj <- matrix(data = sample(c(0,1), 6*6, replace = TRUE), nrow = 6,  ncol = 6, dimnames = list(LETTERS[1:6], LETTERS[1:6])) wgt <- rep(1, 6) p_cc <- pathway_cc(pathway_list = ptw_list,  gene_network_adj = adj, weight = wgt, mc_cores_cc = 1) }"},{"path":"/reference/gs_cross_talk.html","id":null,"dir":"Reference","previous_headings":"","what":"Cross-talks between gene-sets — gs_cross_talk","title":"Cross-talks between gene-sets — gs_cross_talk","text":"function calculates cross-talk gene-set pairs show link genes","code":""},{"path":"/reference/gs_cross_talk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cross-talks between gene-sets — gs_cross_talk","text":"","code":"gs_cross_talk(   gs_list,   gene_network_adj,   k = 9,   shared = F,   hash = T,   ct_info = F,   mc_cores_perm = 1,   mc_cores_ct = 1 )"},{"path":"/reference/gs_cross_talk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cross-talks between gene-sets — gs_cross_talk","text":"gs_list named list genes grouped gene sets, obtained `preparing_gs_list`, `preparing_msigdb_list()`,  `preparing_DEG_list()` `preparing_expr_list()` functions gene_network_adj adjacency matrix whole gene network considered (can sparseMatrix) k number permutations shared logical, cross-talk calculation consider shared genes (`TRUE`, suggested cell-cell communication)  (`FALSE`, suggested pathway cross-talk) hash logical, hash map used speed cross-talk calculation. Suggested high number gene-sets (like pathway cross-talk) ct_info logical, function return detail gene-gene interactions gene sets mc_cores_perm number thread used permutations mc_cores_ct number threads used cross talk calculation","code":""},{"path":"/reference/gs_cross_talk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cross-talks between gene-sets — gs_cross_talk","text":"function can return two output type: `ct_info = FALSE`: cross-talk results returned output gs1,gs2: names gene-set pairs considered ct_score: cross-talk score ngenes_gs1,ngenes_gs2: number genes `gs1` `gs2` nlink: number links `gs1` `gs2` p_value_link: p-value score calculated using permutation approach FDR_link: empirical FDR p_adj_BH: `p-value_link` adjusted using BH method (see `p.adjust()` function) weight_gs1,weight_gs2: cumulative weights genes involved cross-talk `gs1` `gs2` genes_gs1,genes_gs2: genes involved cross-talk `gs1` `gs2` `ct_info = TRUE`: cross-talk results detail gene-gene interactions gene-sets returned output ct_info: gene-gene interaction details gs1,gs2: name gene-sets gs1_gene,gs2_gene: genes involved cross-talk score: score interaction `gs1_gene` `gs1_gene`, calculated multiplying weigths ct_res: cross-talk results gs1,gs2: names gene-set pairs considered ct_score: cross-talk score ngenes_gs1,ngenes_gs2: number genes `gs1` `gs2` nlink: number links `gs1` `gs2` p_value_link: p-value score calculated using permutation approach FDR_link: empirical FDR p_adj_BH: `p-value_link` adjusted using BH method (see `p.adjust()` function) weight_gs1,weight_gs2: cumulative weights genes involved cross-talk `gs1` `gs2` genes_gs1,genes_gs2: genes involved cross-talk `gs1` `gs2`","code":""},{"path":"/reference/gs_cross_talk.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cross-talks between gene-sets — gs_cross_talk","text":"function takes inputs adjacency matrix biological network (`gene_network_adj`) gene-set list,   either obtained `preparing_gs_list`, `preparing_msigdb_list()`, `preparing_DEG_list()` `preparing_expr_list()` functions.   gene-set pair shows least link , function uses adjacency matrix calculate cross-talk described paper.   ,  pair function samples randomly `gene_network_adj` two lists dimensions gene-sets calculates   number links . process repeated `k` times. number links obtained `k` permuted version gene-set pairs   compared real calculate p-value FDR. also provide corrected p-value using BH method.","code":""},{"path":"/reference/gs_cross_talk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cross-talks between gene-sets — gs_cross_talk","text":"","code":"if (FALSE) {    ptw_list <- list(ptwA = setNames(c(1, 1, 1), c(\"A\", \"B\",\"C\")),   ptwB = setNames(c(1, 1, 1), c(\"D\", \"E\", \"F\")), ptwC = setNames(c(1, 1, 1), c(\"A\", \"B\", \"E\")))  adj <- matrix(data = sample(c(0,1), 20*20, replace = TRUE), nrow = 6,   ncol = 6, dimnames = list(LETTERS[1:20], LETTERS[1:20]))  pct <- gs_cross_talk(pathway_list = ptw_list, gene_network_adj = adj,                        shared = FALSE, hash = FALSE, ct_info = FALSE,                        mc_cores_pct = 1, mc_cores_perm = 1, k = 9)  }"},{"path":"/reference/gsea.html","id":null,"dir":"Reference","previous_headings":"","what":"Gene Sert Enrichment Analysis — gsea","title":"Gene Sert Enrichment Analysis — gsea","text":"Gene Sert Enrichment Analysis","code":""},{"path":"/reference/gsea.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gene Sert Enrichment Analysis — gsea","text":"","code":"gsea(rl, gsl, k = 100, ord.mode = -1, mc_cores_path = 1, mc_cores_perm = 1)"},{"path":"/reference/gsea.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gene Sert Enrichment Analysis — gsea","text":"rl numeric matrix genes--ranking criteria; column contains numeric values; rownames mandatory gsl named list gene sets k integer, number permutations ord.mode ordering mode: -1 -> descending; 1 ascending; must lenght equal ncol(rl) mc_cores_path number cores use parallel calculation gene set lists; total number cpu used mc_cores_path x mc_cores_perm mc_cores_perm number cores use parallel calculation ranked list permutations; total number cpu used mc_cores_path x mc_cores_perm","code":""},{"path":"/reference/gsea.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gene Sert Enrichment Analysis — gsea","text":"data.frame es, nes, p-value, adjusted p-value FDR q-value","code":""},{"path":"/reference/ora.html","id":null,"dir":"Reference","previous_headings":"","what":"Over Representation Analysis — ora","title":"Over Representation Analysis — ora","text":"Representation Analysis","code":""},{"path":"/reference/ora.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Over Representation Analysis — ora","text":"","code":"ora(wb, bb, gsl, p_adj_method = \"fdr\")"},{"path":"/reference/ora.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Over Representation Analysis — ora","text":"wb hits (white balls) bb elements (black balls) gsl named list sets p_adj_method p value adjustment method, see p.adjust.methods","code":""},{"path":"/reference/ora1gs.html","id":null,"dir":"Reference","previous_headings":"","what":"Hypergeometric test on 1 dataset — ora1gs","title":"Hypergeometric test on 1 dataset — ora1gs","text":"Hypergeometric test 1 dataset","code":""},{"path":"/reference/ora1gs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hypergeometric test on 1 dataset — ora1gs","text":"","code":"ora1gs(wb, bb, bd)"},{"path":"/reference/ora1gs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hypergeometric test on 1 dataset — ora1gs","text":"wb white balls bb black balls bd balls drawn","code":""},{"path":"/reference/ora2enrich.html","id":null,"dir":"Reference","previous_headings":"","what":"ora2enrich\nthis function translates the result of an ORA into the DOSE class ","title":"ora2enrich\nthis function translates the result of an ORA into the DOSE class ","text":"ora2enrich function translates result ORA DOSE class \"enrichResult\"","code":""},{"path":"/reference/ora2enrich.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ora2enrich\nthis function translates the result of an ORA into the DOSE class ","text":"","code":"ora2enrich(   ulisse_res,   pvalueCutoff = 0.25,   pAdjustMethod = \"BH\",   qvalueCutoff = 0.25,   gene = NULL,   universe = NULL,   geneSets = NULL,   organism = \"UNKNOWN\",   keytype = \"UNKNOWN\",   ontology = \"UNKNOWN\",   readable = FALSE )"},{"path":"/reference/ora2enrich.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ora2enrich\nthis function translates the result of an ORA into the DOSE class ","text":"ulisse_res ora analysis result pvalueCutoff cut adjusted p value= 0.25 pAdjustMethod method p value adjustement qvalueCutoff cut q values gene input gene list universe universe genes geneSets list gene sets organism organism keytype keytype ontology ontology readable readable","code":""},{"path":"/reference/ora_pipeline.html","id":null,"dir":"Reference","previous_headings":"","what":"ora pipeline — ora_pipeline","title":"ora pipeline — ora_pipeline","text":"ora pipeline","code":""},{"path":"/reference/ora_pipeline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ora pipeline — ora_pipeline","text":"","code":"ora_pipeline(   deg_list = NULL,   universe = NULL,   gs = NULL,   gsid2name = NULL,   mc.cores = 1,   eg2sym = NULL,   min_size = 5,   max_size = 500,   out_dir = \"./\",   write_tables = FALSE,   id = \"ora\" )"},{"path":"/reference/ora_pipeline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ora pipeline — ora_pipeline","text":"deg_list gene list interest universe genes gs list gene lists gsid2name data.frame annotation gene sets. must contain column \"gsid\" gene set ids match gs mc.cores number cores eg2sym data.frame translating gene ids symbol. must contain columncs gene_id symbol min_size minimum gene set size max_size maximum gene set size out_dir output directory write_tables whether write output id project name","code":""},{"path":"/reference/pathway_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns filtered msigdb geneset in a format compatible with cross-talks calculations — pathway_data","title":"Returns filtered msigdb geneset in a format compatible with cross-talks calculations — pathway_data","text":"Download MsidgDB data, filter prepare format needed cross-talks calculation","code":""},{"path":"/reference/pathway_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns filtered msigdb geneset in a format compatible with cross-talks calculations — pathway_data","text":"","code":"pathway_data(   species,   category = NULL,   subcategory = NULL,   type = \"gene_symbol\",   genes,   min_size = 1,   max_size = 500 )"},{"path":"/reference/pathway_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns filtered msigdb geneset in a format compatible with cross-talks calculations — pathway_data","text":"species Species name category MSigDB category name, see `msigdbr_collections()` subcategory MsigDB subcategory name, see `msigdbr_collections()` type Gene name interest, can `gene_symbol` `entrez_gene` genes vector gene gene name interest min_size, max_size filtering gene sets maintain ones least `min_size` less `max_size` number genes","code":""},{"path":"/reference/pathway_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns filtered msigdb geneset in a format compatible with cross-talks calculations — pathway_data","text":"output list two output: msigdb_output: data.frame data downloaded MSigDB data path_list: list pathway. list composed vector names genes interest  part pathway","code":""},{"path":"/reference/pathway_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Returns filtered msigdb geneset in a format compatible with cross-talks calculations — pathway_data","text":"function downloads pathway data `species` interest. selection database  download made using parameter `category` `subcategory`. data downloaded filtered maintain `genes` interest remove pathway number genes lower `min_size` higher `max_size`","code":""},{"path":"/reference/pathway_sim_comm.html","id":null,"dir":"Reference","previous_headings":"","what":"Pathway similarity and communities — pathway_sim_comm","title":"Pathway similarity and communities — pathway_sim_comm","text":"Pathway similarity communities","code":""},{"path":"/reference/pathway_sim_comm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pathway similarity and communities — pathway_sim_comm","text":"","code":"pathway_sim_comm(   x,   gs_list,   method = c(\"overlap\", \"jaccard\"),   coeff = c(0.5, 0.1),   all_gs = TRUE,   comm_method = c(\"auto\", \"fastgreedy\", \"multilev\"),   set_sim_df = NULL )"},{"path":"/reference/pathway_sim_comm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pathway similarity and communities — pathway_sim_comm","text":"x named vector pathway scores gs_list gene set list method 'overlap' 'jaccard' coeff threshold similarity score two gene sets all_gs TRUE/FALSE comm_method one among 'auto', 'fastgreedy' 'multilev' set_sim_df optional data frame three columns 'set1', 'set2' 'sim'","code":""},{"path":"/reference/pathway_sim_comm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pathway similarity and communities — pathway_sim_comm","text":"list two data frames containing pathway network vertex similarity","code":""},{"path":"/reference/pathway_similarity.html","id":null,"dir":"Reference","previous_headings":"","what":"Pathway similarity — pathway_similarity","title":"Pathway similarity — pathway_similarity","text":"Pathway similarity","code":""},{"path":"/reference/pathway_similarity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pathway similarity — pathway_similarity","text":"","code":"pathway_similarity(pathway_list, gene_network_adj, sim_method = \"overlap\")"},{"path":"/reference/pathway_similarity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pathway similarity — pathway_similarity","text":"pathway_list list gene sets gene_network_adj adjacency matrix gene network analysis sim_method method define similarity pathways","code":""},{"path":"/reference/perm_link.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to caluclate permutation of the number of links between two gene sets — perm_link","title":"Function to caluclate permutation of the number of links between two gene sets — perm_link","text":"`perm_link` used obtain permutatied number links two genesets  defined number gene","code":""},{"path":"/reference/perm_link.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to caluclate permutation of the number of links between two gene sets — perm_link","text":"","code":"perm_link(r, c, gene_network_adj, core, k, hash = T)"},{"path":"/reference/perm_link.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to caluclate permutation of the number of links between two gene sets — perm_link","text":"r length first geneset (rows) c length second geneset (columns) gene_network_adj adjacency matrix gene network used core threads used permutation k number permutation hash logical, indicating random sampling done using hashmap (see `sample.int()`)","code":""},{"path":"/reference/perm_link.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to caluclate permutation of the number of links between two gene sets — perm_link","text":"function list k matrices, one composed number links permutated verion  two genesets","code":""},{"path":"/reference/perm_link.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function to caluclate permutation of the number of links between two gene sets — perm_link","text":"function generates k permuted verion two geneset defined length random sampling  gene network adjacency matrix. identify subset adjacency matrix k geneset  calculates number links.","code":""},{"path":"/reference/plot_functional_relevance.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to plot functional relevance results — plot_functional_relevance","title":"Function to plot functional relevance results — plot_functional_relevance","text":"Graphical function plot (relative) functional relevance results.","code":""},{"path":"/reference/plot_functional_relevance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to plot functional relevance results — plot_functional_relevance","text":"","code":"plot_functional_relevance(   fr,   method = \"count\",   file_name = NULL,   plot_names = T,   pal = NULL,   jitter_width = 0.07,   jitter_height = 0.07,   width = 200,   height = 200,   res = 300,   units = \"mm\" )"},{"path":"/reference/plot_functional_relevance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to plot functional relevance results — plot_functional_relevance","text":"fr data.frame obtained `gene_functional_relevance()` result method = c(\"count\", \"relative\") \"count\" functional interactor diversity functional relevance used, otherwise relative ones file_name file name plot, `NULL` plot returned function plot_names logical, vector length order genes `fr`. `TRUE` genes name plotted, `FALSE` names plotted, otherwise passed vector used label genes plotted pal vector three color used create gradient color genes according (relative) functional relevance score. `NULL` Brewer \"Spectral\" palette used jitter_width, jitter_height values control point jitter plot. See ggplot2::geom_jitter() details width, height, res, units values used save plot jpeg format, see grDevices::jpeg() details","code":""},{"path":"/reference/plot_functional_relevance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to plot functional relevance results — plot_functional_relevance","text":"`file_name` function returns ggplot object","code":""},{"path":"/reference/plot_functional_relevance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function to plot functional relevance results — plot_functional_relevance","text":"function plots (relative) functional relevance results obtained `gene_functional_relevance()` function. gene plotted interactor  functional diversity, colored functional relevance score","code":""},{"path":"/reference/plot_network_CT.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot cross-talk results as a network — plot_network_CT","title":"Plot cross-talk results as a network — plot_network_CT","text":"function elaborates results `gs_cross_talk()` functions obtain graphical   representation cross-talk network","code":""},{"path":"/reference/plot_network_CT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot cross-talk results as a network — plot_network_CT","text":"","code":"plot_network_CT(   ct,   filtering = FALSE,   p_val,   FDR,   ct_val,   community,   pal_community = NULL,   voronoi_radius = 0.8,   voronoi_alpha = 0.3,   vertex = \"name\",   vertex_pal = NULL,   vertex_size = 5,   vertex_label = TRUE,   edge_col_by = \"ct_score\",   edge_pal = NULL,   edge_width = T,   edge_adj_col = 0.7,   file_out = NULL,   width = 200,   height = 200,   res = 300,   units = \"mm\",   ... )"},{"path":"/reference/plot_network_CT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot cross-talk results as a network — plot_network_CT","text":"ct output `gs_cross_talk()` function filtering logical, function plot edges significant ones. `TRUE`, function uses `p_val, FDR` `ct_val` identify  significant ones, plotted solid line, significant dashed line. `FALSE`, edges plotted solid line. p_val, FDR, ct_val filtering values. one set `NULL` function ignores community logical object resulting igraph community calculation. `TRUE`, function calculates communities using fastgreedy algorithm, `FALSE` function consider communities. Otherwise, community object provided, function uses color vertices accordingly pal_community color palette used color vertices according communities. provided, function uses `rainbow()` palette. `community = FALSE` function ignores voronoi_radius, voronoi_alpha parameters passed `geom_node_voronoi()`. `vertex` `community` arguments enabled, communities represented cells voronoi tessellation (see `ggraph::geom_node_voronoi()`). case, argument used control  radius cells transparency, respectively. vertex list two vector, first name attribute second named vector attribute per vertices  used color (discrete value), `NULL` vertices colored (thus \"grey65\" passed default color) vertex_pal color palette used color vertices. named vector names corresponding unique elements `vertices`. `NULL` functions use pals::alphabet2 default vertex_size size vertices plot vertex_label logical, vertex names plotted , named vector, label associated vertex named edge_col_by name column used color edges. Default = `ct_score` edge_pal color used create gradient color edges. provided, function uses \"blue\"  \"red\" edge_width logical, edge widths proportional `edge_col_by` values edge_adj_col value used adjust color transparency edges file_out name jpeg file produced. `NULL` functions returns also plot object width, height, res, units graphical value `jpeg()` function ... graphical parameters passed `ggraph()` function","code":""},{"path":"/reference/plot_network_CT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot cross-talk results as a network — plot_network_CT","text":"`file_out` null function returns plot igraph object used plotting (may contain communities `comm_id` attribute).   Otherwise, igraph object returned plot saved `file_out`","code":""},{"path":"/reference/plot_network_CT.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot cross-talk results as a network — plot_network_CT","text":"functions uses `gs_cross_talk()` output build cross-talk network. , network plotted  edges colored value interest. user may decide plot edges, color vertices   community, scale dimension edges variable interest.","code":""},{"path":"/reference/plot_ora_comparison.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a comparion between two ORAs — plot_ora_comparison","title":"Plot a comparion between two ORAs — plot_ora_comparison","text":"Plot comparion two ORAs","code":""},{"path":"/reference/plot_ora_comparison.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a comparion between two ORAs — plot_ora_comparison","text":"","code":"plot_ora_comparison(   ora_res_list = NULL,   p_sig = 0.001,   p_max = 0.1,   dir_out = \"./\",   mar = c(2.5, 20, 1, 1),   mgp = c(1.2, 0.3, 0),   cex.axis = 0.6,   use_nominal_p = TRUE,   col_pal = NULL )"},{"path":"/reference/plot_ora_comparison.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a comparion between two ORAs — plot_ora_comparison","text":"ora_res_list list results ora_pipeline p_sig thresold significant pathways p_max maximum p-value allowed marginally significant pathways dir_out output directory mar mar parameter mgp mgp parameter cex.axis cex.axis use_nominal_p whether use nominal p-values col_pal color palette function","code":""},{"path":"/reference/plot_ora_comparison.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a comparion between two ORAs — plot_ora_comparison","text":"data.frame merged results pathways satisfy p_sig least one condition","code":""},{"path":"/reference/preparing_DEG_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to prepare the input for `cluster_communication()` by using DEG analysis results data — preparing_DEG_list","title":"Function to prepare the input for `cluster_communication()` by using DEG analysis results data — preparing_DEG_list","text":"function prepares input `cluster_communication()` analysis using DEG results data","code":""},{"path":"/reference/preparing_DEG_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to prepare the input for `cluster_communication()` by using DEG analysis results data — preparing_DEG_list","text":"","code":"preparing_DEG_list(cluster, p_val, log2FC, gene, universe)"},{"path":"/reference/preparing_DEG_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to prepare the input for `cluster_communication()` by using DEG analysis results data — preparing_DEG_list","text":"cluster column result table DEG analysis data clusters analysis p_val column result table DEG analysis data p-value test. either nominal adjusted p-value log2FC column result table DEG analysis data log2Fold Change gene column result table DEG analysis names genes tested universe vector names genes interest study. value names LR network","code":""},{"path":"/reference/preparing_DEG_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to prepare the input for `cluster_communication()` by using DEG analysis results data — preparing_DEG_list","text":"function returns gene list composed vector cluster provided. vector  composed score, calculated abs(log2FC) * -log10(p-value), named respective genes","code":""},{"path":"/reference/preparing_DEG_list.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function to prepare the input for `cluster_communication()` by using DEG analysis results data — preparing_DEG_list","text":"function prepares gene list format compatible `cluster_communication()` analysis.  detail, function needs information obtained DEG analysis: cluster tested, gene names, p-values, log2(Fold Change). data filtered consider gene interest study (`universe`).  function calculates score gene : abs(log2FC) * -log10(p-value).  p-value 0, approximated 1/10 minimum non-zero p-value present data.  function returns gene set list cluster, composed vector scores named genes  names provided.","code":""},{"path":"/reference/preparing_expr_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to prepare cluster list for `cluster_communication()` — preparing_expr_list","title":"Function to prepare cluster list for `cluster_communication()` — preparing_expr_list","text":"`preparing_expr_list()` produce cluster list needed CCC calculation","code":""},{"path":"/reference/preparing_expr_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to prepare cluster list for `cluster_communication()` — preparing_expr_list","text":"","code":"preparing_expr_list(mtx, clusters, mean_t = 1, cell_t = 5, universe)"},{"path":"/reference/preparing_expr_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to prepare cluster list for `cluster_communication()` — preparing_expr_list","text":"mtx gene--cell matrix used single cell data analysis clusters vector cluster membership cells `mtx` mean_t threshold expression used binarize expression matrix. value decided considering  distribution mean expression genes (without considering zeros) cell_t minimum number cells gene expressed `mean_t` threshold cluster considered subsequent analysis universe names genes interest. Used filter cluster gene lists","code":""},{"path":"/reference/preparing_expr_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to prepare cluster list for `cluster_communication()` — preparing_expr_list","text":"function returns gene list composed vector cluster provided. vector composed frequency -threshold expression genes cluster, named respective genes","code":""},{"path":"/reference/preparing_expr_list.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function to prepare cluster list for `cluster_communication()` — preparing_expr_list","text":"function used prepare cluster list needed input `cluster_communication()`. detail, function needs `gene_by_cell` matrix used single cell analysis. suggest use normalized data avoid accounting differences gene counts. matrix binarized assigning `1` genes normalized  expression value equal higher `mean_t`, `0` otherwise. , gene cluster, function discards  gene expressed number cell lower `cell_t` calculates mean frequency -threshold  expression cells cluster. function returns vector cluster, one composed  frequencies named corresponding genes. vectors filtered maintain genes `universe`, gene interest","code":""},{"path":"/reference/preparing_gs_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Build list for cross-talk calculation from database list — preparing_gs_list","title":"Build list for cross-talk calculation from database list — preparing_gs_list","text":"function build gene-set list compatible `gs_cross-talk()` cross-talk calculation starting provided gene set database  genes (weights) interest.","code":""},{"path":"/reference/preparing_gs_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build list for cross-talk calculation from database list — preparing_gs_list","text":"","code":"preparing_gs_list(gs_names, gs_genes, weights, min_size = 1, max_size = 500)"},{"path":"/reference/preparing_gs_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build list for cross-talk calculation from database list — preparing_gs_list","text":"gs_names names gene-sets, used build gene-set list. length `gs_gene` gs_genes names genes gene-sets `gs_genes` weights named vector weight gene `gs_gene`. `NULL` function assigns `1` gene min_size, max_size filtering gene sets maintain ones least `min_size` less `max_size` number genes","code":""},{"path":"/reference/preparing_gs_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build list for cross-talk calculation from database list — preparing_gs_list","text":"output gene-set list vector gene-set, composed weights named genes","code":""},{"path":"/reference/preparing_gs_list.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Build list for cross-talk calculation from database list — preparing_gs_list","text":"`preparing_gs_list()` uses gene-set database data build list needed `gs_cross_talk()` cross-talk calculation.","code":""},{"path":"/reference/preparing_msigdb_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Build list for cross-talk calculation from MSigDB database list — preparing_msigdb_list","title":"Build list for cross-talk calculation from MSigDB database list — preparing_msigdb_list","text":"function build gene set list compatible `gs_cross-talk()` cross-talk calculation using desired MSigDB (using msigdbr package)","code":""},{"path":"/reference/preparing_msigdb_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build list for cross-talk calculation from MSigDB database list — preparing_msigdb_list","text":"","code":"preparing_msigdb_list(   species,   category = NULL,   subcategory = NULL,   type = \"gene_symbol\",   genes,   weights,   min_size = 1,   max_size = 500 )"},{"path":"/reference/preparing_msigdb_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build list for cross-talk calculation from MSigDB database list — preparing_msigdb_list","text":"species Species name category MSigDB category name, see `msigdbr_collections()` subcategory MsigDB subcategory name, see `msigdbr_collections()` type Gene name interest, can `gene_symbol` `entrez_gene` genes vector gene gene name interest weights vector `genes` weights order. `NULL` function assigns `1` gene min_size, max_size filtering gene sets maintain ones least `min_size` less `max_size` number genes","code":""},{"path":"/reference/preparing_msigdb_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build list for cross-talk calculation from MSigDB database list — preparing_msigdb_list","text":"output gene-set list vector gene-set, composed weights named genes","code":""},{"path":"/reference/preparing_msigdb_list.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Build list for cross-talk calculation from MSigDB database list — preparing_msigdb_list","text":"`preparing_msigdb_list()` uses MSigDB database build list needed `gs_cross_talk()` cross-talk calculation. details, calls  `pathway_data()` function download database using msigdbr package build gene-set list","code":""},{"path":"/reference/round.html","id":null,"dir":"Reference","previous_headings":"","what":"Scientific approximation — round","title":"Scientific approximation — round","text":"Scientific approximation","code":""},{"path":"/reference/round.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scientific approximation — round","text":"","code":"round(x, y = 0)"},{"path":"/reference/round.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scientific approximation — round","text":"x numeric y number digits","code":""}]
