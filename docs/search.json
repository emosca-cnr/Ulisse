[{"path":"/articles/Ulisse_bulk.html","id":"downloading-and-preparing-the-data","dir":"Articles","previous_headings":"","what":"Downloading and preparing the data","title":"Ulisse workflow 1: Pathway Cross-Talk analysis of bulk data","text":"Ulisse needs mainly two inputs: gene list, can ranked, biological network. Breast cancer mutational data obtained TCGA used obtain ranked gene list. biological network obtained STRING database.","code":"library(Ulisse) library(TCGAbiolinks) library(STRINGdb) library(igraph) library(reshape2) library(org.Hs.eg.db)"},{"path":"/articles/Ulisse_bulk.html","id":"biological-network","dir":"Articles","previous_headings":"Downloading and preparing the data","what":"Biological network","title":"Ulisse workflow 1: Pathway Cross-Talk analysis of bulk data","text":"code , obtain STRING data STRINGdb (Szklarczyk et al. 2021) build network genes present database. gene names formatted STRING identifiers, need convert gene symbol.","code":"string_db <- STRINGdb$new( version=\"11.0\",                             species=9606,                             score_threshold=700,                             input_directory=\".\" ) string_proteins <- string_db$get_proteins() PPI <- unique(string_db$get_interactions(string_proteins$protein_external_id)) PPI.g <- graph_from_edgelist(as.matrix(PPI[,1:2]), directed = F) V(PPI.g)$name <- string_proteins$preferred_name[match(V(PPI.g)$name, string_proteins$protein_external_id)] PPI.g #> IGRAPH a991c72 UN-- 17185 420534 --  #> + attr: name (v/c) #> + edges from a991c72 (vertex names): #>  [1] ARF5--SPTBN2    ARF5--KIF13B    ARF5--AP1B1     ARF5--KIF21A    #>  [5] ARF5--TMED7     ARF5--ARFGAP1   ARF5--ANK2      ARF5--KLC1      #>  [9] ARF5--COPZ2     ARF5--KIF15     ARF5--DCTN5     ARF5--KIF2B     #> [13] ARF5--KIF16B    ARF5--KIF25     ARF5--KDELR2    ARF5--RAB1B     #> [17] ARF5--TMED10    ARF5--KIF3B     ARF5--RACGAP1   ARF5--SPTBN4    #> [21] ARF5--GBF1      ARF5--DYNC1I2   ARF5--INS       ARF5--CYTH3     #> [25] ARF5--CAPZB     ARF5--RAB11FIP3 ARF5--ACAP2     ARF5--KIF3C     #> [29] ARF5--DYNC1LI1  ARF5--KIFAP3    ARF5--COPA      ARF5--YKT6      #> + ... omitted several edges"},{"path":"/articles/Ulisse_bulk.html","id":"ranked-gene-list","dir":"Articles","previous_headings":"Downloading and preparing the data","what":"Ranked gene list","title":"Ulisse workflow 1: Pathway Cross-Talk analysis of bulk data","text":", download data TGCA using TCGAbiolinks package Mounir et al. (2019). , want prioritize genes considering frequency mutations observed among samples. , handle data obtain gene sample matrix, number mutation observed gene. making row mean obtain frequency mutation gene samples, use value rank, cosnidering top 200 genes.","code":"query <- GDCquery(project = \"TCGA-BRCA\",                    data.category = \"Simple Nucleotide Variation\",                   data.type = \"Masked Somatic Mutation\")                   #) GDCdownload(query = query) #have to be done only the first time data <- TCGAbiolinks::GDCprepare(query, summarizedExperiment = F, save = T) data <- data[!data$Entrez_Gene_Id == 0,] data <- data.frame(table(data$SYMBOL, data$Tumor_Sample_Barcode), stringsAsFactors = F) data <- data.frame(reshape2::acast(data, Var1 ~ Var2), stringsAsFactors = F) data$mean <- rowMeans(data) data <- data[order(data$mean, decreasing = T),]  gene_weights <- data.frame(gene = rownames(data),                       weights = data$mean,                       stringsAsFactors = F) target_gene_weights <- gene_weights[1:200,]"},{"path":"/articles/Ulisse_bulk.html","id":"pathway-data","dir":"Articles","previous_headings":"Downloading and preparing the data","what":"Pathway Data","title":"Ulisse workflow 1: Pathway Cross-Talk analysis of bulk data","text":"Now two needed input, can proceed pipeline. subsequent step : group genes (ranked) gene-sets (pathways) obtain gene-set list use gene-set list adjacency matrix biological network calculate cross-talk. example use MSigDB Hallmark pathways (Liberzon et al. 2015) obtain gene-set list using preparing_msigdb_list(). function downloads defines gene-set database uses group gene gene list. function return list composed named vector pathway. vectors composed ranks named genes gene-set. returns pathways composed least min_size maximum max_size genes. Ulisse contains also function, preparing_gs_list() build gene-set list custom resources. exemplify usage function, download Hallmark db MSigDB using msigdbr package (Dolgalev 2021) build gene-set list.","code":"ptw <- preparing_msigdb_list(species = \"Homo sapiens\",                               category = \"H\",                               type = \"gene_symbol\", min_size = 1, max_size = 500,                               gene = target_gene_weights$gene,                              weights = target_gene_weights$weights) ptw[1:3] #> $HALLMARK_ALLOGRAFT_REJECTION #>       AKT1      BRCA1       FLNA  #> 0.02938197 0.02532928 0.02938197  #>  #> $HALLMARK_ANDROGEN_RESPONSE #>       AKT1  #> 0.02938197  #>  #> $HALLMARK_APICAL_JUNCTION #>       CDH1       FBN1       MYH9        NF1       PTEN  #> 0.13880446 0.02938197 0.03444782 0.04457953 0.05876393 msig_out <- msigdbr::msigdbr(species = \"Homo sapiens\", category = \"H\") ptw <- preparing_gs_list(gs_names =  msig_out$gs_name,                          gs_genes = msig_out$gene_symbol,                           weights = setNames(target_gene_weights$weights, target_gene_weights$gene),                           min_size = 1, max_size = 500)"},{"path":"/articles/Ulisse_bulk.html","id":"cross-talk","dir":"Articles","previous_headings":"","what":"Cross-talk","title":"Ulisse workflow 1: Pathway Cross-Talk analysis of bulk data","text":"Now needed input calculating cross-talk. biological network provided gs_cross_talk() function adjacency matrix. Cross-talk calculation can parallelized increasing mc_cores_pct mc_cores_perm values: first parallelize calculation cross-talk gene-sets, second permutations used p-value calculation, thus multiplying mc_cores_pct part function. number permutations k corresponds number permutations needed , together original matrix, used calculation p-value FDR. set number 49, means p-value FDR calculated 49 permuted matrices + original one, 50 matrix total (thus minimal p-value 1/50 = 0.02). inputs parameter : shared set FALSE gene-set cross-talk avoid considering shared genes. Pathways defined group genes occur particular molecular function. However, mutually exclusive, gene may involved multiple functions. Considering shared genes lead consider cross-talk calculations even links internal pathway. Thus, calculating cross-talk gene-sets pathways parameter set FALSE; hash: logical, used speed-calculation lots gene-sets used. pathway cross-talk suggest set TRUE; ct_info: logical, detailS gene-gene interaction gene-set returned. might highly important cell-cell cross-talk. set FALSE.","code":"adj.m <- as_adjacency_matrix(PPI.g, sparse = F) pct <- gs_cross_talk(gs_list = ptw,                       gene_network_adj = adj.m,                       k = 49, shared = F,                       hash = T,                       ct_info = F,                       mc_cores_perm = 1,                       mc_cores_ct = 1) pct[1:10,]"},{"path":"/articles/Ulisse_bulk.html","id":"cross-talk-visualization","dir":"Articles","previous_headings":"Cross-talk","what":"Cross-talk visualization","title":"Ulisse workflow 1: Pathway Cross-Talk analysis of bulk data","text":"Cross-talk results can filtered maintain significant ones. results can visualized network (plot_network_CT()) heatmap (ct_heatmap()) using Ulisse package functions. Considering network, filtering argument used control CT visualized network. set TRUE, p_val, FDR ct_val used identify significant CT plot solid line, whereas others plotted dashed line. Otherwise, whole cross-talk result table used. community can logical (community calculated using igraph::fastgreedy.community()), community object calculated igraph package. vertex_label can either logical (label vertices plotted), vector label assigned vertex (explained later vignette). edge_col_by edge_width parameters control value used color edges width proportional value. edge_adj_col used control transparency edges: pathway cross-talk can lots links can e useful control transparency. plot_network_CT() function returns igraph cross-talk network communities “comm_id” vertex attribute (calculated). plot_network_CT() function uses ggraph package functions (Pedersen 2022), ggplot2-based (Wickham 2016). file_out set NULL function returns also ggplot2 network object.  can see significant CT heatmap. can choose variable color heatmap (: cross-talk score). color parameters used set color extremes color scale, want correct outliers can choose use minimum maximum (default) ad provide values. no_ct_color used color cells heatmap corresponding pathways pairs shows CT necessarily present heatmap 0 score. different colors minimum zero help heatmap readability. parameters can passed ... argument. See complexHeatmap package parameters (Gu, Eils, Schlesner 2016).","code":"pct_f <- pct[which(pct$p_value_link <=0.05),]  pct_net <- plot_network_CT(ct = pct_f,                             filtering = F,                            community = T,                             vertex_label = FALSE,                            edge_col_by = \"ct_score\", edge_width = T, edge_adj_col = 0.7,                            file_out =NULL, width = 200, height = 200, res = 300, units = \"mm\")  pct_net #> IGRAPH cb0e5ae UN-- 26 149 --  #> + attr: name (v/c), comm_id (v/c), ct_score (e/n), ngenes_gs1 (e/n), #> | ngenes_gs2 (e/n), nlink (e/n), p_value_link (e/n), FDR_link (e/n), #> | p_adj_BH (e/n), weight_gs1 (e/n), weight_gs2 (e/n), genes_gs1 (e/c), #> | genes_gs2 (e/c) #> + edges from cb0e5ae (vertex names): #> [1] HALLMARK_ALLOGRAFT_REJECTION--HALLMARK_ANDROGEN_RESPONSE #> [2] HALLMARK_ALLOGRAFT_REJECTION--HALLMARK_APICAL_JUNCTION   #> [3] HALLMARK_ALLOGRAFT_REJECTION--HALLMARK_APICAL_SURFACE    #> [4] HALLMARK_ALLOGRAFT_REJECTION--HALLMARK_APOPTOSIS         #> [5] HALLMARK_ALLOGRAFT_REJECTION--HALLMARK_COMPLEMENT        #> + ... omitted several edges ct_heatmap(ct = pct_f,             color_by = \"ct_score\",             color = c(\"lightyellow\", \"red3\"),             no_ct_color = \"whitesmoke\",             rect_gp = gpar(col = \"white\"),             cluster_rows = FALSE,             cluster_columns = FALSE,            row_names_gp = gpar(fontsize = 7), column_names_gp = gpar(fontsize = 7))"},{"path":"/articles/Ulisse_bulk.html","id":"gene-functional-relevance","dir":"Articles","previous_headings":"","what":"Gene functional relevance","title":"Ulisse workflow 1: Pathway Cross-Talk analysis of bulk data","text":"significant cross-talk results can used gene functional relevance analysis via gene_functional_relevance() function. analysis cross-talk data used study roles genes cross-talks. returns: \\(n_f\\) functional diversity, number different pathways gene involved cross-talk; \\(n_d\\) interactors diversity, number interactors, genes gene interacts significant cross-talk; functional relevance, \\(\\log_2(\\frac{n_f}{n_d})\\) Functional relevance analysis results can visualized plot_functional_relevance() function, takes input result table gene_functional_relevance(). , file_name argument set NULL function return ggplot2 object instead saving . plot_names can used turn /plotting gene names (logical) provide vector new labels vertices, instead name. named vector assure correspondence vertices names new labels can used change vertices names , demonstrated , plot vertices interest, like one top/least functional interactor values functional relevance scores.  implemented two ways perform functional relevance analysis: method = \"count\" used obtain results shown , list numbers pathways interactors; method = \"relative\" used calculate normalized functional relevance using general model. case, provide function cross-talk results obtained general model built using pathway data. code run cross-talk analysis whole Hallmark database. set weight argument NULL avoid using weights, none. case cross-talk equal number links. Now can calculate normalized functional relevance can see, relative functional relevance returns also “count” values, well functional interactor diversity calculated general model used normalization. Now can use plot_functional_relevance() function plot relative functional relevance results.  can see plotting function call, method argument used define data want plot (“count” “relative”, functional relevance calculation). implies using functional relevance results obtained method “relative”, thus returns relative count results, possible plot results without re-running calculation.","code":"funct_rel <- gene_functional_relevance(ct = pct_f, adj = adj.m, method = \"count\") funct_rel[1:10,] names <- c(funct_rel$gene[order(funct_rel$functional_diversity)][c(1:3, 38:40)],            funct_rel$gene[order(funct_rel$interactor_diversity)][c(1:3, 38:40)],            funct_rel$gene[order(funct_rel$functional_relevance)][c(1:3, 38:40)])  names <- unique(names) funct_rel_names <- funct_rel$gene funct_rel_names[!funct_rel_names %in% names] <- \"\"  plot_functional_relevance(fr = funct_rel,                            method = \"count\",                            plot_names = funct_rel_names,                           pal = NULL) h.ptw <- preparing_msigdb_list(species = \"Homo sapiens\",                                 category = \"H\",                                type = \"gene_symbol\", min_size = 1, max_size = 500,                                 gene = V(PPI.g)$name,                                weights = NULL)   null.pct <- gs_cross_talk(gs_list = h.ptw,                            gene_network_adj = adj.m,                            shared = F, hash = T,                            ct_info = F,                            mc_cores_ct = 1, mc_cores_perm = 1, k = 9) funct_rel_norm <- gene_functional_relevance(ct = pct_f,                                              adj = adj.m,                                              method = \"relative\",                                              ct_null = null.pct)  funct_rel_norm[1:10, ] names <- c(funct_rel_norm$gene[order(funct_rel_norm$functional_diversity)][c(1:3, 38:40)],            funct_rel_norm$gene[order(funct_rel_norm$interactor_diversity)][c(1:3, 38:40)],            funct_rel_norm$gene[order(funct_rel_norm$functional_relevance)][c(1:3, 38:40)]) names <- unique(names) funct_rel_names <- funct_rel_norm$gene funct_rel_names[!funct_rel_names %in% names] <- \"\"  plot_functional_relevance(fr = funct_rel_norm,                            method = \"relative\",                            plot_names = funct_rel_names, pal = NULL)"},{"path":"/articles/Ulisse_bulk.html","id":"sub-gene-set-cross-talk","dir":"Articles","previous_headings":"","what":"Sub-gene-set cross-talk","title":"Ulisse workflow 1: Pathway Cross-Talk analysis of bulk data","text":"Gene interacts inside gene-sets groups connected components (CC). connected components correspond genes similar biological function. may important study CC gene-sets interest. gene_set_cc() assigns score CC gene-sets. Similarly gs_cross_talk, mc_cores_cc control parallelization calculation CC score. function returns list two elements: first details CC present pathway second table result sub-pathway analysis","code":"pct_CC <- gene_set_cc(gs_list = ptw,                        gene_network_adj = adj.m,                        mc_cores_cc = 2) pct_CC$membership[1:3] #> [[1]] #>  AKT1 BRCA1  FLNA  #>     1     1     1  #>  #> [[2]] #> CDH1 FBN1 MYH9  NF1 PTEN  #>    1    2    3    1    1  #>  #> [[3]] #> BRCA1 ERBB2  #>     1     1 pct_CC$pathway_cc[1:10,]"},{"path":"/articles/Ulisse_bulk.html","id":"tm-ct","dir":"Articles","previous_headings":"","what":"TM-CT","title":"Ulisse workflow 1: Pathway Cross-Talk analysis of bulk data","text":"Network can studied identify communities, groups vertices connected rest network. said communities correspond genes similar biological function. aligning biological network target genes can obtain gene network, can studied identify communities. genes different communities can grouped gene-sets, represent part pathways similar biological function. decided develop TM_CT() able study gene-sets build gene communities interact communities. First, need subset biological network identify gene communities. can use find_communites() function compare different algorithms Considering output find_communities, best algorithm choose one highest modularity lowest number communities. choose use multi-level modularity optimization algorithm.  Now inputs needed TM-CT. , mc_cores_ct mc_cores_tm controls parallelization calculation TM-PCT score pathway pairs combinations communities, respectively. TM_CT() function returns list two object, first pathway list community, second table results TM-CT calculation TM-PCT results can visualized network heatmap using Ulisse functions. need slightly adapt TM-PCT output use graphical CT functions. code modify gs names compatible plot_network_CT() ct_heatmap(). code also create vertex object plot vertex names involved highest score TM-CT  , use TM-CT results create heatmap annotations highlight communities pathways belongs .","code":"sub.PPI <- induced.subgraph(PPI.g, vids = target_gene_weights$gene[target_gene_weights$gene %in% V(PPI.g)$name]) sub.PPI <- induced.subgraph(sub.PPI, V(sub.PPI)$name[-which(igraph::degree(sub.PPI) ==0)]) comm_det <- find_communities(sub.PPI)  comm_det$info #>    algorithm modularity  n #> 1 fastgreedy  0.6529376 12 #> 2    labprop  0.6177907 17 #> 3   walktrap  0.6468313 18 #> 4      eigen  0.6170664 14 #> 5   multilev  0.6687360 11 #> 6    infomap  0.6531292 18 comm <- comm_det$comm$multilev comm_m <- membership(comm) sub.PPI <- set_vertex_attr(sub.PPI, \"comm_id\", value =  as.character(comm_m[match(names(V(sub.PPI)), names(comm_m))]))  pal = pals::alphabet2(max(comm_m)) names(pal) <- 1:max(comm_m)  ggraph(sub.PPI) +         theme_graph()  +         geom_edge_link(color = \"grey45\") +         geom_node_point(aes(color = comm_id), size = 3) +         scale_color_manual(limits = names(pal), values = pal) tm_pct <- TM_CT(gs_list = ptw,                   gene_network_adj = adj.m,                  membership = comm_m,                  mc_cores_ct = 1,                   mc_cores_tm = 1)   tm_pct[[\"comm_pathway_list\"]][[\"1\"]][1:3] #> $HALLMARK_ALLOGRAFT_REJECTION #>      BRCA1  #> 0.02532928  #>  #> $HALLMARK_APICAL_JUNCTION #>       MYH9        NF1  #> 0.03444782 0.04457953  #>  #> $HALLMARK_APICAL_SURFACE #>      BRCA1      PKHD1  #> 0.02532928 0.03343465 tm_pct$TM_CT_res[1:10,] tm_pct_mod <- tm_pct$TM_CT_res tm_pct_mod$gs1 <- paste(tm_pct_mod$commID_1, tm_pct_mod$gs1, sep = \"_\") tm_pct_mod$gs2 <- paste(tm_pct_mod$commID_2, tm_pct_mod$gs2, sep = \"_\") tm_pct_mod <- tm_pct_mod[, -c(1,3)] tm_ptw <- unique(data.frame(Map(c, tm_pct_mod[, 1:2], tm_pct_mod[, 3:4]))) tm_ptw <- setNames(as.character(tm_ptw$commID_1), tm_ptw$gs1)  tm_n <- setNames(names(tm_ptw), names(tm_ptw)) target_tm_pct <- tm_pct_mod[order(tm_pct_mod$ct_score, decreasing = T),] target_tm_pct <- as.vector(unlist(tm_pct_mod[1:5, 1:2])) tm_n[!tm_n %in% target_tm_pct] <- \"\"  plot_network_CT(ct = tm_pct_mod, filtering = FALSE,                  vertex = list(\"gene_comm\", tm_ptw),                  community = NULL, edge_col_by = \"ct_score\",                  vertex_label = tm_n,                 file_out = \"tm_pct_net.jpeg\") tm_pct.adj <- as_adjacency_matrix(tm_pct_net, attr = \"pct\", sparse = F) tm_pct.adj <- tm_pct.adj[order(rownames(tm_pct.adj)), order(rownames(tm_pct.adj))]  tm_pct.comm <- unlist(lapply(strsplit(rownames(tm_pct.adj), \"_\", fixed = T), \"[[\", 1)) names(tm_pct.comm) <- rownames(tm_pct.adj) tm_ptw_df <- data.frame(tm_ptw = tm_ptw, stringsAsFactors = F) rownames(tm_ptw_df) <- names(tm_ptw) ct_heatmap(ct = tm_pct_mod,             color_by = \"ct_score\",             community = NULL, row_annotation = tm_ptw_df,             column_annotation = tm_ptw_df,             color = c(\"lightyellow\", \"red\"), no_ct_color = \"whitesmoke\",             filtering = F, label_size = 5, col_name_side = \"right\",            width = unit(12, \"cm\"), height = unit(12, \"cm\"))"},{"path":[]},{"path":"/articles/Ulisse_enrich.html","id":"ora","dir":"Articles","previous_headings":"","what":"ORA","title":"ORA and GSEA with Ulisse","text":"ORA performed means function ora(), requires list one gene vectors (wb), reference universe list gene sets test (gsl):","code":"ora_res <- ora(wb = wb, universe = unverse, gsl = gsl)"},{"path":"/articles/Ulisse_enrich.html","id":"gsea","dir":"Articles","previous_headings":"","what":"GSEA","title":"ORA and GSEA with Ulisse","text":"GSEA performed means function gsea(), requires matrix one columns gene-related statistics (rl) list gene sets test (gsl): default, column rl sorted decreasing order.","code":"gsea_res <- gsea(rl=rl, gsl = gsl)"},{"path":"/articles/Ulisse_enrich.html","id":"visualization","dir":"Articles","previous_headings":"","what":"Visualization","title":"ORA and GSEA with Ulisse","text":"functions plot_ora_heatmap() plot_gsea_heatmap() draw heatmaps results ORA GSEA:","code":"plot_ora_heatmap(ora_res, cluster_columns = F, cluster_rows = F, a = .5, na_col = \"gold\") plot_gsea_heatmap(gsea_res = gsea_res, cluster_columns = F, cluster_rows = F, a = .5, na_col = \"gold\")"},{"path":"/articles/Ulisse_enrich.html","id":"inter-operability","dir":"Articles","previous_headings":"","what":"Inter-operability","title":"ORA and GSEA with Ulisse","text":"provide functions ora2enrich() gsea2enrich() obtain instances “enrichResult” class package clusterProfiler:","code":"ora_enrich <- ora2enrich(ora_res, gsl = gsl, wb = wb, universe = unverse) gsea_enrich <- gsea2enrich(gsea_res, rl = rl, gsl = gsl)"},{"path":"/articles/Ulisse_pipeline.html","id":"data-uploading-preparation-and-differential-expression-testing","dir":"Articles","previous_headings":"","what":"Data uploading, preparation and Differential Expression testing","title":"Ulisse pipeline: crosstalk analysis of single cell data","text":"example use Triple Negative Breast Cancer(TNBC) data (Pal et al. 2021). Already processed data can obtained (Chen Smyth 2022).  dataset composed 8 samples integrated Seurat method. Processing data, described detail article, resulted 9 cluster. paper provide cluster annotation, present tnbc object. used SeuratObject_TNBCSub.rds paper plots reconstruct cluster annotation (shown).  obtained cluster annotation, test differential expression (DE) using MAST algorithm. DE results used calculate cluster-specific gene score, defined \\((log_{2}(Fold Change))(-log_{10}(adjusted-p-value))\\). reduce noise, scores genes : \\(adjusted-p-value < 0.05\\) & \\(log2(Fold Change) > 0.5\\) considered, set 0. normalize score maximum value obtain intelligible values.","code":"tnbc <- readRDS(\"17058077/SeuratObject_TNBC.rds\")  DimPlot(tnbc, group.by = \"integrated_snn_res.0.1\") tnbc_ct <- setNames(c(\"Cancer_epi\", \"Tcells\", \"Cancer_epi_cycling\", \"TAM\", \"Plasma_cells\", \"CAF\", \"Bcells\", \"DC\", \"Endothelial\"), 0:8) tnbc$cell_type <- tnbc_ct[as.character(tnbc$integrated_snn_res.0.1)]  ct_pal <- pals::trubetskoy(length(tnbc_ct)) names(ct_pal) <- names(tnbc_ct)  DimPlot(tnbc, group.by = \"cell_type\", cols = ct_pal) #this may take a while #to reduce change the test, the results will be different DEG_tnbc <- FindAllMarkers(tnbc, test = \"MAST\", assay = \"RNA\")  DEG_tnbc$p_adj_BH <- p.adjust(DEG_tnbc$p_val, method = \"BH\") DEG_tnbc$p_adj_BH[DEG_tnbc$p_adj_BH == 0] <- min(DEG_tnbc$p_adj_BH[DEG_tnbc$p_adj_BH != 0]) DEG_tnbc$score <- DEG_tnbc$avg_log2FC * (-log10(DEG_tnbc$p_adj_BH)) DEG_tnbc$score <- DEG_tnbc$score/max(DEG_tnbc$score) #normalize score values DEG_tnbc$score[!(DEG_tnbc$p_adj_BH < 0.05 & DEG_tnbc$avg_log2FC > 0.5)] <- 0 #denoising"},{"path":"/articles/Ulisse_pipeline.html","id":"intracellular-crosstalk","dir":"Articles","previous_headings":"","what":"Intracellular crosstalk","title":"Ulisse pipeline: crosstalk analysis of single cell data","text":"section demonstrate usage Ulisse analyse intracellular crosstalk. , focus Cancer epithelial cell type.","code":""},{"path":"/articles/Ulisse_pipeline.html","id":"inputs","dir":"Articles","previous_headings":"Intracellular crosstalk","what":"Inputs","title":"Ulisse pipeline: crosstalk analysis of single cell data","text":"need: biological network: use String v12, provided within NPAtools package gene scores: use “Cancer_epi” DEGs gene sets: use MsigDB hallmarks, downloaded msigdbr package obtained gene set gene scores, needs coupled (via build_S_list()) build weighted gene set list. point, list can provided Ulisse, together network, perform analysis gs_cross_talk() function. two way use build_S_list(): one shown , gene sets provided table, together named vector weights; shown later vignette.","code":"#biological network data(NAPtools) V(stringv12)$name <- V(stringv12)$symbol #stringv12 names are entry id, but here we need symbols.  #Without this code, the adjacency matrix rownames and colnames will be the entry ids g.adj <- as_adjacency_matrix(stringv12, sparse = F, type = \"both\")  #gene set database, mapped to  string genes hallmarks <- msigdbr(category = \"H\") ptw.H <- data.frame(hallmarks[, c(\"gs_name\", \"gene_symbol\")]) ptw.H <- ptw.H[ptw.H$gene_symbol %in% V(stringv12)$symbol,] g.w <- DEG_tnbc[DEG_tnbc$cluster == \"Cancer_epi\",] g.w <- setNames(g.w$score, g.w$gene)  gs_list <- build_S_list(S_tab = ptw.H, g_u = g.w,  universe = V(stringv12)$symbol, min_size = NULL, max_size = NULL)"},{"path":"/articles/Ulisse_pipeline.html","id":"crosstalk-calculation","dir":"Articles","previous_headings":"Intracellular crosstalk","what":"crosstalk calculation","title":"Ulisse pipeline: crosstalk analysis of single cell data","text":"Now everything ready intracellular crosstalk calculation. , set ct_type = \"intracellular\", function consider overlapping genes, shouldn’t considered avoid using gene-set internal links. return crosstalk table Results can visualized scatterplot, plotting score (s) crosstalk saturation (`r_c``) affected possible. visualization allows prioritize genes percentage affected crosstalks.  Otherwise, can visualize results network. , consider significant interactions set different color fully (r_c = 1) partially (r_c < 1) affected crosstalks.","code":"can_ct <- gs_cross_talk(S_list = gs_list,                         A = g.adj,                          k = 99,                          ct_type = \"intracellular\",                         mc_cores_perm = 2, perm_link = \"degree\", perm_weights = \"degree\", cut_par = NULL, mc_cores_ct = 2) can_ct[1:5, ] #>                        S1_name                         S2_name           c #> 1        HALLMARK_ADIPOGENESIS HALLMARK_ESTROGEN_RESPONSE_LATE 0.011211030 #> 2        HALLMARK_ADIPOGENESIS      HALLMARK_KRAS_SIGNALING_DN 0.025489284 #> 3        HALLMARK_ADIPOGENESIS       HALLMARK_MTORC1_SIGNALING 0.006278995 #> 4        HALLMARK_ADIPOGENESIS         HALLMARK_MYC_TARGETS_V1 0.042996954 #> 5 HALLMARK_ALLOGRAFT_REJECTION      HALLMARK_ANDROGEN_RESPONSE 0.019436802 #>   S1_size S2_size S1_S2_size S2_S1_size dL  L  r_c        u1         u2 #> 1      29      54          2          1  2  8 0.25 0.1429003 0.07845351 #> 2      33      15          1          1  1  1 1.00 0.1129081 0.22575250 #> 3      32      48          1          1  1 20 0.05 0.0741845 0.08464026 #> 4      31      53          1          4  4 16 0.25 0.0741845 0.57959484 #> 5      61      28          1          1  1  5 0.20 0.1308974 0.14848887 #>              S1                   S2           s    pA    pU            p #> 1 ATP5PO;NDUFB7                COX6C 0.014607631 0.111 0.078 0.0497771929 #> 2          MYLK               CALML5 0.079114437 0.015 0.005 0.0007873517 #> 3        ATP5PO                 PPA1 0.003674212 0.248 0.288 0.2599206020 #> 4        ATP5PO RPLP0;RPS2;RPS3;RPS5 0.078286265 0.211 0.010 0.0151098521 #> 5        CDKN2A                CCND1 0.045286442 0.050 0.011 0.0046780758 can_ct$sign <- \"M_A | M_U > 0.01\" can_ct$sign[can_ct$pA < 0.01 | can_ct$pU < 0.01] <- \"M_A | M_U < 0.01\" can_ct$sign[can_ct$pA < 0.01 & can_ct$pU < 0.01] <- \"M_A & M_U < 0.01\"   ggplot(can_ct, aes(x =  r_c, y = s, shape = sign)) +   geom_jitter(position = position_jitter(seed = 1), shape = 21) +   scale_fill_manual(\"\", values = c(\"white\", \"gray70\", \"gray30\"),                      breaks = c(\"M_A | M_U > 0.01\", \"M_A | M_U < 0.01\", \"M_A & M_U < 0.01\")) +   theme_test() can_ct <- can_ct[can_ct$pA < 0.01 | can_ct$pU < 0.01, ] g.ct <- graph_from_data_frame(can_ct, directed = F) ly <- create_layout(g.ct, \"nicely\")  ggraph(g.ct, layout = ly) +   geom_edge_link(aes(color =  sign)) +   scale_edge_color_manual(\"\", values = c(\"gray70\", \"gray30\"),                            breaks = c(\"M_A | M_U < 0.01\", \"M_A & M_U < 0.01\")) +   geom_node_point(shape = 21, fill = \"white\", size = 3) +   theme_graph()"},{"path":"/articles/Ulisse_pipeline.html","id":"crosstalk-gene-classification","dir":"Articles","previous_headings":"Intracellular crosstalk","what":"Crosstalk gene classification","title":"Ulisse pipeline: crosstalk analysis of single cell data","text":"Gene classification analysis performed extracting crosstalk interaction data genes occurring significant crosstalks, comparing reference model, calculate interactor crosstalk diversity saturation. general reference model built data case study, without considering weight differences among genes (, genes u = 1). way, can normalize crosstalk interactor diversity gene affected condition, possibilities. , need perform crosstalk analysis gene classification reference model, use cancer cell gene classification analysis, described . Note , build_S_list() differently, gene sets provided three column table: gene set names, gene names weights. format used genes different weights gene sets (intercellular crosstalk). can visualize saturations crosstalk diversity interactor diversity (r_q r_d, respectively), measure normalized general model, compared absolute values (d_q d_d, respectively). visualization allows identify genes whose interactors crosstalks diversity fully partially affected. can also color genes initial value, identify interesting genes (terms r_q r_d) might prioritized DEG analysis.","code":"ptw.H$score <- 1  gs_list_general <- build_S_list(S_tab = ptw.H, universe = V(stringv12)$symbol, min_size = NULL, max_size = NULL)  general <- gs_cross_talk(S_list = gs_list_general,                           A = g.adj, k = 0,                           ct_type = \"intracellular\",                          mc_cores_perm = 2, perm_link = \"degree\",                           perm_weights = \"degree\", cut_par = NULL,                          mc_cores_ct = 2)  general_cl <- gene_classification(gs_ct = general, A = g.adj, n_cores = 2)   can_class <- gene_classification(gs_ct = caf_ct,#only significant ones                                  A = g.adj,                                   ct_ref = general_cl, #general model for normalization                                  n_cores = 2)  can_class[, 1:5] #>      gene        r_q        r_d d_q d_d #> 1     APP 0.15625000 0.11904762   5   5 #> 2 ATP5F1C 0.05263158 0.14285714   1   4 #> 3  ATP5PO 0.06250000 0.14814815   1   4 #> 4  CALML5 0.13043478 0.04166667   3   1 #> 5   CCND1 0.15625000 0.10000000   5   3 #>                                                                                                                                    d_q_S #> 1 HALLMARK_CHOLESTEROL_HOMEOSTASIS;HALLMARK_ESTROGEN_RESPONSE_LATE;HALLMARK_MTORC1_SIGNALING;HALLMARK_HYPOXIA;HALLMARK_ANDROGEN_RESPONSE #> 2                                                                                                                HALLMARK_MYC_TARGETS_V1 #> 3                                                                                                                HALLMARK_MYC_TARGETS_V1 #> 4                                                   HALLMARK_MYOGENESIS;HALLMARK_ADIPOGENESIS;HALLMARK_EPITHELIAL_MESENCHYMAL_TRANSITION #> 5 HALLMARK_CHOLESTEROL_HOMEOSTASIS;HALLMARK_P53_PATHWAY;HALLMARK_TGF_BETA_SIGNALING;HALLMARK_UV_RESPONSE_UP;HALLMARK_ALLOGRAFT_REJECTION #>                  d_d_gene  q  d #> 1 DBI;KLK11;LSR;CLU;GAPDH 32 42 #> 2    RPLP0;RPS2;RPS3;RPS5 19 28 #> 3    RPLP0;RPS2;RPS3;RPS5 16 27 #> 4                    MYLK 23 24 #> 5    CDKN2A;CTNNB1;CDKN2B 32 30 #>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              q_S #> 1 HALLMARK_APICAL_JUNCTION;HALLMARK_BILE_ACID_METABOLISM;HALLMARK_CHOLESTEROL_HOMEOSTASIS;HALLMARK_COAGULATION;HALLMARK_COMPLEMENT;HALLMARK_EPITHELIAL_MESENCHYMAL_TRANSITION;HALLMARK_ESTROGEN_RESPONSE_EARLY;HALLMARK_ESTROGEN_RESPONSE_LATE;HALLMARK_FATTY_ACID_METABOLISM;HALLMARK_GLYCOLYSIS;HALLMARK_HEDGEHOG_SIGNALING;HALLMARK_HEME_METABOLISM;HALLMARK_HYPOXIA;HALLMARK_IL2_STAT5_SIGNALING;HALLMARK_INFLAMMATORY_RESPONSE;HALLMARK_KRAS_SIGNALING_DN;HALLMARK_MTORC1_SIGNALING;HALLMARK_NOTCH_SIGNALING;HALLMARK_OXIDATIVE_PHOSPHORYLATION;HALLMARK_PEROXISOME;HALLMARK_PI3K_AKT_MTOR_SIGNALING;HALLMARK_REACTIVE_OXYGEN_SPECIES_PATHWAY;HALLMARK_SPERMATOGENESIS;HALLMARK_UNFOLDED_PROTEIN_RESPONSE;HALLMARK_UV_RESPONSE_DN;HALLMARK_UV_RESPONSE_UP;HALLMARK_WNT_BETA_CATENIN_SIGNALING;HALLMARK_XENOBIOTIC_METABOLISM;HALLMARK_IL6_JAK_STAT3_SIGNALING;HALLMARK_ADIPOGENESIS;HALLMARK_ALLOGRAFT_REJECTION;HALLMARK_ANDROGEN_RESPONSE #> 2                                                                                                                                                                                                                                                                                                                                                                                                           HALLMARK_P53_PATHWAY;HALLMARK_PROTEIN_SECRETION;HALLMARK_TNFA_SIGNALING_VIA_NFKB;HALLMARK_UNFOLDED_PROTEIN_RESPONSE;HALLMARK_XENOBIOTIC_METABOLISM;HALLMARK_ADIPOGENESIS;HALLMARK_ALLOGRAFT_REJECTION;HALLMARK_BILE_ACID_METABOLISM;HALLMARK_DNA_REPAIR;HALLMARK_E2F_TARGETS;HALLMARK_ESTROGEN_RESPONSE_LATE;HALLMARK_GLYCOLYSIS;HALLMARK_HEME_METABOLISM;HALLMARK_INTERFERON_ALPHA_RESPONSE;HALLMARK_INTERFERON_GAMMA_RESPONSE;HALLMARK_KRAS_SIGNALING_DN;HALLMARK_MTORC1_SIGNALING;HALLMARK_MYC_TARGETS_V1;HALLMARK_MYC_TARGETS_V2 #> 3                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         HALLMARK_ALLOGRAFT_REJECTION;HALLMARK_DNA_REPAIR;HALLMARK_E2F_TARGETS;HALLMARK_ESTROGEN_RESPONSE_LATE;HALLMARK_FATTY_ACID_METABOLISM;HALLMARK_HEME_METABOLISM;HALLMARK_HYPOXIA;HALLMARK_KRAS_SIGNALING_DN;HALLMARK_MTORC1_SIGNALING;HALLMARK_MYC_TARGETS_V1;HALLMARK_P53_PATHWAY;HALLMARK_PROTEIN_SECRETION;HALLMARK_TNFA_SIGNALING_VIA_NFKB;HALLMARK_UNFOLDED_PROTEIN_RESPONSE;HALLMARK_UV_RESPONSE_UP;HALLMARK_XENOBIOTIC_METABOLISM #> 4                                                                                                                                                                                                                                                                                                                       HALLMARK_MTORC1_SIGNALING;HALLMARK_MYC_TARGETS_V1;HALLMARK_MYOGENESIS;HALLMARK_P53_PATHWAY;HALLMARK_PEROXISOME;HALLMARK_PI3K_AKT_MTOR_SIGNALING;HALLMARK_PROTEIN_SECRETION;HALLMARK_SPERMATOGENESIS;HALLMARK_TGF_BETA_SIGNALING;HALLMARK_UNFOLDED_PROTEIN_RESPONSE;HALLMARK_UV_RESPONSE_DN;HALLMARK_ADIPOGENESIS;HALLMARK_ALLOGRAFT_REJECTION;HALLMARK_ANDROGEN_RESPONSE;HALLMARK_APICAL_JUNCTION;HALLMARK_APOPTOSIS;HALLMARK_COMPLEMENT;HALLMARK_EPITHELIAL_MESENCHYMAL_TRANSITION;HALLMARK_ESTROGEN_RESPONSE_EARLY;HALLMARK_ESTROGEN_RESPONSE_LATE;HALLMARK_FATTY_ACID_METABOLISM;HALLMARK_GLYCOLYSIS;HALLMARK_HYPOXIA #> 5                                                HALLMARK_ANGIOGENESIS;HALLMARK_APICAL_JUNCTION;HALLMARK_BILE_ACID_METABOLISM;HALLMARK_CHOLESTEROL_HOMEOSTASIS;HALLMARK_DNA_REPAIR;HALLMARK_E2F_TARGETS;HALLMARK_GLYCOLYSIS;HALLMARK_HEME_METABOLISM;HALLMARK_HYPOXIA;HALLMARK_IL2_STAT5_SIGNALING;HALLMARK_IL6_JAK_STAT3_SIGNALING;HALLMARK_INFLAMMATORY_RESPONSE;HALLMARK_INTERFERON_GAMMA_RESPONSE;HALLMARK_KRAS_SIGNALING_UP;HALLMARK_MITOTIC_SPINDLE;HALLMARK_MTORC1_SIGNALING;HALLMARK_MYC_TARGETS_V1;HALLMARK_MYC_TARGETS_V2;HALLMARK_MYOGENESIS;HALLMARK_P53_PATHWAY;HALLMARK_PI3K_AKT_MTOR_SIGNALING;HALLMARK_REACTIVE_OXYGEN_SPECIES_PATHWAY;HALLMARK_SPERMATOGENESIS;HALLMARK_TGF_BETA_SIGNALING;HALLMARK_UNFOLDED_PROTEIN_RESPONSE;HALLMARK_UV_RESPONSE_DN;HALLMARK_UV_RESPONSE_UP;HALLMARK_WNT_BETA_CATENIN_SIGNALING;HALLMARK_XENOBIOTIC_METABOLISM;HALLMARK_HEDGEHOG_SIGNALING;HALLMARK_ADIPOGENESIS;HALLMARK_ALLOGRAFT_REJECTION #>                                                                                                                                                                                                                                                d_gene #> 1 APLP2;APOE;ACHE;APBB1;TGFB2;DBI;TNFRSF21;CNTN1;GNAI2;CLU;CASP6;PSEN1;APOA1;TTR;APOC2;APOC3;F11;APOC1;GNG2;PRSS3;PLA2G7;APOA4;PRSS2;MAPT;LSR;KLK11;HSD17B10;SNCA;FOXO3;HEBP1;GAPDH;PRNP;SELENOS;CALR;APH1A;PSENEN;IDE;APOM;APBB2;MAPK8IP2;LCAT;NCSTN #> 2                                                                                   CMPK1;MRPL3;RPL3L;RPL9;RPS9;CD74;ABCG4;AK3;POLR2C;POLR1C;HPRT1;SEC61A1;CDCA8;LHPP;ABCG2;ATP6V1B1;PPA1;RPS2;RPS3;RPS5;RPLP0;TUFM;KARS1;MRTO4;RPS14;IMP3;KDM6B;EI24 #> 3                                                                             MRPL3;RPL9;RPS9;HPRT1;SEC61A1;CDCA8;COX6C;SDHD;ATP6V0A1;ACKR3;ATP6V1B1;ATP5MC1;ATP6V1D;PPA1;RPS2;RPS3;RPS5;RPLP0;TUFM;COX5A;KARS1;ATP6V1F;RPS14;IMP3;SLC25A3;RER1;KDM6B #> 4                                                                                                MYLK;NOS2;CAMKK2;HRAS;PLCG1;CAV1;PPP3R1;CALM3;ADCY1;HSP90AA1;PYGB;PYGL;PHKA2;CACNA1H;PYGM;HSP90B1;HSP90AB1;CAMK2B;CAV3;CAMK4;PPP1CA;ITPR2;CAV2;PHKG2 #> 5                                                                    CDKN2C;CCND2;CDKN2A;CCND3;CDK6;SYMPK;CTNNB1;CDK2;CDKN1B;CDKN1A;AR;PCNA;CDK1;CDC25A;CDK4;CKS1B;FOS;CUL1;KAT2B;CDKN1C;STAT3;FBXO4;TOR1AIP2;GSK3B;RB1;CDKN2B;HDAC3;CDKN2D;SKP2;ESR1 can_class$u <- g.w[can_class$gene]  p1 <- ggplot(can_class, aes(x =  r_q, y = d_q, label = gene, colour = u)) +   geom_jitter(position = position_jitter(seed = 1), size = 0.5) +   ggrepel::geom_text_repel(position = position_jitter(seed = 1), size = 2, color = \"black\") +   scale_color_gradientn(colours = pals::brewer.greys(6)[2:6]) +   theme_test()   p2 <- ggplot(can_class, aes(x = r_d, y = d_d, label = gene, colour = u)) +   geom_jitter(position = position_jitter(seed = 1), size = 0.5) +   ggrepel::geom_text_repel(position = position_jitter(seed = 1), size = 2, color = \"black\") +   scale_color_gradientn(colours = pals::brewer.greys(6)[2:6]) +   theme_test()  p1 + p2 + plot_layout(guides = 'collect')"},{"path":[]},{"path":"/articles/Ulisse_pipeline.html","id":"input-omnipath-communication-network","dir":"Articles","previous_headings":"Intercellular Communication","what":"input: omnipath communication network","title":"Ulisse pipeline: crosstalk analysis of single cell data","text":"described , need communication network communication analysis. use OmnipathR package download intercellular network. data reported ones used publication (downloaded September, 2024). Later updates Omnipath database may yield different results.","code":"intercell_net <- import_intercell_network(interactions_param = list(\"datasets\" = \"omnipath\"),                                           transmitter_param = list(                                             categories = c('ligand')),                                           receiver_param = list(                                             categories =c('receptor')), entity_types = \"protein\")  g.intercell <- graph_from_edgelist(as.matrix(unique(intercell_net[,c(\"source_genesymbol\", \"target_genesymbol\")])),                                    directed = F) g.adj_intercell <- as_adjacency_matrix(g.intercell, sparse = F, type = \"both\")"},{"path":"/articles/Ulisse_pipeline.html","id":"cell-cell-communication-analysis","dir":"Articles","previous_headings":"Intercellular Communication","what":"cell-cell communication analysis","title":"Ulisse pipeline: crosstalk analysis of single cell data","text":"obtained input, can build weighted gene-set list. described , use build_S_list() providing gene sets three column table. way, can build gene set cell type, different weights genes. specifying ct_type = \"communication\", gs_cross_talk() function consider genes shared among gene sets calculation, genes different cell types different score, return also list interacting genes tables, one cell type pair. output list two object: * results crosstalk calculation list, table cell type pair detail interactions. communication network can visualized overlapped map cells using plot_communication_network(). use significant communication (\\(\\alpha\\) < 0.01).","code":"tnbc_list <- build_S_list(S_tab = DEG_tnbc[, c(\"cluster\", \"gene\", \"score\")],                            universe = V(g.intercell)$name,                            min_size = NULL, max_size = NULL)  tnbcCCC <- gs_cross_talk(S_list = tnbc_list,                           A = g.adj_intercell,                           k = 99,                           ct_type = \"communication\",                          mc_cores_perm = 2, perm_link = \"degree\", perm_weights = \"degree\",                           cut_par = NULL,                          mc_cores_ct = 2) tnbcCCC$ct_res[1:5,] #>   S1_name            S2_name          c S1_size S2_size S1_S2_size S2_S1_size #> 1  Bcells                CAF 0.62820171     246     312         11         23 #> 2  Bcells         Cancer_epi 0.06259519     246     240          5          4 #> 3  Bcells Cancer_epi_cycling 0.26639117     246     201         14          3 #> 4  Bcells                 DC 0.58259489     246     286         23         22 #> 5  Bcells        Endothelial 0.19706308     246     354         13         30 #>   dL   L        r_c        u1        u2 #> 1 25 418 0.05980861 1.8159851 5.2910707 #> 2  6 425 0.01411765 0.7316357 0.3078850 #> 3 14 367 0.03814714 2.6078636 0.2809384 #> 4 61 475 0.12842105 3.5281022 1.1899466 #> 5 33 523 0.06309751 1.4711100 2.4289122 #>                                                                                                                                                                     S1 #> 1                                                                                                  TGFB1;SELL;CXCR4;CD69;PTPRC;HLA-DRA;EZR;PTPN6;HLA-DPA1;HLA-DRB1;LTB #> 2                                                                                                                                       TGFB1;CD74;CXCR4;TNFRSF14;CD69 #> 3                                                        HLA-DQB1;HLA-DPB1;HLA-DRA;HLA-DPA1;HLA-DRB1;HLA-DQA1;HLA-DOB;HLA-DMA;HLA-DMB;HLA-DRB5;CD74;CXCR4;TNFRSF14;EZR #> 4 HLA-DMA;HLA-DMB;PTPN6;CD37;CD19;CD53;HLA-DQB1;HLA-DPB1;HLA-DRA;HLA-DPA1;HLA-DRB1;HLA-DQA1;HLA-DOB;HLA-DRB5;IL16;CD40;TGFB1;TNFRSF13C;TNFRSF13B;CD74;CXCR4;CSK;ADGRE5 #> 5                                                                                            PTPN6;CSK;SELL;PLCG2;TGFB1;HLA-DRA;HLA-DRB1;EZR;LTB;CXCR4;PTPRC;CCR6;CD53 #>                                                                                                                                                                                 S2 #> 1                                            DCN;MMP2;FSTL1;VCAN;CXCL12;MYL9;THBS1;LGALS1;CD63;MXRA5;ITGB1;VCAM1;SDC2;ITGAV;IL6ST;CXCL14;ITGB5;LPP;TGFBR2;GAL;CD81;TNFRSF1A;TGFBR3 #> 2                                                                                                                                                            APP;MIF;CXCL14;S100A8 #> 3                                                                                                                                                                   CTSV;MIF;ICAM1 #> 4                                            CD74;CSF2RB;HLA-DRA;CD4;LTB;HLA-DRB1;CD37;CTSS;CXCR4;LYN;TNFSF13B;CD53;HLA-DMB;SYK;TNFSF9;HLA-DMA;HLA-C;LGMN;TGFBR2;TGFB1;PECAM1;CD55 #> 5 PECAM1;CD34;INSR;KDR;ACVRL1;TGFBR2;IL6ST;CD81;MMP2;FSTL1;ITGB1;APP;LIFR;VCAM1;TNFRSF1A;CXCL12;TGFBR3;THBS1;CSF2RB;ITGAV;LGALS9;TGFB1;CD63;JAK1;BCR;TNFSF10;HLA-C;LPP;CD109;ICAM1 #>            s    pA    pU            p #> 1 0.61295845 0.954 0.023 1.057462e-01 #> 2 0.02719497 0.913 0.128 3.677411e-01 #> 3 0.96603045 0.020 0.001 2.363956e-04 #> 4 2.81351583 0.001 0.001 1.481551e-05 #> 5 0.02875915 0.998 0.348 7.145970e-01 tnbcCCC$ct_info$`CAF|Cancer_epi_cycling`[1:5,] #>   S1_name S1_gene            S2_name S2_gene         u12 #> 1     CAF    DDR1 Cancer_epi_cycling    CDK1 0.000000000 #> 2     CAF    DDR1 Cancer_epi_cycling  TM4SF1 0.000000000 #> 3     CAF    PLAT Cancer_epi_cycling   ANXA2 0.016909091 #> 4     CAF  LGALS3 Cancer_epi_cycling   ANXA2 0.000000000 #> 5     CAF    APOE Cancer_epi_cycling     LSR 0.002431027 ccc_res <- tnbcCCC$ct_res ccc_res <- ccc_res[ccc_res$pA < 0.01 | ccc_res$pU < 0.01, ]  cl_cell <- data.frame(cell = rownames(tnbc@meta.data),                       cluster = tnbc$cell_type, stringsAsFactors = F)  plot_communication_network(cell_emb = tnbc@reductions$tsne@cell.embeddings,                             cl_res = ccc_res,                             cl_cell = cl_cell,                             palette = ct_pal, #palette built at the beginning of the vignette                             e_scale = 9, label = T,                            save_file = NULL)"},{"path":"/articles/Ulisse_pipeline.html","id":"ct-gene-classification","dir":"Articles","previous_headings":"Intercellular Communication","what":"CT gene classification","title":"Ulisse pipeline: crosstalk analysis of single cell data","text":", communication analysis, reference model built using cell type, tested genes without weights (u = 1). way, can normalize number crosstalk interactor gene affected condition, possibilities. , need perform crosstalk analysis gene classification reference model, use TNBC communication gene classification analysis, described . Now can plot saturation interactor diversity crosstalk diversity compared absolute values, prioritize genes, done Intracellular crosstalk section","code":"DEG_tnbc_mod <- DEG_tnbc DEG_tnbc_mod$score <- 1 #to consider all genes with same weigths  tnbc_general <- build_S_list(S_tab = DEG_tnbc_mod[, c(\"cluster\", \"gene\", \"score\")],                               universe = V(g.intercell)$name, min_size = NULL, max_size = NULL)  general_tnbcCCC <- gs_cross_talk(S_list = tnbc_general,                                   A = g.adj_intercell,                                   k = 0,                                   ct_type = \"communication\",                                  mc_cores_perm = 2, mc_cores_ct = 2,                                  perm_link = \"degree\", perm_weights = \"degree\", cut_par = NULL) #geneal CCC model  general_cl <- gene_classification(gs_ct = general_tnbcCCC$ct_res,                                    A = g.adj_intercell, n_cores = 2) #general gene classification of CCC genes  fr.tnbc <- gene_classification(gs_ct = ccc_res, #only significant communications                                A = g.adj_intercell,                                 ct_ref = general_cl, #general gene classification to calculate degree ratio and crosstalk activity                                n_cores = 2) fr.tnbc[, 1:5] #>     gene       r_q r_d d_q d_d             d_q_S #> 1  ACKR1 0.3750000   1   3  14    TAM;Tcells;CAF #> 2  ACTR2 0.3333333   1   1   1       Endothelial #> 3 ACVRL1 0.4444444   1   4   2 TAM;Tcells;CAF;DC #> 4 ADAM15 0.1250000   1   1   1            Tcells #> 5 ADGRE5 0.5000000   1   2   1         DC;Bcells #>                                                                             d_d_gene #> 1 CXCL9;CXCL10;CCL2;CXCL2;CXCL1;CXCL11;CCL13;CCL7;CXCL8;CCL5;CXCL13;CCL18;CXCL3;CCL8 #> 2                                                                               LDLR #> 3                                                                        TGFB1;TGFB3 #> 4                                                                                FYN #> 5                                                                               CD55 #>   q  d #> 1 8 14 #> 2 3  1 #> 3 9  2 #> 4 8  1 #> 5 4  1 #>                                                                               q_S #> 1             Plasma_cells;TAM;Tcells;Bcells;CAF;Cancer_epi;Cancer_epi_cycling;DC #> 2                                                 Endothelial;Plasma_cells;Bcells #> 3 Cancer_epi;Cancer_epi_cycling;DC;Endothelial;Plasma_cells;TAM;Tcells;Bcells;CAF #> 4     Cancer_epi;Cancer_epi_cycling;DC;Endothelial;Plasma_cells;TAM;Tcells;Bcells #> 5                                                      DC;Plasma_cells;TAM;Bcells #>                                                                               d_gene #> 1 CCL5;CXCL2;CXCL9;CXCL10;CCL2;CXCL1;CXCL8;CXCL11;CCL13;CCL7;CCL8;CXCL13;CCL18;CXCL3 #> 2                                                                               LDLR #> 3                                                                        TGFB1;TGFB3 #> 4                                                                                FYN #> 5                                                                               CD55 p1 <- ggplot(fr.tnbc, aes(x = r_q, y = d_q, label = gene)) +   geom_jitter(position = position_jitter(seed = 1), size = 0.5) +   ggrepel::geom_text_repel(position = position_jitter(seed = 1), size = 2) +   theme_test()   p2 <- ggplot(fr.tnbc, aes(x = r_d, y = d_d, label = gene)) +   geom_jitter(position = position_jitter(seed = 1), size = 0.5) +   ggrepel::geom_text_repel(position = position_jitter(seed = 1), size = 2) +   theme_test()   p1 + p2"},{"path":"/articles/Ulisse_pipeline.html","id":"integrated-crosstalk","dir":"Articles","previous_headings":"","what":"Integrated crosstalk","title":"Ulisse pipeline: crosstalk analysis of single cell data","text":"Lastly, can perform integrated crosstalk analysis, study interaction genes involved communication cell type intracellular mechanisms (pathways). , study cancer - CAF communication crosstalk Hallmarks pathways. can perform analysis two ways: Single integrated analysis: focused cancer genes involved communication CAFs, crosstalks Hallmarks pathways involving altered genes Integrated analysis: focused multiple inter-intracellular crosstalks. apply analysis cancer-CAF communication, obtain results directions analysis, can filter results maintain significant ones, done intercellular intracellular.","code":""},{"path":"/articles/Ulisse_pipeline.html","id":"single-integrated-analysis","dir":"Articles","previous_headings":"Integrated crosstalk","what":"Single integrated analysis","title":"Ulisse pipeline: crosstalk analysis of single cell data","text":"perform analysis simply need data already used intracellular intercellular crosstalks. detail, need cancer communication gene set, considering altered (u > 0) genes involved communication CAFs, pathway gene set list created intracellular communication. single_integrated_cross_talk() takes input gene set list, composed inputs, name communicating gene set (ref), biological network (use String, done intrecellular section). function returns table structure ones obtained gs_cross_talk(). , S1 always communication gene set (\"Cancer_epi\" case), function calculate crosstalk possible pair, rerun intracellular analysis complicate null models building.","code":"ccc_info <- tnbcCCC$ct_info[[\"CAF|Cancer_epi\"]] can_ccc <- tnbc_list$Cancer_epi can_ccc[!names(can_ccc) %in% unique(ccc_info$S2_gene[ccc_info$u12 > 0])] <- 0 gs_list_int <- gs_list gs_list_int[[\"Cancer_epi\"]] <- can_ccc  integr_can <- single_integrated_cross_talk(S_list = gs_list_int, #Hallmark gene set list built for intracellular analysis                                            ref = \"Cancer_epi\", #name of the communication gene set                                            A = g.adj, #String used for intracellular analysis                                            k = 99,                                             perm_link = \"degree\", perm_weights = \"degree\",                                             cut_par = NULL, mc_cores_perm = 2, mc_cores_ct = 2) integr_can[1:5, ] #>       S1_name                          S2_name          c S1_size S2_size #> 11 Cancer_epi     HALLMARK_ALLOGRAFT_REJECTION 0.01775875     200      31 #> 12 Cancer_epi       HALLMARK_ANDROGEN_RESPONSE 0.01993079     229      27 #> 13 Cancer_epi               HALLMARK_APOPTOSIS 0.01055460     213      38 #> 14 Cancer_epi HALLMARK_CHOLESTEROL_HOMEOSTASIS 0.02550742     229      13 #> 15 Cancer_epi             HALLMARK_COAGULATION 0.01495281     225      18 #>    S1_S2_size S2_S1_size dL  L        r_c         u1         u2        S1 #> 11          1          2  2 66 0.03030303 0.08581545 0.20694122      RPSA #> 12          2          1  2 29 0.06896552 0.19987201 0.09971779   APP;LSR #> 13          1          1  1 39 0.02564103 0.13183863 0.08005698     PTPRF #> 14          2          2  2 16 0.12500000 0.25920987 0.19745251 APP;PTPRF #> 15          1          1  1 28 0.03571429 0.12737124 0.11739553       APP #>             S2          s    pA    pU            p #> 11 RPL39;RPS19 0.04759216 0.111 0.002 2.089649e-03 #> 12         DBI 0.06587219 0.045 0.001 4.953982e-04 #> 13      CTNNB1 0.02288445 0.140 0.006 6.788971e-03 #> 14  CLU;CTNNB1 0.10891385 0.004 0.001 5.371686e-05 #> 15         CLU 0.03774268 0.083 0.004 2.991445e-03"},{"path":"/articles/Ulisse_pipeline.html","id":"integrated-analysis","dir":"Articles","previous_headings":"Integrated crosstalk","what":"Integrated analysis","title":"Ulisse pipeline: crosstalk analysis of single cell data","text":"perform analysis need: results cell-cell communication, form list detail communication want study (CAF - Cancer cycling) weighted gene set lists: need gene set built cell-cell communication, also intracellular gene sets. far analyzed cancer intracellular crosstalk, need obtain CAF list. biological network: use string network, . integrated_cross_talk() function wrapper single_integrated_cross_talk(), run analysis communication present ccc_list, directions, returns table integrated analysis performed. discriminate different communicating gene sets, first column contains name fo ccc_list object used","code":"# 1) communication results: a list with details of all communications we want to investigate ccc_info <- tnbcCCC$ct_info[\"CAF|Cancer_epi\"]   # 2) gene set list: we are missing Cancer cycling ones, so we built it as done for CAF g.wCaf <- DEG_tnbc[DEG_tnbc$cluster == \"CAF\",] g.wCaf <- setNames(g.wCaf$score, g.wCaf$gene)  gs_listCaf <- build_S_list(S_tab = ptw.H[, 1:2], g_u = g.wCaf,  universe = V(stringv12)$symbol, min_size = NULL, max_size = NULL)  #here is the list both intracellular gene set lists gs_list_tot <- list(CAF = gs_listCaf,                     Cancer_epi = gs_list)   integrated_tnbc <- integrated_cross_talk(cl_list = tnbc_list, #CCC gene sets list                                          ccc_list = ccc_info, #CCC detailed results of the communications of interest                                          gs_list = gs_list_tot, #intracellular gene set lists                                          A = g.adj, #biological network                                          k = 99, mc_cores_perm = 2, mc_cores_ct = 2,                                          perm_link = \"degree\", perm_weights = \"degree\", cut_par = NULL)                                      integrated_tnbc[1:5, ] #>                       ccc S1_name                      S2_name          c #> 52 CAF|Cancer_epi_cycling     CAF        HALLMARK_ADIPOGENESIS 0.14920848 #> 53 CAF|Cancer_epi_cycling     CAF HALLMARK_ALLOGRAFT_REJECTION 0.52238288 #> 54 CAF|Cancer_epi_cycling     CAF   HALLMARK_ANDROGEN_RESPONSE 0.06300081 #> 55 CAF|Cancer_epi_cycling     CAF        HALLMARK_ANGIOGENESIS 1.92839471 #> 56 CAF|Cancer_epi_cycling     CAF     HALLMARK_APICAL_JUNCTION 0.26458631 #>    S1_size S2_size S1_S2_size S2_S1_size dL  L       r_c        u1        u2 #> 52     301      44          4          2  4 30 0.1333333 0.8481891 0.2531009 #> 53     276      21          7          2  7 38 0.1842105 1.2819973 0.6212551 #> 54     302      34          3          1  3 29 0.1034483 0.3717228 0.1694833 #> 55     293       4          8          3  9 15 0.6000000 2.4254667 1.7978163 #> 56     283      44          5          5  6 55 0.1090909 0.9155698 0.6608048 #>                                                   S1 #> 52                            ITGB1;MMP2;ITGAV;ITGA5 #> 53        ITGB1;ITGB5;ITGA5;MMP2;CD63;MMP14;TNFRSF1A #> 54                                 ITGB1;ITGB5;ITGA5 #> 55 DCN;COL6A3;ITGB1;COL16A1;MMP2;CD63;MMP14;TNFRSF1A #> 56                       ITGB5;ITGA5;LUM;APOE;TUBA1A #>                             S2          s   pA   pU           p #> 52                CD151;COL4A1 0.23232204 0.43 0.01 0.027731303 #> 53                  FLNA;TIMP1 1.42112231 0.02 0.01 0.001903439 #> 54                       ACTN1 0.08860062 0.65 0.01 0.039233695 #> 55         COL3A1;COL5A2;TIMP1 5.76775101 0.01 0.01 0.001021034 #> 56 ACTN1;FBN1;PARVA;TGFBI;TJP1 0.37063518 0.33 0.02 0.039736525"},{"path":[]},{"path":"/articles/Ulisse_sc.html","id":"preparation-of-the-inputs","dir":"Articles","previous_headings":"","what":"Preparation of the inputs","title":"Ulisse workflow 2: Cell-cell cross-talk analysis on single cell data","text":"Firstly see prepare inputs using Ulisse’s functions. cell gene sets derive cell type cell clusters single cell sample (multiple integrated samples), intercellular network provided., use Omnipath communication network (Türei et al. 2021), resources can used. take care Ulisse uses undirected biological network considers sub-units.","code":""},{"path":"/articles/Ulisse_sc.html","id":"ligand-receptor-network","dir":"Articles","previous_headings":"Preparation of the inputs","what":"Ligand-receptor network","title":"Ulisse workflow 2: Cell-cell cross-talk analysis on single cell data","text":"code download Omnipath intercellualr communications, used build intercellualr network using igraph package functions.","code":"intercell_net <- import_intercell_network(interactions_param = list(\"datasets\" = \"omnipath\"),                                           transmitter_param = list(                                             categories = c('ligand')),                                           receiver_param = list(                                             categories =c('receptor')),                                            entity_types = \"protein\") g.intercell <- unique(intercell_net[,c(\"source_genesymbol\", \"target_genesymbol\")]) g.intercell <- graph_from_edgelist(as.matrix(g.intercell),                                     directed = F)"},{"path":"/articles/Ulisse_sc.html","id":"pre-processing-with-seurat-pipeline","dir":"Articles","previous_headings":"Preparation of the inputs","what":"Pre-processing with Seurat pipeline","title":"Ulisse workflow 2: Cell-cell cross-talk analysis on single cell data","text":"explain functioning intercellular cross-talk calculation implemented Ulisse use one samples sequenced Wu et al. (Wu et al. 2021). study, authors analyse 26 single cell breast cancer samples, composed tumoral normal cells composing microenvironment. data can downloaded https://singlecell.broadinstitute.org/single_cell/study/SCP1039 GEO website accession GSE176078. particular, study intercellular cross-talk sample CID4515. code can used read 10x data pre-process obtain dimensionality reduction Seurat v4 package (Hao et al. 2021). study cell-cell communication among cell-types provided authors, pipeline can applied also clusters. metadata.csv file cell-types identification provided authors (can downloaded https://singlecell.broadinstitute.org/single_cell/study/SCP1039). uploading , can use information plot UMAP cell type.","code":"data <- ReadMtx(mtx = \"CID4515/count_matrix_sparse.mtx\",                  cells = \"CID4515/count_matrix_barcodes.tsv\",                 features = \"CID4515/count_matrix_genes.tsv\" ) data <- data[which(rowSums(sign(data)) >= 5),] data <- CreateSeuratObject(counts = data, min.cells = 0, min.features = 0) data <- NormalizeData(data) data <- ScaleData(data) data <- RunPCA(data) data <- RunUMAP(data, dims = 1:10) meta <- read.csv(\"CID44991/metadata.csv\", sep = \",\", stringsAsFactors = F) meta[1:5,] data@meta.data <- cbind(data@meta.data, meta[match(rownames(data@meta.data), meta$X),]) data$celltype_major <- factor(data$celltype_major, levels = unique(data$celltype_major))  pal_ct <- viridis::turbo(9) names(pal_ct) <- sort(unique(data$celltype_major))  DimPlot(data, reduction = \"umap\", group.by = \"celltype_major\", label = T,  cols = pal_ct)"},{"path":"/articles/Ulisse_sc.html","id":"intercellular-cross-talk-analysis","dir":"Articles","previous_headings":"","what":"Intercellular cross-talk analysis","title":"Ulisse workflow 2: Cell-cell cross-talk analysis on single cell data","text":"Ulisse provides two methods study intercellular cross-talk, one uses expression data uses Differentially Expressed Genes (DEG) data. exemplify usage approaches, compare obtained results.","code":""},{"path":"/articles/Ulisse_sc.html","id":"expression-data","dir":"Articles","previous_headings":"Intercellular cross-talk analysis","what":"Expression data","title":"Ulisse workflow 2: Cell-cell cross-talk analysis on single cell data","text":"case, cell-type marker genes sued cell-type gene sets obtained normalized count matrix. preparing_cl_list() takes inputs: normalized gene counts matrix (mtx); cell type affiliation cell count matrix (clusters); gene interest (universe); two threshold (mean_t cell_t) filter data remove noise. function uses mean_t identify expressed genes normalized expression matrix: gene cell value equal higher threshold set 1, 0 otherwise. Subsequently, function uses binarized expression matrix calculate gene cell-type frequency expressed least cell_t cells. genes universe considered, genes present LR network. suggest identifying mean_t considering mean expression gene calculated non-zero values. Instead, cell_t can set considering filtering used remove low expressed genes beginning Seurat pipeline. code can used assess expression threshold.  Considering summary mean_g histogram , decide use 0.65 mean_t (red line histogram). decided value lays past high frequency values distribution thus allows filter low common values, maintaining high ones. cell threshold use threshold used pre-processing.","code":"mean_norm <- data@assays$RNA@data mean_norm[which(mean_norm == 0)] <- NA mean_g <- rowMeans(mean_norm, na.rm = T)  summary(mean_g) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>  0.1906  0.5091  0.6242  0.7346  0.8295  5.4092 hist(mean_g, breaks = 100) abline(v=0.65, col = \"red\") universe <- V(g.intercell)$name ct_list <- preparing_expr_list(mtx = data@assays$RNA@data,                                 clusters = data$celltype_major,                                 mean_t = 0.65,                                 cell_t = 5,                                universe = universe) head(ct_list[[1]]) #>   TNFRSF4  TNFRSF14      ENO1    AGTRAP  TNFRSF1B     EPHA2  #> 0.2377049 0.2049180 0.7704918 0.1885246 0.2459016 0.1147541"},{"path":"/articles/Ulisse_sc.html","id":"communication-analysis","dir":"Articles","previous_headings":"Intercellular cross-talk analysis > Expression data","what":"Communication analysis","title":"Ulisse workflow 2: Cell-cell cross-talk analysis on single cell data","text":"required inputs now ready analyse intercellular cross-talk gs_cross_talk() function. function requires also additional parameter: k corresponds number permutation needed , together original matrix, used calculation p-value FDR. case use 49 permutation , together real one, correspond total 50 permuted list cell type pair, thus minimal p-value can observed 1/50 0.02; shared set TRUE enable possible overlapping gene-lists cell-type pair. Different cells may express genes, moreover considering clusters, may represents different states cell-type. shared genes may represents intracellular communication, cells cell-pair express genes, impossible discern autocrine paracrine communication. Thus, important consider also intercellular cross-talk; hash: logical, used speed-calculation lots gene-sets used. , low cell-type numbers, suggest set FALSE; ct_info: logical, detail gene-gene interaction gene-set returned. might highly important cell-cell cross-talk, set TRUE. enabling parameter, output function two-element list, fist (ct_info) table gene communications two cell types; second (ct_res) table intercellular cross-talk results. Note cumulative score cell type pair equal sum gene pair scores ct _info. mc_cores_perm mc_cores_ct control parallelization function intercellular cross-talk calculation permutation, respectively. aware mc_cores_perm multiplies mc_cores_ct. Parallelization useful reduce computational time calculation improves amount memory needed.","code":"LR.adj <- as_adjacency_matrix(g.intercell, sparse = F)  expr_ccc <- gs_cross_talk(gs_list = cl_list,                           gene_network_adj = LR.adj,                           k = 49,                            shared = T,                            ct_info = T,                            hash = F,                           mc_cores_perm = 1, mc_cores_ct = 1)  expr_ccc$communications_info[1:5,] expr_ccc$cc_communications[1:5,]"},{"path":"/articles/Ulisse_sc.html","id":"intercellular-cross-talk-visualization","dir":"Articles","previous_headings":"Intercellular cross-talk analysis > Expression data","what":"Intercellular cross-talk visualization","title":"Ulisse workflow 2: Cell-cell cross-talk analysis on single cell data","text":"Intercellular cross-talk results can filtered maintain significant ones. results can visualized using Ulisse package functions. code can used plot results network. filtering argument used control intercellular cross-talks visualized network. set TRUE, p_val, FDR ct_val used identify significant communications plot solid line, whereas others plotted dashed line. , enabled visualization, providing p-value FDR filtering. ct_val = NULL allows consider intercellular cross-talk without filtering value. community can logical (community calculated using igraph::fastgreedy.community()), community object calculated igraph package. vertex used color vertices, can set \"name\" color according names cell-types. edge_col_by edge_width parameters control value used color edges width proportional value. edge_adj_col used control transparency edges: pathway cross-talk can lots links can e useful control transparency. plot_network_CT() function returns igraph cross-talk network communities “comm_id” vertex attribute (calculated). plot_network_CT() function uses ggraph package functions, ggplot2-based. file_out set NULL function returns also ggplot2 network object.  ct_heatmap() function can used plot intercellular cross-talk heatmap selecting variable used color heatmap (color_by, used cross-talk score), color scale (color = c(\"lightyellow\", \"red3\")), color cells heatmap cell types pairs without communications (no_ct_color). Similarly plot_network_CT(), ct_heatmap() function can select significant interactions, represented star. achieved enabling filtering = TRUE, require p-value, FDR /cross-talk score thresholds.","code":"expr_ccc_net <- plot_network_CT(ct = expr_ccc$ct_res,                                  filtering = T, p_val = 0.05, FDR = 0.2, ct_val = NULL,                                  community = F,                                  vertex = \"name\", vertex_size = 5, vertex_label = TRUE, vertex_pal = pal_ct,                                 edge_col_by = \"ct_score\", edge_pal=NULL,                                  edge_width = T, edge_adj_col = 0.7)  expr_ccc_net #> IGRAPH be33f36 UN-- 9 36 --  #> + attr: name (v/c), label (v/c), ct_score (e/n), ngenes_gs1 (e/n), #> | ngenes_gs2 (e/n), nlink (e/n), p_value_link (e/n), FDR_link (e/n), #> | p_adj_BH (e/n), weight_gs1 (e/n), weight_gs2 (e/n), genes_gs1 (e/c), #> | genes_gs2 (e/c), filt (e/c) #> + edges from be33f36 (vertex names): #>  [1] Endothelial--CAFs              Endothelial--PVL               #>  [3] Endothelial--B-cells           Endothelial--Plasmablasts      #>  [5] Endothelial--T-cells           Endothelial--Myeloid           #>  [7] Endothelial--Cancer Epithelial Endothelial--Normal Epithelial #>  [9] CAFs       --PVL               CAFs       --B-cells           #> + ... omitted several edges ct_heatmap(ct = clCC$ct_res,             color_by = \"ct_score\", color = c(\"lightyellow\", \"red3\"), no_ct_color = \"whitesmoke\",             filtering = TRUE, p_val = 0.05, FDR = 0.2, ct_val = NULL,label_size = 8)"},{"path":"/articles/Ulisse_sc.html","id":"deg-data","dir":"Articles","previous_headings":"Intercellular cross-talk analysis","what":"DEG data","title":"Ulisse workflow 2: Cell-cell cross-talk analysis on single cell data","text":"now analyse intercellular cross-talk using DE results. use Seurat function Differential Expression Analysis default parameters calculate DEG cell type others. , use Benjamini-Hochberg method obtain adjusted p-value used filter DEGs maintain significant ones. select -regulated genes. important package algorithm used DEG calculation, Ulisse function structured handle input type. DEGs data can now used build cell-type lists using preparing_DEG_list() function. function take input table results DEG calculation, specific columns (genes, log2 Fold Change, p-value cluster), important package algorithm used differential analysis. preparing_DEG_list() uses inputs calculate gene clusters associated weights, product log2FC -log10 p_val. , function builds vector cluster, one composed weights, named respective genes. , vectors filtered maintain gene present universe returned list","code":"Idents(data) <- data$celltype_major  DEGs_data <- FindAllMarkers(data, assay = \"RNA\") #this may take a while DEGs_data$p_val_BH <- p.adjust(DEGs_data$p_val, method = \"BH\")  DEGs_data[1:5,] DEGs_data <- DEGs_data[DEGs_data$p_val_BH <= 0.05 & DEGs_data$avg_log2FC >= 0.5,]   DEG_list <- preparing_DEG_list(cluster = DEGs_data$cluster,                                 p_val = DEGs_data$p_val_BH,                                 log2FC = DEGs_data$avg_log2FC,                                 gene = DEGs_data$gene,                                 universe = rownames(adj.m))  head(DEG_list[[1]]) #>     ACKR1       VWF     RAMP2     RAMP3   CLEC14A    ADGRL4  #> 1397.4371 1068.3300  919.2382  839.4853  801.0583  800.9338"},{"path":"/articles/Ulisse_sc.html","id":"communication-analysis-1","dir":"Articles","previous_headings":"Intercellular cross-talk analysis > DEG data","what":"Communication Analysis","title":"Ulisse workflow 2: Cell-cell cross-talk analysis on single cell data","text":"subsequent part analysis identical one used expression data: gs_cross_talk() used analyse intercellular cross-talk inputs parameters. calculation results two-object list detail gene-gene interaction cross talk results.","code":"DEG_ccc <- gs_cross_talk(gs_list = DEG_list,                          gene_network_adj = adj.m,                          k = 49, shared = T,                           ct_info = T, hash = F,                          mc_cores_perm = 1, mc_cores_ct = 1)  DEG_ccc$ct_info[1:5,] DEG_ccc$ct_res[1:5,]"},{"path":"/articles/Ulisse_sc.html","id":"intercellular-cross-talk-visualization-1","dir":"Articles","previous_headings":"Intercellular cross-talk analysis > DEG data","what":"Intercellular cross-talk visualization","title":"Ulisse workflow 2: Cell-cell cross-talk analysis on single cell data","text":"done , can build intercellular cross-talk network filtering results using Ulisse function plot network  heatmap","code":"DEG_CCC_net <- plot_network_CT(ct = DEGcl_ct$ct_res,                                 filtering = T, p_val = 0.05, FDR = 0.2, ct_val = NULL,                                  community = F,                                 vertex = \"name\", vertex_size = 5, vertex_label = TRUE, vertex_pal = pal_ct,                                edge_col_by = \"ct_score\", edge_pal=NULL,                                 edge_width = T, edge_adj_col = 0.7)  DEG_CCC_net #> IGRAPH 22bb420 UN-- 9 34 --  #> + attr: name (v/c), label (v/c), ct_score (e/n), ngenes_gs1 (e/n), #> | ngenes_gs2 (e/n), nlink (e/n), p_value_link (e/n), FDR_link (e/n), #> | p_adj_BH (e/n), weight_gs1 (e/n), weight_gs2 (e/n), genes_gs1 (e/c), #> | genes_gs2 (e/c), filt (e/c) #> + edges from 22bb420 (vertex names): #>  [1] Endothelial--CAFs              Endothelial--PVL               #>  [3] Endothelial--B-cells           Endothelial--Plasmablasts      #>  [5] Endothelial--T-cells           Endothelial--Myeloid           #>  [7] Endothelial--Cancer Epithelial Endothelial--Normal Epithelial #>  [9] CAFs       --PVL               CAFs       --B-cells           #> + ... omitted several edges ct_heatmap(ct = DEGcl_ct$ct_res,             color_by = \"ct_score\", color = c(\"lightyellow\", \"red3\"), no_ct_color = \"whitesmoke\",             filtering = T, p_val = 0.05, FDR = 0.2, ct_val = NULL,  label_size = 8)"},{"path":"/articles/Ulisse_sc.html","id":"comparison-between-expression-and-deg-intercellular-cross-talk-results","dir":"Articles","previous_headings":"","what":"Comparison between expression and DEG intercellular cross-talk results","title":"Ulisse workflow 2: Cell-cell cross-talk analysis on single cell data","text":"Ulisse provides function build visualize union network multiple analyses samples. comparing_results_network() function takes input list results obtained gs_cross_talk(). function align results, correspondence among gene sets names different samples, especially using clusters. compare significant results obtained expression DEG intercellular cross-talk analyses sample, thus cell-types corresponds. comparing_results_network() needs input named list cross-talk results already filtered maintain significant intercellular cross-talk, needed. function create union network vertices cell types present results res_list, links communication present results. vertices can colored considering number results present (vertex_number = TRUE) /discrete variable (case vertex = \"name\", otherwise two list, first element name variable, second named vector , see function help detail). parameters enabled, case, vertex one used color voronoi tesselation (see ggrpah package detail). vertex_number = TRUE, color palette can provided, composed minimum maximum value colors, function use default “blue” “red”. Edges can colored number results share (edge_color_by = \"number\") , case, results contain (edge_color_by = \"\"). Edges width can proportional number results present (edge_width = TRUE). comparing_results_network() return union network plot id file_out argument provided.","code":"res_list <- list(expr = expr_ccc$cc_communications,                  DEG = DEG_ccc$cc_communications) res_list <- lapply(res_list, function(x) x <- x[x$p_value_link <= 0.05 & x$FDR_link <= 0.2,])  comp.out <- comparing_results_network(res_list = res_list,                                        vertex_number = TRUE,                                        vertex = \"name\", vertex_pal = pal_ct,                                       voronoi_radius = 0.3, voronoi_alpha = 0.3,                                        edge_width = TRUE, edge_color_by = \"which\",                                       edge_adj_col = 0.5, vertex_number_adj = 0.8)  comp.out"},{"path":[]},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Alice Chiodi. Author. Ettore Mosca. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Chiodi , Pelucchi P, Mosca E (2023). “Cross-talk quantification molecular networks application pathway-pathway cell-cell interactions.” bioRxiv. doi: 10.1101/2023.08.10.552776.","code":"@Article{,   title = {Cross-talk quantification in molecular networks with application to pathway-pathway and cell-cell interactions},   author = {A Chiodi and P Pelucchi and E Mosca},   journal = {bioRxiv},   year = {2023},   publisher = {Cold Spring Harbor Laboratory},   doi = {10.1101/2023.08.10.552776}, }"},{"path":"/index.html","id":"ulisse---analysis-of-intracellular-and-intercellular-crosstalk-from-omics-data","dir":"","previous_headings":"","what":"Pathway, pathway cross-talk and cell-cell communication ","title":"Pathway, pathway cross-talk and cell-cell communication ","text":"understanding gene-related molecular alterations translate pathological phenotypes major challenge life sciences. , address challenge assessing possible alteration, respect reference condition, intra- inter-cellular molecular interactions among sets genes, intended represent intra-cellular cellular phenotypes. provide means screen alteration intra-cellular pathway crosstalks derive map altered communications among pathways, complements pathway enrichment analysis. Ulisse can also used reconstruct cell-cell communication network cell types/clusters. two analyses (intra- inter-cellular) can combined obtain integrated pathways interactions associate cell-cell communications intracellular states. , provide score statistical assessment altered interactions, based multiple empirical null models networks. Lastly, extract key genes take part altered interactions. Ulisse provide tools perform: Cross-talk analysis: intra-cellular inter-cellular gene classification analysis: reconstruct role genes cross-talk network obtained Integrated cross-talk analysis: integrate communications specific cells types/clusters cellular mechanisms. Typical application Ulisse includes: Intra-cellular cross-talk analysis omics data obtained bulk single-cell samples Inter-cellular analysis clusters cell-type single-cell samples Source code: https://github.com/emosca-cnr/Ulisse","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Pathway, pathway cross-talk and cell-cell communication ","text":"Ulisse requires R >= 4.0.0, GitHub Bioconductor packages. successfully install Ulisse firstly run ```{r, include=TRUE, eval=FALSE} (!require(“BiocManager”, quietly = TRUE)){ install.packages(“BiocManager”) } BiocManager::install(c(“BiocParallel”, “ComplexHeatmap”, “DOSE”, “KEGGREST”, “qvalue”)) devtools::install_github(“emosca-cnr/NPATools”, build_vignettes = TRUE) Contacts: Ettore Mosca, Bioinformatics Lab, CNR-ITB","code":"The other dependencies, if missing, should be automatically installed using the following command:  ```{r, include=TRUE, eval=FALSE} devtools::install_github(\"emosca-cnr/Ulisse\", build_vignettes = TRUE)"},{"path":"/reference/TM_CT.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to calculate cross-talks between pathways of different gene communities — TM_CT","title":"Function to calculate cross-talks between pathways of different gene communities — TM_CT","text":"Calculates cross-talks pathways composed gene different gene communities","code":""},{"path":"/reference/TM_CT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to calculate cross-talks between pathways of different gene communities — TM_CT","text":"","code":"TM_CT(   gs_list,   gene_network_adj,   membership,   genes,   weight,   mc_cores_ct = 2,   mc_cores_tm = 2 )"},{"path":"/reference/TM_CT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to calculate cross-talks between pathways of different gene communities — TM_CT","text":"gs_list named list genes grouped pathways gene_network_adj gene network adjacency matrix membership named vector membership `genes` topological communities. set `NULL` function calculates communities using fastgreedy algorithm genes vector genes interest used TM-PCT calculation weight weights genes `genes`. provided, function assigns gene weight 1 mc_cores_ct number threads used calculate cross talk mc_cores_tm number threads used calcualte TM-PCT different communities combination","code":""},{"path":"/reference/TM_CT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to calculate cross-talks between pathways of different gene communities — TM_CT","text":"function returns list two object: comm_pathway_list: communities pathway lists used TM-PCT calculation. list named name   gene community TM_PCT_res: data frame commID_1, commID_2: community belongs genes `pathway_1` `pathway_2`, respectively pathway_1, pahtway_2: pathway pair considered score: TM-PCT score ngenes_pathway_1, ngenes_pathway_2: number genes involved `pathway_1` `pathway_2`, respectively n_link: number links pathways considered weight_pathway1, weight_pathway2: cumulative weights genes involved CT  `pathway_1` `pathway_2` gene_pathway1, gene_pathway2: gene involved CT `pathway_1` `pathway_2`, respectively membership = NULL, also membership returned","code":""},{"path":"/reference/TM_CT.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function to calculate cross-talks between pathways of different gene communities — TM_CT","text":"function uses `membership` data re-organize `pathway_list` obtain list  pathway list gene community. genes grouped communities grouped pathways. point, function calculates CT pathway pairs different  communities shows least link.","code":""},{"path":"/reference/TM_CT.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to calculate cross-talks between pathways of different gene communities — TM_CT","text":"","code":"if (FALSE) {  ptw_list <- list(ptwA = c(\"A\", \"B\",\"C\"), ptwB = c(\"D\", \"E\", \"F\"), ptwC = c(\"A\", \"B\", \"E\"))  adj <- matrix(data = sample(c(0,1), 6*6, replace = TRUE), nrow = 6,   ncol = 6, dimnames = list(LETTERS[1:6], LETTERS[1:6]))  wgt <- rep(1, 6)  memb <- c(1, 1, 2, 2, 3, 3)  pct <- TM_PCT(pathway_list = ptw_list, gene_network_adj = adj, weight = wgt, membership = memb,                  mc_cores_tm = 1, mc_cores_ct = 1) }"},{"path":"/reference/breaks.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to find best number of intervals iteratively. Works with cut methods \nc(","title":"Function to find best number of intervals iteratively. Works with cut methods \nc(","text":"Function find best number intervals iteratively. Works cut methods  c(\"numbers\", \"width\")","code":""},{"path":"/reference/breaks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to find best number of intervals iteratively. Works with cut methods \nc(","text":"","code":"breaks(x = x, equal = \"number\", nbins = 6, binwidth = NULL)"},{"path":"/reference/breaks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to find best number of intervals iteratively. Works with cut methods \nc(","text":"x = x equal interval nbins = nbins binwidth dimension bin","code":""},{"path":"/reference/build_S_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Build list for cross-talk calculation — build_S_list","title":"Build list for cross-talk calculation — build_S_list","text":"function build gene-set list compatible `gs_cross-talk()` cross-talk calculation starting provided gene set database  genes (weights) interest.","code":""},{"path":"/reference/build_S_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build list for cross-talk calculation — build_S_list","text":"","code":"build_S_list(S_tab, g_u, universe, min_size = 1, max_size = 500)"},{"path":"/reference/build_S_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build list for cross-talk calculation — build_S_list","text":"S_tab table composed two (mandatory) three columns: first contain names gene sets, second name genes. third column (provided) gene weights. `ncol(S_tab) == 3`, `g_u` param ignored weights gene sets (.e.: cell-cell communication), third column weights gene gene sets. g_u named vector. contain genes (names) weights. Ignored `ncol(S_tab) == 3`. universe genes adjacency matrix used `gs_cross_talk()`. Set `NULL` skip filtering min_size, max_size filtering gene sets maintain ones  least `min_size` less `max_size` number genes. Set `NULL` skip filtering","code":""},{"path":"/reference/build_S_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build list for cross-talk calculation — build_S_list","text":"output gene-set list vector gene-set, composed weights named genes","code":""},{"path":"/reference/build_S_list.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Build list for cross-talk calculation — build_S_list","text":"`build_S_list()` uses gene-set database data build list needed `gs_cross_talk()` cross-talk calculation.","code":""},{"path":"/reference/calc_gs_perm.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function of pathtools — calc_gs_perm","title":"Internal function of pathtools — calc_gs_perm","text":"Internal function pathtools","code":""},{"path":"/reference/calc_gs_perm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function of pathtools — calc_gs_perm","text":"","code":"calc_gs_perm(rll = NULL, perm = NULL, gs = NULL)"},{"path":"/reference/calc_gs_perm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function of pathtools — calc_gs_perm","text":"rll list named ranked vectors perm vector permuted names gs gene set","code":""},{"path":"/reference/calc_p.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimation of p values — calc_p","title":"Estimation of p values — calc_p","text":"function used calculate p-value list matrices","code":""},{"path":"/reference/calc_p.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimation of p values — calc_p","text":"","code":"calc_p(X)"},{"path":"/reference/calc_p.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimation of p values — calc_p","text":"X list matrices, first one obtained real data others obtained permutations.  matrices 1 column matrices order.","code":""},{"path":"/reference/calc_p.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimation of p values — calc_p","text":"functions calculate p-value permutation-based approach. takes input list matrices, first one real data data obtained permutations. , function searches many values permutations equal higher real. values divided number matrices (1 + number permutations)","code":""},{"path":"/reference/calc_set_similarity.html","id":null,"dir":"Reference","previous_headings":"","what":"The function calculates similarities between two sets. — calc_set_similarity","title":"The function calculates similarities between two sets. — calc_set_similarity","text":"function takes input two vertices calculates similarity using three different methods: Jaccard = number common elements x y, divided number unique elements present c(x, y) Overlap = number common elements x y. divided minimum length unique elements present either x y Average = mean Jaccard Overlap measure","code":""},{"path":"/reference/calc_set_similarity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The function calculates similarities between two sets. — calc_set_similarity","text":"","code":"calc_set_similarity(x, y, method = c(\"jaccard\", \"overlap\", \"average\"))"},{"path":"/reference/calc_set_similarity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The function calculates similarities between two sets. — calc_set_similarity","text":"x, y two sets provided vectors method one among \"jaccard\", \"overlap\" \"average\"","code":""},{"path":"/reference/calc_set_similarity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The function calculates similarities between two sets. — calc_set_similarity","text":"similarity","code":""},{"path":"/reference/calc_set_similarity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The function calculates similarities between two sets. — calc_set_similarity","text":"`calc_set_similarity` calculates similarities two sets using `jaccard`, `overlap`, `average` methods.","code":""},{"path":"/reference/comparing_results_network.html","id":null,"dir":"Reference","previous_headings":"","what":"Visual representation of multiple cross-talk analyses. — comparing_results_network","title":"Visual representation of multiple cross-talk analyses. — comparing_results_network","text":"function used merge results obtained multiple cross-talk analyses creating union network highlighting shared edges vertices","code":""},{"path":"/reference/comparing_results_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visual representation of multiple cross-talk analyses. — comparing_results_network","text":"","code":"comparing_results_network(   res_list,   vertex_number = F,   vertex_number_pal = NULL,   vertex_number_adj = 0.7,   vertex_size = 5,   vertex = NULL,   vertex_pal = NULL,   voronoi_radius = 0.8,   voronoi_alpha = 0.3,   vertex_label = TRUE,   edge_color_by = \"number\",   edge_width = TRUE,   edge_pal = NULL,   edge_adj_col = 0.7,   file_out,   width = 200,   height = 200,   res = 300,   units = \"mm\",   ... )"},{"path":"/reference/comparing_results_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visual representation of multiple cross-talk analyses. — comparing_results_network","text":"res_list list resulting data.frame `gs_cross_talk()` vertex_number logical, vertices colored number results present vertex_number_pal vector two colors used gradient coloring vertices `vertex_number = TRUE`.  `NULL` gradient build \"red\" \"blue\". vertex_number_adj value used set transparency vertex colors `vertex_number_pal` vertex_size size vertices vertex can either `name` value color vertices according name, list two vector, first  name attribute second named vector attribute per vertices  used color (discrete value), `NULL` vertices colored (thus \"grey65\" passed default color).  `vertex_number = TRUE`, `vertex` represented cells voronoi tessellation (see `ggraph::geom_node_voronoi()`) vertex_pal named vector colors used unique `vertex` element. `NULL` pals::alphabet2() palette used voronoi_radius, voronoi_alpha parameters passed `geom_node_voronoi()`. `vertex` `vertex_number` arguments enabled,  first represented cells voronoi tessellation (see `ggraph::geom_node_voronoi()`). case, argument used control  radius cells transparency, respectively. vertex_label logical, vertex names plotted , named vector, label associated vertex named edge_color_by =c(\"number\",\"\") edges colored number results share edge (\"number\") results contain (\"\") edge_width logical, edge width proportional number results share edge. edge_pal palette used color edges according `edge_color_by`. `edge_color_by=\"number` palette two color used gradient coloring ; `NULL` \"red\" \"blue\" used. `edge_color_by=\"` palette (named) vector enought colors  results name combination edge_adj_col value used adjust color transparency edges file_out name used save plot jpeg format plot. `NULL` functions returns also plot object width, height, res, units graphical value `jpeg()` function ... graphical parameters passed `ggraph()` function","code":""},{"path":"/reference/comparing_results_network.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visual representation of multiple cross-talk analyses. — comparing_results_network","text":"`file_out` null function returns plot igraph object used plotting.   Otherwise, igraph object returned plot saved `file_out`","code":""},{"path":"/reference/comparing_results_network.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Visual representation of multiple cross-talk analyses. — comparing_results_network","text":"function takes input list data.frames resulting multiple `gs_cross_talk()` analyses produce union network plotted edges colored number results cross-talk","code":""},{"path":"/reference/cross_talk.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to caluclate cross-talk — cross_talk","title":"Function to caluclate cross-talk — cross_talk","text":"`cross_talk()` calculates cross-talk score provided matrix vector weights","code":""},{"path":"/reference/cross_talk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to caluclate cross-talk — cross_talk","text":"","code":"cross_talk(mat, weight)"},{"path":"/reference/cross_talk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to caluclate cross-talk — cross_talk","text":"mat matrix calculate cross-talk. subset adjacency matrix gene network, rows genes gene set, columns genes anoher one weight vector weights associated gene `mat`. weights shoud named genes","code":""},{"path":"/reference/cross_talk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to caluclate cross-talk — cross_talk","text":"function returns array : ct: cross-talk value ngenes_1, ngenes_2: number gene geneset 1 (rows) geneset 2 (columns) nlink: number link geneset 1 2 gene_1, gene_2: genes involved links geneset 1 2","code":""},{"path":"/reference/cross_talk.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function to caluclate cross-talk — cross_talk","text":"function calculates cross-talk values provided matrix list vectors weights (fist row, second column). weights named gene names","code":""},{"path":"/reference/cross_talk.opt.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to caluclate cross-talk — cross_talk.opt","title":"Function to caluclate cross-talk — cross_talk.opt","text":"`cross_talk()` calculates cross-talk score provided matrix vector weights","code":""},{"path":"/reference/cross_talk.opt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to caluclate cross-talk — cross_talk.opt","text":"","code":"cross_talk.opt(mat = NULL, w1 = NULL, w2 = NULL)"},{"path":"/reference/cross_talk.opt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to caluclate cross-talk — cross_talk.opt","text":"mat matrix calculate cross-talk. subset adjacency matrix gene network, rows genes gene set, columns genes anoher one w1, w2 vector weights associated gene `mat`. weights shoud named genes","code":""},{"path":"/reference/cross_talk.opt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to caluclate cross-talk — cross_talk.opt","text":"function returns array : ct: cross-talk value ngenes_1, ngenes_2: number gene geneset 1 (rows) geneset 2 (columns) nlink: number link geneset 1 2 gene_1, gene_2: genes involved links geneset 1 2","code":""},{"path":"/reference/cross_talk.opt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function to caluclate cross-talk — cross_talk.opt","text":"function calculates cross-talk values provided matrix list vectors weights (fist row, second column). weights named gene names","code":""},{"path":"/reference/cross_talk.perm.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to caluclate cross-talk — cross_talk.perm","title":"Function to caluclate cross-talk — cross_talk.perm","text":"`cross_talk()` calculates cross-talk score provided matrix vector weights","code":""},{"path":"/reference/cross_talk.perm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to caluclate cross-talk — cross_talk.perm","text":"","code":"cross_talk.perm(mat = NULL, w1 = NULL, w2 = NULL)"},{"path":"/reference/cross_talk.perm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to caluclate cross-talk — cross_talk.perm","text":"mat matrix calculate cross-talk. subset adjacency matrix gene network, rows genes gene set, columns genes anoher one w1, w2 vector weights associated gene `mat`. weights shoud named genes","code":""},{"path":"/reference/cross_talk.perm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to caluclate cross-talk — cross_talk.perm","text":"function returns array : ct: cross-talk value ngenes_1, ngenes_2: number gene geneset 1 (rows) geneset 2 (columns) nlink: number link geneset 1 2 gene_1, gene_2: genes involved links geneset 1 2","code":""},{"path":"/reference/cross_talk.perm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function to caluclate cross-talk — cross_talk.perm","text":"function calculates cross-talk values provided matrix list vectors weights (fist row, second column). weights named gene names","code":""},{"path":"/reference/ct_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to plot the heatmap of cross-talk results — ct_heatmap","title":"Function to plot the heatmap of cross-talk results — ct_heatmap","text":"function elaborates output `gs_cross-talk()`  function represent obtained cross-talks heatmap","code":""},{"path":"/reference/ct_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to plot the heatmap of cross-talk results — ct_heatmap","text":"","code":"ct_heatmap(   ct,   color_by = \"ct_score\",   color = NULL,   color_level = NULL,   no_ct_color = NULL,   filtering = FALSE,   p_val,   FDR,   ct_val,   legend_side = \"left\",   community = F,   pal_community = NULL,   label_size = 5,   row_annotation = NULL,   pal_row_annotation = NULL,   row_name_side = \"bottom\",   column_annotation = NULL,   pal_column_annotation = NULL,   col_name_side = \"left\",   file_out = NULL,   file_width = 200,   file_height = 200,   res = 300,   units = \"mm\",   ... )"},{"path":"/reference/ct_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to plot the heatmap of cross-talk results — ct_heatmap","text":"ct results obtained `gs_cross-talk()` functions color_by name column plotted heatmap color vector two colors used build gradient color heatmap, colors two number `color_level`. NULL, function uses `lightyellow` `red3` color_level vector two values used create gradient color heatmap. provided,  function uses minimum maximum no_ct_color color used gene set pairs shows cross-talk (heatmap score = 0). `NULL` function uses `whitesmoke` filtering logical, function plot edges significant ones. `TRUE`, function uses `p_val, FDR` `ct_val` identify  significant ones, plotted solid line, significant dashed line. `FALSE`, edges plotted solid line. p_val, FDR, ct_val filtering values. one set `NULL` function ignores legend_side place legend heatmap annotations (provided). See `Heatmap`  details community logical object resulting igraph community calculation. `TRUE`, function calculates communities using fastgreedy algorithm, `FALSE` function consider communities. Otherwise, community object provided, function uses colors vertices accordingly. communities plotted row column annotation heatmap pal_community vector colors used color community annotation. `NULL` function use  `rainbow()` palette label_size size gene-set names printed diagonal heatmaps row_annotation, column_annotation data.frame columns corresponding rows columns annotations. rownames must  named cells/gene-set `ct` tables. values columns treated  discrete variable pal_row_annotation, pal_column_annotation list vectors, one column `row_annotation,column_annotation` df.  vector color vector named cells/gene-set `ct` table. `NULL`, function uses `pals::alphabet2()` palette row_name_side, col_name_side name row/column annotation put \"bottom\" \"top\" (\"left\" \"right\")  annotation file_out name used save jpeg file. `NULL` complexHeatmap object returned file_width, file_height, res, units graphical value `jpeg()` function ... arguments passed `ComplexHeatmap::Heatmap()`","code":""},{"path":"/reference/ct_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to plot the heatmap of cross-talk results — ct_heatmap","text":"function produce plot saved name passed `file_out` also returns adjacency matrix  communities (calculated)","code":""},{"path":"/reference/ct_heatmap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function to plot the heatmap of cross-talk results — ct_heatmap","text":"functions uses `gs_cross-talk()` output build cross-talk network. ,  adjacency matrix network plotted without annotations rows columns. user may  also decide value plot heatmap","code":""},{"path":"/reference/eFDR.html","id":null,"dir":"Reference","previous_headings":"","what":"empirical False Discovery Rate — eFDR","title":"empirical False Discovery Rate — eFDR","text":"empirical False Discovery Rate","code":""},{"path":"/reference/eFDR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"empirical False Discovery Rate — eFDR","text":"","code":"eFDR(real_values, all_values, mc.cores = 1, correct.max = TRUE)"},{"path":"/reference/eFDR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"empirical False Discovery Rate — eFDR","text":"real_values vactor real (observed) values all_values vactor values (real + permuted) values mc.cores number cores correct.max logical, decide correct maximum values 1 ","code":""},{"path":"/reference/edge_weights.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for the assignment of edges weights in order to better visualize the communities — edge_weights","title":"Function for the assignment of edges weights in order to better visualize the communities — edge_weights","text":"Function assignment edges weights order better visualize communities","code":""},{"path":"/reference/edge_weights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for the assignment of edges weights in order to better visualize the communities — edge_weights","text":"","code":"edge_weights(community, network, weight.within = 100, weight.between = 1)"},{"path":"/reference/edge_weights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function for the assignment of edges weights in order to better visualize the communities — edge_weights","text":"community list mandatory field \"membership\" network pathway network weight.within value weight attraction two vertices community weight.value weight attraction two vertices two distinct communities","code":""},{"path":"/reference/edge_weights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function for the assignment of edges weights in order to better visualize the communities — edge_weights","text":"vector edge weights","code":""},{"path":"/reference/enrichment_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Enrichment map — enrichment_map","title":"Enrichment map — enrichment_map","text":"functions calculates similarities gene-sets plot resulting enrichment map","code":""},{"path":"/reference/enrichment_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Enrichment map — enrichment_map","text":"","code":"enrichment_map(   gs_score,   gs_list,   method = c(\"overlap\", \"jaccard\"),   coeff = NULL,   all_gs = TRUE,   comm_method = \"fastgreedy\",   min_comm_size = 2,   gs_list_size = NULL,   set_sim_df = NULL,   file_prefix = \"en_map\",   layout = NULL,   weight_within = 4,   weight_between = 1,   pal_community = NULL,   pal_score = NULL,   top_ptw = \"score\",   wrap = 15,   label_fontsize = c(6, 5),   e_color = \"gray65\",   e_alpha = 0.5,   e_range = c(1, 4),   v_stroke = 0.5,   v_range = c(2, 8),   save_plot = TRUE,   width = 200,   height = 200,   res = 300,   units = \"mm\" )"},{"path":"/reference/enrichment_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Enrichment map — enrichment_map","text":"gs_score named vector pathway scores gs_list gene set list method 'overlap' 'jaccard' coeff threshold similarity score two gene sets all_gs TRUE/FALSE, indicating gene-sets considered ones similarity score >= `coeff` comm_method community algorithm used; available algorithms c(\"fastgreedy\", \"labprop\", \"walktrap\", \"eigen\", \"multilev\", \"infomap\") see `Ulisse::find_communities()` details min_comm_size minimum size community considered enrichment map. `min_comm_size = 1` `all_gs = TRUE`, gene-sets displayed gs_list_size named vector size f gene-sets `gs_list` set_sim_df optional, data.frame three columns 'set1', 'set2' 'sim' file_prefix prefix used save similarity data.frame enrichment map plot (`save_plot = TRUE`) layout optional layout matrix, composed two columns. provided, layout calculated using `igraph::layout_with_fr()` function, together `weight_within` `weight_between` (via `Ulisse::edge_weights()` function) weight_within value weight attraction two vertices community weight_between value weight attraction two vertices two distinct communities pal_community palette used color communities, named vector color community. provided, `pals::alphabet2()` used instead pal_score palette used color vertices according `score`. provided, `pals::brewer.greens(n = 3)` used top_ptw variable used select top gene-sets display description communities.  either `\"score\"` (display top score gene-set community) `\"n_genes\"` (display gene-set higher number genes) wrap value used wrap long gene-sets names description communities. See `stringr::str_wrap()` details label_fontsize font size label description communities. two values provided, fist used label, second description. See `ggforce::geom_mark_rect()` details. e_color edge color e_alpha edge transparency e_range range widths values used plotting edges proportional similarity score v_stroke width stoke vertices, colored according communities v_range range dimensions vertices, proportional number genes save_plot TRUE/FALSE, plot saved using `file_prefix` returned width jpeg image width height jpeg image height res jpeg image resolution units jpeg image units width height","code":""},{"path":"/reference/enrichment_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Enrichment map — enrichment_map","text":"function returns list containing: igraph = network object used plotting enrichment map network_data = data.frame layout (X1,X2 columns), name gene-sets together community ids (\"comm_id\"),    score number genes (\"n_genes\") path_comm_genes = list composed genes present community sim_coeff = data.frame similarity score calculated gene-set pair plot = enrichment map plot obtained using `ggraph` package functions. `save_plot = FALSE`","code":""},{"path":"/reference/enrichment_map.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Enrichment map — enrichment_map","text":"enrichment_map() function calculates similarities gene-set pair using `method` metric. Subsequently,  similarities filtered maintain ones >= `coeff`. `comm_method` algorithm used identify communities,   may filtered plot ones composed least `min_comm_size` gene-sets. Enrichment map plotted using  `ggraph` package.","code":""},{"path":"/reference/es.html","id":null,"dir":"Reference","previous_headings":"","what":"Enrichment Score — es","title":"Enrichment Score — es","text":"Enrichment Score","code":""},{"path":"/reference/es.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Enrichment Score — es","text":"","code":"es(idx = NULL, x = NULL)"},{"path":"/reference/es.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Enrichment Score — es","text":"idx vector indices subset elements x x named vector, ranked list","code":""},{"path":"/reference/es.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Enrichment Score — es","text":"data.frame , enrichmet score; tags, leading edge size; tags_perc, leading edge size percent gene set; list_top, rank ES; list_top_perc, rank ES percent full ranked list; lead_edge, gene names leading edge.","code":""},{"path":"/reference/filter_gsl.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter a gene set list — filter_gsl","title":"Filter a gene set list — filter_gsl","text":"Filter gene set list","code":""},{"path":"/reference/filter_gsl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter a gene set list — filter_gsl","text":"","code":"filter_gsl(gsl = NULL, universe = NULL, min_size = 5, max_size = 500)"},{"path":"/reference/filter_gsl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter a gene set list — filter_gsl","text":"gsl gene set list (named list) universe set possible values items gsl min_size minimum gene set size max_size maximum gene set size","code":""},{"path":"/reference/find_communities.html","id":null,"dir":"Reference","previous_headings":"","what":"Find topological communities — find_communities","title":"Find topological communities — find_communities","text":"Find topological communities","code":""},{"path":"/reference/find_communities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find topological communities — find_communities","text":"","code":"find_communities(   g,   e.weights = NULL,   v.weights = NULL,   verbose = TRUE,   methods = c(\"fastgreedy\", \"labprop\", \"walktrap\", \"eigen\", \"multilev\", \"infomap\") )"},{"path":"/reference/find_communities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find topological communities — find_communities","text":"g graph e.weights edge weights v.weights vertex weights verbose TRUE/FALSE methods one \"fastgreedy\", \"labprop\", \"walktrap\", \"eigen\", \"multilev\", \"infomap\"","code":""},{"path":"/reference/find_communities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find topological communities — find_communities","text":"list od community objects","code":""},{"path":"/reference/funct_rel_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to obtain a detailed visualization of specific results of functional relevance analysis — funct_rel_heatmap","title":"Function to obtain a detailed visualization of specific results of functional relevance analysis — funct_rel_heatmap","text":"function highlight links defined genes /pathways better inspect results obtained `gene_functional_relevance()` analysis","code":""},{"path":"/reference/funct_rel_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to obtain a detailed visualization of specific results of functional relevance analysis — funct_rel_heatmap","text":"","code":"funct_rel_heatmap(   pct,   adj,   target_g = NULL,   target_ptw = NULL,   weight,   n_cores = 1,   file_name = NULL,   colors = NULL,   width = 200,   height = 200,   res = 300,   units = \"mm\",   ... )"},{"path":"/reference/funct_rel_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to obtain a detailed visualization of specific results of functional relevance analysis — funct_rel_heatmap","text":"pct output `pathway_cross_talk()` function adj adjacency matrix used PCT calculation target_g vector genes interest. provided, function consider genes interact plot target_ptw vector pathways interest. provided, function consider CT pathways involved weight weight genes. provided, function plot product weights heatmap. `NULL` function lot presence/absence links (1-0) n_cores number cores used function file_name file name plot. specified, saved \"funct_rel_heatmap.jpeg\" colors vector two colors used heatmap. provided, functions used \"blue\" \"red\" width, height, res, units graphical value `jpeg()` function ... arguments passed `Heatmap` function","code":""},{"path":"/reference/funct_rel_heatmap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function to obtain a detailed visualization of specific results of functional relevance analysis — funct_rel_heatmap","text":"function uses inputs used `gene_functional_relevance()` retrieve gene interactions specific `target_g` /`target_ptw`. function produces heatmap genes interacts user-provided ones pathway considered. heatmap can reported  product weight genes `weight` provided, existence link (0-1) otherwise.","code":""},{"path":"/reference/gene_classification.html","id":null,"dir":"Reference","previous_headings":"","what":"Cross-talk gene classification analysis — gene_classification","title":"Cross-talk gene classification analysis — gene_classification","text":"function calculates (saturation ) cross-talk diversity (saturation )   interaction diversity involved provided cross-talks","code":""},{"path":"/reference/gene_classification.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cross-talk gene classification analysis — gene_classification","text":"","code":"gene_classification(gs_ct = NULL, A = NULL, ct_ref = NULL, n_cores = 1)"},{"path":"/reference/gene_classification.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cross-talk gene classification analysis — gene_classification","text":"gs_ct data.frame obtained result `gs_cross_talk()`, filtered needed adjacency matrix used input `gs_cross_talk()` ct_ref =`NULL` data.frame cross-talk calculated reference.  provided, saturation `r_g` `r_d` calculated. n_cores number cores use parallelize gene gene set relevance analysis","code":""},{"path":"/reference/gene_classification.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cross-talk gene classification analysis — gene_classification","text":"`ct_ref = NULL` function returns data.frame : gene: gene analysed d_q: number altered cross-talk `gene` contributes d_d: number interactors contributing altered cross-talk together `gene` d_q_S: list names gene-sets counted `d_q` separated `;` d_d_gene: list names genes counted `d_d` separated `;` Otherwise, `ct_ref` provided function returns data.frame : gene: gene analysed d_q: cross-talk diversity, number gene set altered cross-talk contains interactors `gene` d_d: interaction diversity, number interactors `gene` part altered cross-talks r_q: saturation cross-talk diversity r_d: saturation interaction diversity d_q_S: list gene set names counted `d_q` separated `;` d_d_gene: list names genes counted `d_d` separated `;` q: number gene set cross-talk contains interactors `gene` d: number interactors `gene` part cross-talks q_S: list gene set names counted `q` separated `;` d_gene: list names genes counted `d` separated `;`","code":""},{"path":"/reference/gene_classification.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cross-talk gene classification analysis — gene_classification","text":"function takes input data.frame obtained `gs_cross_talk()`   adjacency matrix used input `gs_cross_talk()`. inputs used calculate   (saturation ) cross-talk diversity (saturation ) interaction diversity  involved significant cross-talks, defined paper.   function two applications: calculate cross-talk diversity interaction diversity reference model calculate saturation cross-talk diversity saturation interaction diversity     using reference obtained `1`","code":""},{"path":"/reference/gene_functional_relevance.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to calculate gene functional relevance — gene_functional_relevance","title":"Function to calculate gene functional relevance — gene_functional_relevance","text":"function calculates functional diversity interactor diversity involved provided cross-talks","code":""},{"path":"/reference/gene_functional_relevance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to calculate gene functional relevance — gene_functional_relevance","text":"","code":"gene_functional_relevance(   ct,   adj,   method = \"count\",   ct_null = NULL,   n_cores = 1 )"},{"path":"/reference/gene_functional_relevance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to calculate gene functional relevance — gene_functional_relevance","text":"ct data.frame obtained result `gs_cross_talk()`, filtered needed adj adjacency matrix used input `gs_cross_talk()` method = c(\"count\", \"relative\") \"count\" number genes gene-sets listed, \"relative\" counts  relative using general model. case `ct_null` required ct_null required `method = \"relative\"`. cross-talk result table coming general model n_cores number cores use parallelize gene functional relevance analysis","code":""},{"path":"/reference/gene_functional_relevance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to calculate gene functional relevance — gene_functional_relevance","text":"`method = \"count` function returns data.frame : gene: gene analysed functional_diversity: functional diversity interactor_diversity: interactor diversity functional relevance: log2(`functional_diversity`/`interactor_diversity`) n_gs_gene: number gs `gene` present gs_gene: GS `gene` present functional_gs: list names gene-sets counted `functional_diversity` separated `;` interactors_gene: list names genes counted `interactor_diversity` separated `;` Otherwise, `method = \"relative` function returns data.frame : gene: gene analysed relative_functional_diversity: relative functional diversity relative_interactor_diversity: relative interactor diversity relative_functional relevance: log2(`relative_functional_diversity`/`relative_interactor_diversity`) functional_diversity: functional diversity calculated `ct` interactor_diversity: interactor diversity calculated `ct` functional relevance: log2(`functional_diversity`/`interactor_diversity`) n_gs_gene: number gs `gene` present functional_gs: list names gene-sets counted `functional_diversity` separated `;` interactors_gene: list names genes counted `interactor_diversity` separated `;` functional_diversity_null: functional diversity calculated general model `ct_null` interactor_diversity_null: interactor diversity calculated general model `ct_null` functional_gs_null: list names gs counted `functional_diversity_null` separated `;` interactors_gene_null: list names genes counted `interactor_diversity_null` separated `;`","code":""},{"path":"/reference/gene_functional_relevance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function to calculate gene functional relevance — gene_functional_relevance","text":"function takes input data.frame obtained `gs_cross_talk()`  adjacency matrix used input `gs_cross_talk()`. inputs used obtain genes involved significant cross-talks calculate functional diversity interactor diversity.  gene, functional diversity number gene-sets (GS) gene involved formation cross-talk; interactor diversity number different genes gene links  contribute formation cross-talk. function calculate two measures full `gs_cross_talk()` result provided","code":""},{"path":"/reference/gene_functional_relevance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to calculate gene functional relevance — gene_functional_relevance","text":"","code":"if (FALSE) { gslist <- list(gsA = c(\"A\", \"B\",\"C\"), gsB = c(\"D\", \"E\", \"F\"), gsC = c(\"A\", \"B\", \"E\")) adj <- matrix(data = sample(c(0,1), 6*6, replace = TRUE), nrow = 6,  ncol = 6, dimnames = list(LETTERS[1:6], LETTERS[1:6])) wgt <- rep(1, 6) pct <- gscross_talk(gslist = gslist, gene_network_adj = adj,                      mc_cores_pct = 1, mc_cores_perm = 1, k = 9) funct_rel <- gene_funct_relevance(ct, adj, to_plot=FALSE) }"},{"path":"/reference/gene_set_cc.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to calculate sub-components pathway score — gene_set_cc","title":"Function to calculate sub-components pathway score — gene_set_cc","text":"function calculates score pathway connected components","code":""},{"path":"/reference/gene_set_cc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to calculate sub-components pathway score — gene_set_cc","text":"","code":"gene_set_cc(gs_list, gene_network_adj, mc_cores_cc = 2)"},{"path":"/reference/gene_set_cc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to calculate sub-components pathway score — gene_set_cc","text":"gs_list named list genes grouped gene-sets obtained `preparing_gs_list`, `preparing_msigdb_list()`,  `preparing_DEG_list()` `preparing_expr_list()` functions gene_network_adj adjacency matrix whole gene network considered mc_cores_cc number threads used cc calculation","code":""},{"path":"/reference/gene_set_cc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to calculate sub-components pathway score — gene_set_cc","text":"function returns list two object: membership: results [igraph::components()] pathway considered pathway_cc: data frame pathway: name pathway components scores calculated ID: id component pathway score: component score n_gene: number genes component n_link: number links component gene: names genes component","code":""},{"path":"/reference/gene_set_cc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function to calculate sub-components pathway score — gene_set_cc","text":"coupling pathway data adjacency matrix, function identifies pathway components connected components (see [igraph::components()] details). component, function calculates score  described article.","code":""},{"path":"/reference/gene_set_cc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to calculate sub-components pathway score — gene_set_cc","text":"","code":"if (FALSE) { ptw_list <- list(ptwA = c(\"A\", \"B\",\"C\"), ptwB = c(\"D\", \"E\", \"F\"), ptwC = c(\"A\", \"B\", \"E\")) adj <- matrix(data = sample(c(0,1), 6*6, replace = TRUE), nrow = 6,  ncol = 6, dimnames = list(LETTERS[1:6], LETTERS[1:6])) wgt <- rep(1, 6) p_cc <- pathway_cc(pathway_list = ptw_list,  gene_network_adj = adj, weight = wgt, mc_cores_cc = 1) }"},{"path":"/reference/gs_cross_talk.html","id":null,"dir":"Reference","previous_headings":"","what":"Cross-talks between gene-sets — gs_cross_talk","title":"Cross-talks between gene-sets — gs_cross_talk","text":"function calculates cross-talk gene-set pairs show link genes","code":""},{"path":"/reference/gs_cross_talk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cross-talks between gene-sets — gs_cross_talk","text":"","code":"gs_cross_talk(   S_list = NULL,   A,   k = 0,   ct_type = \"intracellular\",   bin_type = \"number\",   cut_par = 9,   perm_link = \"degree\",   perm_weights = \"simple\",   mc_cores_perm = 1,   mc_cores_ct = 1 )"},{"path":"/reference/gs_cross_talk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cross-talks between gene-sets — gs_cross_talk","text":"S_list named list genes grouped gene sets, obtained `build_S_list()` adjacency matrix whole gene network considered (can sparseMatrix) k number permutations ct_type = c(\"intracellular\", \"communication\"). main differences two methods lay usage shared genes permutations building. detail, \"intracellular\" consider shared genes ct calculation, \"communication\" uses ;  \"intracellular\" permutes gene weights among gene sets, \"communication\" weights permuted among cell-gene-sets. details paper bin_type can either \"number\" (suggested), \"interval\" \"width\". See `ggplot2::cut_interval()` details. cut_par number bin cut. set `NULL`, function search best cut 2:15 perm_link = c(\"degree\", \"simple\") permutation link degree-conservative (\"degree\"), random (\"simple\") perm_weights = c(\"degree\", \"simple\") permutation weights degree-conservative (\"degree\"), random (\"simple\") mc_cores_perm number thread used permutations mc_cores_ct number threads used cross talk calculation","code":""},{"path":"/reference/gs_cross_talk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cross-talks between gene-sets — gs_cross_talk","text":"function returns data.frame results ct calculation: S1_name,S2_name: names gene-set pairs considered c: cross-talk score S1_size,S2_size: total number genes present S1 S2, respectively S1_s2_size,S2_s1_size: number S1 genes interacting S2, vice versa dL: number links S1 S2 L: number possible links S1 S2 r_c: cross-talk saturation, calculated `dL/L` u1,u2: sum gene weights S1 S2, respectively S1,S2: list interacting genes S1 S2, respectively s: cross-talk summary score pA,pU: p-values number links (pA) weights (pU) p: combined p-value `ct_type = \"communication\"`, function returns two-element list, first element data.frame    results ct calculation, second element list data.frame communication    details genes involved communications  S1_name,S2_name: name gene-sets S1_gene,S2_gene: genes involved cross-talk u12: score interaction `S1_gene` `S1_gene`, calculated multiplying weights","code":""},{"path":"/reference/gs_cross_talk.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cross-talks between gene-sets — gs_cross_talk","text":"function takes inputs adjacency matrix biological network (``) gene-set list,   obtained `build_S_list()` function.   gene-set pair shows least link , function calculates cross-talk statistical evaluation,   described paper, using `k` permutations.","code":""},{"path":"/reference/gsea.html","id":null,"dir":"Reference","previous_headings":"","what":"Gene Sert Enrichment Analysis — gsea","title":"Gene Sert Enrichment Analysis — gsea","text":"Gene Sert Enrichment Analysis","code":""},{"path":"/reference/gsea.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gene Sert Enrichment Analysis — gsea","text":"","code":"gsea(   rl = NULL,   gsl = NULL,   k = 99,   min_size = 5,   max_size = 500,   min_tags = 3,   decreasing = NULL,   mc_cores_path = 1,   mc_cores_perm = 1,   description = NULL,   out_file_prefix = \"gsea_res\",   min.k = 20 )"},{"path":"/reference/gsea.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gene Sert Enrichment Analysis — gsea","text":"rl numeric matrix genes--ranking criteria; column contains numeric values; rownames mandatory gsl named list gene sets k integer, number permutations min_size minimum gene set size max_size maximum gene set size min_tags minimum number tags consider ES; gene sets tags < min_tags excluded decreasing TRUE/FALSE vector specifies whether order column rl decreasingly ; must length equal `ncol(rl)`. NULL, columns ranked decreasing order mc_cores_path number cores use parallel calculation gene set lists; total number cpu used mc_cores_path x mc_cores_perm mc_cores_perm number cores use parallel calculation ranked list permutations; total number cpu used mc_cores_path x mc_cores_perm description optional named vector gene set description; names must gene seet identifiers out_file_prefix prefix .xlsx .txt output files min.k minimum number permutations obtain valid permutation-based statistics","code":""},{"path":"/reference/gsea.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gene Sert Enrichment Analysis — gsea","text":"data.frame : es, enrichment score; nes normalized enrichment score; nperm, number permutations actually used; p-value, empirical p-value; adjusted p-value, BH FDR; q_val: q-value estimnated p-values using qvalue package; FDR q-value, empirical FDR; tags, leading edge size; tags_perc, leading edge size percent gene set; list_top, rank ES; list_top_perc, rank ES percent full ranked list; lead_edge, signal strength; lead_edge_subset, gene names leading edge","code":""},{"path":"/reference/gsea2enrich.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a gseaResult instance from Ulisse GSEA result — gsea2enrich","title":"Create a gseaResult instance from Ulisse GSEA result — gsea2enrich","text":"Create gseaResult instance Ulisse GSEA result","code":""},{"path":"/reference/gsea2enrich.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a gseaResult instance from Ulisse GSEA result — gsea2enrich","text":"","code":"gsea2enrich(   gsea_res = NULL,   rl = NULL,   gsl = NULL,   min_size = 5,   max_size = 500,   decreasing = NULL )"},{"path":"/reference/gsea2enrich.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a gseaResult instance from Ulisse GSEA result — gsea2enrich","text":"gsea_res output function gsea() rl input used obtain gsea_res; numeric matrix genes--ranking criteria; column contains numeric values; rownames mandatory; gsl named list gene sets used obtain gsea_res min_size minimum gene set size max_size maximum gene set size decreasing TRUE/FALSE vector specifies whether order column rl decreasingly ; must length equal `ncol(rl)`. NULL, #' @export","code":""},{"path":"/reference/integrated_cross_talk.html","id":null,"dir":"Reference","previous_headings":"","what":"Integrated cellular cross talk analysis — integrated_cross_talk","title":"Integrated cellular cross talk analysis — integrated_cross_talk","text":"function wrapper `single_integrated_cross_talk()` calculates inter-intracellular communication multiple clusters.","code":""},{"path":"/reference/integrated_cross_talk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Integrated cellular cross talk analysis — integrated_cross_talk","text":"","code":"integrated_cross_talk(   cl_list,   ccc_list,   gs_list,   A,   k = 9,   bin_type = \"number\",   perm_link = \"degree\",   perm_weights = \"degree\",   cut_par = 3,   mc_cores_perm = 1,   mc_cores_ct = 1 )"},{"path":"/reference/integrated_cross_talk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Integrated cellular cross talk analysis — integrated_cross_talk","text":"cl_list cluster list used communication analysis (provided `S_list` `gs_cross_talk()`) ccc_list communication details cluster interest gs_list list gene set lists, one cluster considered analysis adjacency matrix whole gene network considered (can sparseMatrix) k number permutations bin_type can either \"number\" (suggested), \"interval\" \"width\". See `ggplot2::cut_interval()` details. perm_link = c(\"degree\", \"simple\") permutation link degree-conservative (\"degree\"), random (\"simple\") perm_weights = c(\"degree\", \"simple\") permutation weights degree-conservative (\"degree\"), random (\"simple\") cut_par number bin cut. set `NULL`, function search best cut 2:15 mc_cores_perm number thread used permutations mc_cores_ct number threads used cross talk calculation","code":""},{"path":"/reference/integrated_cross_talk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Integrated cellular cross talk analysis — integrated_cross_talk","text":"function returns data.frame result inter-intracellular communication: ccc: cluster pair considered integrated cross-talk analysis S1_name,S2_name: names gene-set pairs considered c: cross-talk score S1_size,S2_size: number genes S1 S2 S1_s2_size,S2_s1_size: number S1 genes interacting S2, vice versa dL: number links S1 S2 L: number possible links S1 S2 r_c: cross-talk saturation, calculated `dL/L` u1,u2: sum gene weights S1 S2, respectively S1,S2: list interacting genes S1 S2, respectively s: cross-talk summary score pA,pU: p-values number links (pA) weights (pU) p: combined p-value","code":""},{"path":"/reference/integrated_cross_talk.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Integrated cellular cross talk analysis — integrated_cross_talk","text":"function takes inputs takes input list communication details interest (`ccc_list`),   together cluster-list used CCC calculation (`cl_list`), list gene sets lists (`gs_list`), one cluster/cell type,  adjacency matrix biological network (``).   inputs formatted passed `single_integrated_cross_talk()` calculate integrated cross-talk cluster pair provided.","code":""},{"path":"/reference/ora.html","id":null,"dir":"Reference","previous_headings":"","what":"Over Representation Analysis — ora","title":"Over Representation Analysis — ora","text":"Representation Analysis","code":""},{"path":"/reference/ora.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Over Representation Analysis — ora","text":"","code":"ora(   wb = NULL,   universe = NULL,   gsl = NULL,   p_adj_method = \"fdr\",   description = NULL,   wbd_min = 1,   min_size = 5,   max_size = 500,   out_file_prefix = \"ora_res\" )"},{"path":"/reference/ora.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Over Representation Analysis — ora","text":"wb list character vectors hits (white balls) universe universe, character vector gsl named list sets p_adj_method p value adjustment method, see p.adjust.methods description optional named vector gene set description; names must gene set identifiers wbd_min minimum number white balls drawn min_size minimum gene set size max_size maximum gene set size out_file_prefix prefix .xlsx .txt output files","code":""},{"path":"/reference/ora1gs.html","id":null,"dir":"Reference","previous_headings":"","what":"Hypergeometric test on 1 dataset — ora1gs","title":"Hypergeometric test on 1 dataset — ora1gs","text":"Hypergeometric test 1 dataset","code":""},{"path":"/reference/ora1gs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hypergeometric test on 1 dataset — ora1gs","text":"","code":"ora1gs(wb = NULL, bb = NULL, bd = NULL)"},{"path":"/reference/ora1gs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hypergeometric test on 1 dataset — ora1gs","text":"wb white balls bb black balls bd balls drawn","code":""},{"path":"/reference/ora2enrich.html","id":null,"dir":"Reference","previous_headings":"","what":"ora2enrich\nthis function translates the result of an ORA into the DOSE class ","title":"ora2enrich\nthis function translates the result of an ORA into the DOSE class ","text":"ora2enrich function translates result ORA DOSE class \"enrichResult\"","code":""},{"path":"/reference/ora2enrich.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ora2enrich\nthis function translates the result of an ORA into the DOSE class ","text":"","code":"ora2enrich(   ora_res = NULL,   pvalueCutoff = 1,   pAdjustMethod = \"BH\",   qvalueCutoff = 1,   wb = NULL,   universe = NULL,   gsl = NULL,   organism = \"UNKNOWN\",   keytype = \"UNKNOWN\",   ontology = \"UNKNOWN\",   readable = FALSE,   min_size = 5,   max_size = 500 )"},{"path":"/reference/ora2enrich.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ora2enrich\nthis function translates the result of an ORA into the DOSE class ","text":"ora_res ora analysis result pvalueCutoff cut adjusted p value= 0.25 pAdjustMethod method p value adjustement qvalueCutoff cut q values wb input gene list universe universe genes gsl list gene sets organism organism keytype keytype ontology ontology readable readable min_size minimum gene set size max_size maximum gene set size","code":""},{"path":"/reference/ora_clusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Over Representation Analysis on all clusters of single cell data — ora_clusters","title":"Over Representation Analysis on all clusters of single cell data — ora_clusters","text":"function can used perform ORA test multiple clusters/cell-types conditions","code":""},{"path":"/reference/ora_clusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Over Representation Analysis on all clusters of single cell data — ora_clusters","text":"","code":"ora_clusters(wb, universe, gsl, wb_min = 1, p_adj_method = \"fdr\", mc_cores = 2)"},{"path":"/reference/ora_clusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Over Representation Analysis on all clusters of single cell data — ora_clusters","text":"wb named list hits (white balls) vector cluster/condition universe named list universe genes cluster/condition. used obtain black balls (\"elements\") gsl named list sets wb_min valued used filter gsl used testing. equal 0, sets tested, otherwise ones  contains least `wb_min` `wb` genes tested. Useful limit number tested sets avoid testing sets contains `wb` genes p_adj_method p value adjustment method, see p.adjust.methods mc_cores number cores used parallelize ORA tests","code":""},{"path":"/reference/ora_clusters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Over Representation Analysis on all clusters of single cell data — ora_clusters","text":"function return named list result table cluster/condition. table columns id: name set tested N: total number gene tested wb: number hit genes bb: number elements present test (`N` - `wb`) bd: number genes set tested wbd: number hit genes present set tested exp: er: p: p-value p_adj: corrected p-value calculated using `p_adj_method` q_val: q-value calculated using bootstrap method (see qvalue::qvalue details) gene: list `wbd` genes separated `;`","code":""},{"path":"/reference/ora_pipeline.html","id":null,"dir":"Reference","previous_headings":"","what":"ora pipeline — ora_pipeline","title":"ora pipeline — ora_pipeline","text":"ora pipeline","code":""},{"path":"/reference/ora_pipeline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ora pipeline — ora_pipeline","text":"","code":"ora_pipeline(   deg_list = NULL,   universe = NULL,   gs = NULL,   gsid2name = NULL,   mc.cores = 1,   eg2sym = NULL,   min_size = 5,   max_size = 500,   out_dir = \"./\",   write_tables = FALSE,   id = \"ora\" )"},{"path":"/reference/ora_pipeline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ora pipeline — ora_pipeline","text":"deg_list gene list interest universe genes gs list gene lists gsid2name data.frame annotation gene sets. must contain column \"gsid\" gene set ids match gs mc.cores number cores eg2sym data.frame translating gene ids symbol. must contain columncs gene_id symbol min_size minimum gene set size max_size maximum gene set size out_dir output directory write_tables whether write output id project name","code":""},{"path":"/reference/pathway_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns filtered msigdb geneset in a format compatible with cross-talks calculations — pathway_data","title":"Returns filtered msigdb geneset in a format compatible with cross-talks calculations — pathway_data","text":"Download MsidgDB data, filter prepare format needed cross-talks calculation","code":""},{"path":"/reference/pathway_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns filtered msigdb geneset in a format compatible with cross-talks calculations — pathway_data","text":"","code":"pathway_data(   species,   category = NULL,   subcategory = NULL,   type = \"gene_symbol\",   genes,   min_size = 1,   max_size = 500 )"},{"path":"/reference/pathway_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns filtered msigdb geneset in a format compatible with cross-talks calculations — pathway_data","text":"species Species name category MSigDB category name, see `msigdbr_collections()` subcategory MsigDB subcategory name, see `msigdbr_collections()` type Gene name interest, can `gene_symbol` `entrez_gene` genes vector gene gene name interest min_size, max_size filtering gene sets maintain ones least `min_size` less `max_size` number genes","code":""},{"path":"/reference/pathway_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns filtered msigdb geneset in a format compatible with cross-talks calculations — pathway_data","text":"output list two output: msigdb_output: data.frame data downloaded MSigDB data path_list: list pathway. list composed vector names genes interest  part pathway","code":""},{"path":"/reference/pathway_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Returns filtered msigdb geneset in a format compatible with cross-talks calculations — pathway_data","text":"function downloads pathway data `species` interest. selection database  download made using parameter `category` `subcategory`. data downloaded filtered maintain `genes` interest remove pathway number genes lower `min_size` higher `max_size`","code":""},{"path":"/reference/pathway_sim_comm.html","id":null,"dir":"Reference","previous_headings":"","what":"Pathway similarity and communities — pathway_sim_comm","title":"Pathway similarity and communities — pathway_sim_comm","text":"Pathway similarity communities","code":""},{"path":"/reference/pathway_sim_comm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pathway similarity and communities — pathway_sim_comm","text":"","code":"pathway_sim_comm(   x,   gs_list,   method = c(\"overlap\", \"jaccard\"),   coeff = c(0.5, 0.1),   all_gs = TRUE,   comm_method = c(\"auto\", \"fastgreedy\", \"multilev\"),   set_sim_df = NULL )"},{"path":"/reference/pathway_sim_comm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pathway similarity and communities — pathway_sim_comm","text":"x named vector pathway scores gs_list gene set list method 'overlap' 'jaccard' coeff threshold similarity score two gene sets all_gs TRUE/FALSE comm_method one among 'auto', 'fastgreedy' 'multilev' set_sim_df optional data frame three columns 'set1', 'set2' 'sim'","code":""},{"path":"/reference/pathway_sim_comm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pathway similarity and communities — pathway_sim_comm","text":"list two data frames containing pathway network vertex similarity","code":""},{"path":"/reference/pathway_similarity.html","id":null,"dir":"Reference","previous_headings":"","what":"Pathway similarity — pathway_similarity","title":"Pathway similarity — pathway_similarity","text":"Pathway similarity","code":""},{"path":"/reference/pathway_similarity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pathway similarity — pathway_similarity","text":"","code":"pathway_similarity(pathway_list, gene_network_adj, sim_method = \"overlap\")"},{"path":"/reference/pathway_similarity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pathway similarity — pathway_similarity","text":"pathway_list list gene sets gene_network_adj adjacency matrix gene network analysis sim_method method define similarity pathways","code":""},{"path":"/reference/perm_link.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to caluclate permutation of the number of links between two gene sets — perm_link","title":"Function to caluclate permutation of the number of links between two gene sets — perm_link","text":"`perm_link` used obtain permutatied number links two genesets  defined number gene","code":""},{"path":"/reference/perm_link.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to caluclate permutation of the number of links between two gene sets — perm_link","text":"","code":"perm_link(r, c, gene_network_adj, core, k, hash = T)"},{"path":"/reference/perm_link.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to caluclate permutation of the number of links between two gene sets — perm_link","text":"r length first geneset (rows) c length second geneset (columns) gene_network_adj adjacency matrix gene network used core threads used permutation k number permutation hash logical, indicating random sampling done using hashmap (see `sample.int()`)","code":""},{"path":"/reference/perm_link.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to caluclate permutation of the number of links between two gene sets — perm_link","text":"function list k matrices, one composed number links permutated verion  two genesets","code":""},{"path":"/reference/perm_link.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function to caluclate permutation of the number of links between two gene sets — perm_link","text":"function generates k permuted verion two geneset defined length random sampling  gene network adjacency matrix. identify subset adjacency matrix k geneset  calculates number links.","code":""},{"path":"/reference/plot_communication_network.html","id":null,"dir":"Reference","previous_headings":"","what":"Cell-cell communication network plot — plot_communication_network","title":"Cell-cell communication network plot — plot_communication_network","text":"function used plot results cell-cell communication analysis  overlapped single-cell plot","code":""},{"path":"/reference/plot_communication_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cell-cell communication network plot — plot_communication_network","text":"","code":"plot_communication_network(   cell_emb,   cl_res,   cl_cell,   palette,   e_scale = 9,   label,   save_file,   point_size = 0.5,   point_alpha = 0.5,   edge_alpha = 0.8,   edge_color = \"gray45\",   node_size = 5,   text_size = 2,   text_color = \"black\",   heigh = 100,   width = 100,   res = 300,   unit = \"mm\" )"},{"path":"/reference/plot_communication_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cell-cell communication network plot — plot_communication_network","text":"cell_emb cell embedding (UMAP tSNE) matrix cl_res cell-cell communication results (`gs_cross_talk()`) cl_cell two column data-frame, first cell names, second annotation (cluster cell types) palette named vector color associated cluster cell types, used set  cell points communication network vertices color. NULL ignored, ggplot automatic palette used e_scale value scale edge weights plotting, change adjust maximum link widths label logical, cluster/cell type name plotted vertex names save_file saving plot name. NULL ignored point_size = 0.5 size cell points plotted. point_alpha = 0.5 transparency color fill cell points edge_alpha = 0.8 transparency edge color edge_color = edge color node_size = 5 size vertices cell-cell communication network overlapped cell points text_size size node labels plotted (`label = T`) text_color = text color (`label = T`) heigh, width, res, unit params used save plot (jpeg format)","code":""},{"path":"/reference/plot_communication_network.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cell-cell communication network plot — plot_communication_network","text":"functions uses cell-embeddings produced single-cell analysis  cell-cell communication analysis results, obtained `gs_cross_talk()`, plot  communication network overlapped cell plot. functions filter   `gs_cross_talk()` results plot significant ones.  Cells communication network vertices colored according annotation, provided `cl_cell`","code":""},{"path":"/reference/plot_functional_relevance.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to plot functional relevance results — plot_functional_relevance","title":"Function to plot functional relevance results — plot_functional_relevance","text":"Graphical function plot (relative) functional relevance results.","code":""},{"path":"/reference/plot_functional_relevance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to plot functional relevance results — plot_functional_relevance","text":"","code":"plot_functional_relevance(   fr,   method = \"count\",   file_name = NULL,   plot_names = T,   pal = NULL,   jitter_width = 0.07,   jitter_height = 0.07,   width = 200,   height = 200,   res = 300,   units = \"mm\" )"},{"path":"/reference/plot_functional_relevance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to plot functional relevance results — plot_functional_relevance","text":"fr data.frame obtained `gene_functional_relevance()` result method = c(\"count\", \"relative\") \"count\" functional interactor diversity functional relevance used, otherwise relative ones file_name file name plot, `NULL` plot returned function plot_names logical, vector length order genes `fr`. `TRUE` genes name plotted, `FALSE` names plotted, otherwise passed vector used label genes plotted pal vector three color used create gradient color genes according (relative) functional relevance score. `NULL` Brewer \"Spectral\" palette used jitter_width, jitter_height values control point jitter plot. See ggplot2::geom_jitter() details width, height, res, units values used save plot jpeg format, see grDevices::jpeg() details","code":""},{"path":"/reference/plot_functional_relevance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to plot functional relevance results — plot_functional_relevance","text":"`file_name` function returns ggplot object","code":""},{"path":"/reference/plot_functional_relevance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function to plot functional relevance results — plot_functional_relevance","text":"function plots (relative) functional relevance results obtained `gene_functional_relevance()` function. gene plotted interactor  functional diversity, colored functional relevance score","code":""},{"path":"/reference/plot_gsea_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot heatmap of GSEA results for multiple runs — plot_gsea_heatmap","title":"Plot heatmap of GSEA results for multiple runs — plot_gsea_heatmap","text":"Plot heatmap GSEA results multiple runs","code":""},{"path":"/reference/plot_gsea_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot heatmap of GSEA results for multiple runs — plot_gsea_heatmap","text":"","code":"plot_gsea_heatmap(   gsea_res = NULL,   nes_sign = TRUE,   a = 0.25,   p.stat = \"FDRq\",   na_col = \"khaki\",   max_gs = 50,   min.p = NA,   ... )"},{"path":"/reference/plot_gsea_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot heatmap of GSEA results for multiple runs — plot_gsea_heatmap","text":"gsea_res result function gsea() nes_sign whether print nes sign alpha FDR na_col color FDR > max_gs maximum number gene sets plotted ... arguments ComplexHeatmap::Heatmap()","code":""},{"path":"/reference/plot_network_CT.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot cross-talk results as a network — plot_network_CT","title":"Plot cross-talk results as a network — plot_network_CT","text":"function elaborates results `gs_cross_talk()` functions obtain graphical   representation cross-talk network","code":""},{"path":"/reference/plot_network_CT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot cross-talk results as a network — plot_network_CT","text":"","code":"plot_network_CT(   ct,   filtering = FALSE,   p_val,   FDR,   ct_val,   community,   pal_community = NULL,   voronoi_radius = 0.8,   voronoi_alpha = 0.3,   vertex = \"name\",   vertex_pal = NULL,   vertex_size = 5,   vertex_label = TRUE,   edge_col_by = \"ct_score\",   edge_pal = NULL,   edge_width = T,   edge_adj_col = 0.7,   file_out = NULL,   width = 200,   height = 200,   res = 300,   units = \"mm\",   ... )"},{"path":"/reference/plot_network_CT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot cross-talk results as a network — plot_network_CT","text":"ct output `gs_cross_talk()` function filtering logical, function plot edges significant ones. `TRUE`, function uses `p_val, FDR` `ct_val` identify  significant ones, plotted solid line, significant dashed line. `FALSE`, edges plotted solid line. p_val, FDR, ct_val filtering values. one set `NULL` function ignores community logical object resulting igraph community calculation. `TRUE`, function calculates communities using fastgreedy algorithm, `FALSE` function consider communities. Otherwise, community object provided, function uses color vertices accordingly pal_community color palette used color vertices according communities. provided, function uses `rainbow()` palette. `community = FALSE` function ignores voronoi_radius, voronoi_alpha parameters passed `geom_node_voronoi()`. `vertex` `community` arguments enabled, communities represented cells voronoi tessellation (see `ggraph::geom_node_voronoi()`). case, argument used control  radius cells transparency, respectively. vertex list two vector, first name attribute second named vector attribute per vertices  used color (discrete value), `NULL` vertices colored (thus \"grey65\" passed default color) vertex_pal color palette used color vertices. named vector names corresponding unique elements `vertices`. `NULL` functions use pals::alphabet2 default vertex_size size vertices plot vertex_label logical, vertex names plotted , named vector, label associated vertex named edge_col_by name column used color edges. Default = `ct_score` edge_pal color used create gradient color edges. provided, function uses \"blue\"  \"red\" edge_width logical, edge widths proportional `edge_col_by` values edge_adj_col value used adjust color transparency edges file_out name jpeg file produced. `NULL` functions returns also plot object width, height, res, units graphical value `jpeg()` function ... graphical parameters passed `ggraph()` function","code":""},{"path":"/reference/plot_network_CT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot cross-talk results as a network — plot_network_CT","text":"`file_out` null function returns plot igraph object used plotting (may contain communities `comm_id` attribute).   Otherwise, igraph object returned plot saved `file_out`","code":""},{"path":"/reference/plot_network_CT.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot cross-talk results as a network — plot_network_CT","text":"functions uses `gs_cross_talk()` output build cross-talk network. , network plotted  edges colored value interest. user may decide plot edges, color vertices   community, scale dimension edges variable interest.","code":""},{"path":"/reference/plot_ora_comparison.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a comparion between two ORAs — plot_ora_comparison","title":"Plot a comparion between two ORAs — plot_ora_comparison","text":"Plot comparion two ORAs","code":""},{"path":"/reference/plot_ora_comparison.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a comparion between two ORAs — plot_ora_comparison","text":"","code":"plot_ora_comparison(   ora_res_list = NULL,   p_sig = 0.001,   p_max = 0.1,   dir_out = \"./\",   mar = c(2.5, 20, 1, 1),   mgp = c(1.2, 0.3, 0),   cex.axis = 0.6,   use_nominal_p = TRUE,   col_pal = NULL )"},{"path":"/reference/plot_ora_comparison.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a comparion between two ORAs — plot_ora_comparison","text":"ora_res_list list results ora_pipeline p_sig thresold significant pathways p_max maximum p-value allowed marginally significant pathways dir_out output directory mar mar parameter mgp mgp parameter cex.axis cex.axis use_nominal_p whether use nominal p-values col_pal color palette function","code":""},{"path":"/reference/plot_ora_comparison.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a comparion between two ORAs — plot_ora_comparison","text":"data.frame merged results pathways satisfy p_sig least one condition","code":""},{"path":"/reference/plot_ora_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot heatmap of ORA results for multiple runs — plot_ora_heatmap","title":"Plot heatmap of ORA results for multiple runs — plot_ora_heatmap","text":"Plot heatmap ORA results multiple runs","code":""},{"path":"/reference/plot_ora_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot heatmap of ORA results for multiple runs — plot_ora_heatmap","text":"","code":"plot_ora_heatmap(   ora_res = NULL,   p.stat = \"p_adj\",   a = 0.25,   na_col = \"khaki\",   min.p = NA,   max_gs = 50,   ... )"},{"path":"/reference/plot_ora_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot heatmap of ORA results for multiple runs — plot_ora_heatmap","text":"ora_res result function gsea() p.stat p-value plotted alpha FDR na_col color FDR > max_gs maximum number gene sets plotted ... arguments ComplexHeatmap::Heatmap()","code":""},{"path":"/reference/preparing_DEG_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to prepare the input for `cluster_communication()` by using DEG analysis results data — preparing_DEG_list","title":"Function to prepare the input for `cluster_communication()` by using DEG analysis results data — preparing_DEG_list","text":"function prepares input `cluster_communication()` analysis using DEG results data","code":""},{"path":"/reference/preparing_DEG_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to prepare the input for `cluster_communication()` by using DEG analysis results data — preparing_DEG_list","text":"","code":"preparing_DEG_list(cluster, p_val, log2FC, gene, universe)"},{"path":"/reference/preparing_DEG_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to prepare the input for `cluster_communication()` by using DEG analysis results data — preparing_DEG_list","text":"cluster column result table DEG analysis data clusters analysis p_val column result table DEG analysis data p-value test. either nominal adjusted p-value log2FC column result table DEG analysis data log2Fold Change gene column result table DEG analysis names genes tested universe vector names genes interest study. value names LR network","code":""},{"path":"/reference/preparing_DEG_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to prepare the input for `cluster_communication()` by using DEG analysis results data — preparing_DEG_list","text":"function returns gene list composed vector cluster provided. vector  composed score, calculated abs(log2FC) * -log10(p-value), named respective genes","code":""},{"path":"/reference/preparing_DEG_list.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function to prepare the input for `cluster_communication()` by using DEG analysis results data — preparing_DEG_list","text":"function prepares gene list format compatible `cluster_communication()` analysis.  detail, function needs information obtained DEG analysis: cluster tested, gene names, p-values, log2(Fold Change). data filtered consider gene interest study (`universe`).  function calculates score gene : abs(log2FC) * -log10(p-value).  p-value 0, approximated 1/10 minimum non-zero p-value present data.  function returns gene set list cluster, composed vector scores named genes  names provided.","code":""},{"path":"/reference/preparing_expr_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to prepare cluster list for `cluster_communication()` — preparing_expr_list","title":"Function to prepare cluster list for `cluster_communication()` — preparing_expr_list","text":"`preparing_expr_list()` produce cluster list needed CCC calculation","code":""},{"path":"/reference/preparing_expr_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to prepare cluster list for `cluster_communication()` — preparing_expr_list","text":"","code":"preparing_expr_list(mtx, clusters, mean_t = 1, cell_t = 5, universe)"},{"path":"/reference/preparing_expr_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to prepare cluster list for `cluster_communication()` — preparing_expr_list","text":"mtx gene--cell matrix used single cell data analysis clusters vector cluster membership cells `mtx` mean_t threshold expression used binarize expression matrix. value decided considering  distribution mean expression genes (without considering zeros) cell_t minimum number cells gene expressed `mean_t` threshold cluster considered subsequent analysis universe names genes interest. Used filter cluster gene lists","code":""},{"path":"/reference/preparing_expr_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to prepare cluster list for `cluster_communication()` — preparing_expr_list","text":"function returns gene list composed vector cluster provided. vector composed frequency -threshold expression genes cluster, named respective genes","code":""},{"path":"/reference/preparing_expr_list.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function to prepare cluster list for `cluster_communication()` — preparing_expr_list","text":"function used prepare cluster list needed input `cluster_communication()`. detail, function needs `gene_by_cell` matrix used single cell analysis. suggest use normalized data avoid accounting differences gene counts. matrix binarized assigning `1` genes normalized  expression value equal higher `mean_t`, `0` otherwise. , gene cluster, function discards  gene expressed number cell lower `cell_t` calculates mean frequency -threshold  expression cells cluster. function returns vector cluster, one composed  frequencies named corresponding genes. vectors filtered maintain genes `universe`, gene interest","code":""},{"path":"/reference/preparing_gs_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Build list for cross-talk calculation from database list — preparing_gs_list","title":"Build list for cross-talk calculation from database list — preparing_gs_list","text":"function build gene-set list compatible `gs_cross-talk()` cross-talk calculation starting provided gene set database  genes (weights) interest.","code":""},{"path":"/reference/preparing_gs_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build list for cross-talk calculation from database list — preparing_gs_list","text":"","code":"preparing_gs_list(gs_names, gs_genes, weights, min_size = 1, max_size = 500)"},{"path":"/reference/preparing_gs_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build list for cross-talk calculation from database list — preparing_gs_list","text":"gs_names names gene-sets, used build gene-set list. length `gs_gene` gs_genes names genes gene-sets `gs_genes` weights named vector weight gene `gs_gene`. `NULL` function assigns `1` gene min_size, max_size filtering gene sets maintain ones least `min_size` less `max_size` number genes","code":""},{"path":"/reference/preparing_gs_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build list for cross-talk calculation from database list — preparing_gs_list","text":"output gene-set list vector gene-set, composed weights named genes","code":""},{"path":"/reference/preparing_gs_list.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Build list for cross-talk calculation from database list — preparing_gs_list","text":"`preparing_gs_list()` uses gene-set database data build list needed `gs_cross_talk()` cross-talk calculation.","code":""},{"path":"/reference/preparing_msigdb_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Build list for cross-talk calculation from MSigDB database list — preparing_msigdb_list","title":"Build list for cross-talk calculation from MSigDB database list — preparing_msigdb_list","text":"function build gene set list compatible `gs_cross-talk()` cross-talk calculation using desired MSigDB (using msigdbr package)","code":""},{"path":"/reference/preparing_msigdb_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build list for cross-talk calculation from MSigDB database list — preparing_msigdb_list","text":"","code":"preparing_msigdb_list(   species,   category = NULL,   subcategory = NULL,   type = \"gene_symbol\",   genes,   weights,   min_size = 1,   max_size = 500 )"},{"path":"/reference/preparing_msigdb_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build list for cross-talk calculation from MSigDB database list — preparing_msigdb_list","text":"species Species name category MSigDB category name, see `msigdbr_collections()` subcategory MsigDB subcategory name, see `msigdbr_collections()` type Gene name interest, can `gene_symbol` `entrez_gene` genes vector gene gene name interest weights vector `genes` weights order. `NULL` function assigns `1` gene min_size, max_size filtering gene sets maintain ones least `min_size` less `max_size` number genes","code":""},{"path":"/reference/preparing_msigdb_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build list for cross-talk calculation from MSigDB database list — preparing_msigdb_list","text":"output gene-set list vector gene-set, composed weights named genes","code":""},{"path":"/reference/preparing_msigdb_list.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Build list for cross-talk calculation from MSigDB database list — preparing_msigdb_list","text":"`preparing_msigdb_list()` uses MSigDB database build list needed `gs_cross_talk()` cross-talk calculation. details, calls  `pathway_data()` function download database using msigdbr package build gene-set list","code":""},{"path":"/reference/round.html","id":null,"dir":"Reference","previous_headings":"","what":"Scientific approximation — round","title":"Scientific approximation — round","text":"Scientific approximation","code":""},{"path":"/reference/round.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scientific approximation — round","text":"","code":"round(x, y = 0)"},{"path":"/reference/round.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scientific approximation — round","text":"x numeric y number digits","code":""},{"path":"/reference/single_integrated_cross_talk.html","id":null,"dir":"Reference","previous_headings":"","what":"Integrated cross talk on specific cluster analysis — single_integrated_cross_talk","title":"Integrated cross talk on specific cluster analysis — single_integrated_cross_talk","text":"function calculates cross-talk genes involved communication specific cluster/cell type cluster gene sets","code":""},{"path":"/reference/single_integrated_cross_talk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Integrated cross talk on specific cluster analysis — single_integrated_cross_talk","text":"","code":"single_integrated_cross_talk(   S_list,   ref,   A,   k = 9,   bin_type = \"number\",   cut_par = 9,   perm_link = \"degree\",   perm_weights = \"simple\",   mc_cores_perm = 1,   mc_cores_ct = 1 )"},{"path":"/reference/single_integrated_cross_talk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Integrated cross talk on specific cluster analysis — single_integrated_cross_talk","text":"S_list named list genes grouped gene sets, obtained `build_S_list()`, plus reference gene set list ref name gene set `S_list` contains genes cluster involved communication cluster j adjacency matrix whole gene network considered (can sparseMatrix) k number permutations bin_type can either \"number\" (suggested), \"interval\" \"width\". See `ggplot2::cut_interval()` details. cut_par number bin cut. set `NULL`, function search best cut 2:15 perm_link = c(\"degree\", \"simple\") permutation link degree-conservative (\"degree\"), random (\"simple\") perm_weights = c(\"degree\", \"simple\") permutation weights degree-conservative (\"degree\"), random (\"simple\") mc_cores_perm number thread used permutations mc_cores_ct number threads used cross talk calculation","code":""},{"path":"/reference/single_integrated_cross_talk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Integrated cross talk on specific cluster analysis — single_integrated_cross_talk","text":"function returns data.frame results ct calculation: S1_name,S2_name: names gene-set pairs considered c: cross-talk score S1_size,S2_size: number genes S1 S2 S1_s2_size,S2_s1_size: number S1 genes interacting S2, vice versa dL: number links S1 S2 L: number possible links S1 S2 r_c: cross-talk saturation, calculated `dL/L` u1,u2: sum gene weights S1 S2, respectively S1,S2: list interacting genes S1 S2, respectively s: cross-talk summary score pA,pU: p-values number links (pA) weights (pU) p: combined p-value","code":""},{"path":"/reference/single_integrated_cross_talk.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Integrated cross talk on specific cluster analysis — single_integrated_cross_talk","text":"function takes inputs adjacency matrix biological network (``), gene-set list `S_list()` name gene set  contains communication genes (`ref`). gene-set pair shows least link , function calculates cross-talk   statistical evaluation, described paper, using `k` permutations.","code":""}]
